{
  final String dropTableHql=JoinedFlatTable.generateDropTableStatement(intermediateTableDesc,jobId);
  final String createTableHql=JoinedFlatTable.generateCreateTableStatement(intermediateTableDesc,getJobWorkingDir(jobId),jobId);
  String[] insertDataHqls;
  try {
    insertDataHqls=JoinedFlatTable.generateInsertDataStatement(intermediateTableDesc,jobId,this.jobEngineConfig);
  }
 catch (  IOException e1) {
    e1.printStackTrace();
    throw new RuntimeException("Failed to generate insert data SQL for intermediate table.");
  }
  final String[] insertDataHqlsCopy=insertDataHqls;
  AbstractExecutable step=new AbstractExecutable(){
    @Override protected ExecuteResult doWork(    ExecutableContext context) throws ExecuteException {
      HiveClient hiveClient=new HiveClient();
      try {
        hiveClient.executeHQL(new String[]{dropTableHql,createTableHql});
        hiveClient.executeHQL(insertDataHqlsCopy);
      }
 catch (      Exception e) {
        e.printStackTrace();
        throw new ExecuteException("Failed to createIntermediateHiveTable;",e);
      }
      return new ExecuteResult(ExecuteResult.State.SUCCEED);
    }
  }
;
  step.setName(ExecutableConstants.STEP_NAME_CREATE_FLAT_HIVE_TABLE);
  return step;
}
