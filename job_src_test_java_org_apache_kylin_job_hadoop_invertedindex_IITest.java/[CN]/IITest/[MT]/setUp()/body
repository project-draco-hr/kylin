{
  this.createTestMetadata();
  this.ii=IIManager.getInstance(getTestConfig()).getII(iiName);
  this.iiDesc=ii.getDescriptor();
  List<List<String>> streamMessages=Lists.transform(Arrays.asList(inputData),new Function<String,List<String>>(){
    @Nullable @Override public List<String> apply(    @Nullable String input){
      return StringStreamParser.instance.parse(new StreamMessage(System.currentTimeMillis(),input.getBytes())).getStreamMessage();
    }
  }
);
  iiRows=Lists.newArrayList();
  final Slice slice=new SliceBuilder(iiDesc,(short)0,true).buildSlice(new MicroStreamBatch(streamMessages,org.apache.kylin.common.util.Pair.newPair(System.currentTimeMillis(),System.currentTimeMillis()),org.apache.kylin.common.util.Pair.newPair(System.currentTimeMillis(),System.currentTimeMillis())));
  IIKeyValueCodec codec=new IIKeyValueCodec(slice.getInfo());
  for (  IIRow iiRow : codec.encodeKeyValue(slice)) {
    iiRows.add(iiRow);
  }
}
