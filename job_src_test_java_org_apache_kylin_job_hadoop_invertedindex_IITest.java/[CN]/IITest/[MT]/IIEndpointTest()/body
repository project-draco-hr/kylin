{
  TableRecordInfo info=new TableRecordInfo(ii.getDescriptor());
  CoprocessorRowType type=CoprocessorRowType.fromTableRecordInfo(info,ii.getFirstSegment().getColumns());
  CoprocessorProjector projector=CoprocessorProjector.makeForEndpoint(info,Collections.singletonList(ii.getDescriptor().findColumnRef("default.test_kylin_fact","lstg_format_name")));
  FunctionDesc f1=new FunctionDesc();
  f1.setExpression("SUM");
  ParameterDesc p1=new ParameterDesc();
  p1.setType("column");
  p1.setValue("PRICE");
  f1.setParameter(p1);
  f1.setReturnType("decimal(19,4)");
  TblColRef column=ii.getDescriptor().findColumnRef("default.test_kylin_fact","cal_dt");
  CompareTupleFilter compareFilter=new CompareTupleFilter(TupleFilter.FilterOperatorEnum.GTE);
  ColumnTupleFilter columnFilter=new ColumnTupleFilter(column);
  compareFilter.addChild(columnFilter);
  ConstantTupleFilter constantFilter=null;
  constantFilter=new ConstantTupleFilter(("2012-08-16"));
  compareFilter.addChild(constantFilter);
  EndpointAggregators aggregators=EndpointAggregators.fromFunctions(info,Collections.singletonList(f1));
  CoprocessorFilter filter=CoprocessorFilter.fromFilter(new ClearTextDictionary(info),compareFilter,FilterDecorator.FilterConstantsTreatment.AS_IT_IS);
  final Iterator<IIRow> iiRowIterator=iiRows.iterator();
  IIEndpoint endpoint=new IIEndpoint();
  IIProtos.IIResponseInternal response=endpoint.getResponse(new RegionScanner(){
    @Override public HRegionInfo getRegionInfo(){
      throw new NotImplementedException();
    }
    @Override public boolean isFilterDone() throws IOException {
      throw new NotImplementedException();
    }
    @Override public boolean reseek(    byte[] row) throws IOException {
      throw new NotImplementedException();
    }
    @Override public long getMaxResultSize(){
      throw new NotImplementedException();
    }
    @Override public long getMvccReadPoint(){
      throw new NotImplementedException();
    }
    @Override public boolean nextRaw(    List<Cell> result) throws IOException {
      if (iiRowIterator.hasNext()) {
        IIRow iiRow=iiRowIterator.next();
        result.addAll(iiRow.makeCells());
        return true;
      }
 else {
        return false;
      }
    }
    @Override public boolean nextRaw(    List<Cell> result,    int limit) throws IOException {
      throw new NotImplementedException();
    }
    @Override public boolean next(    List<Cell> results) throws IOException {
      throw new NotImplementedException();
    }
    @Override public boolean next(    List<Cell> result,    int limit) throws IOException {
      throw new NotImplementedException();
    }
    @Override public void close() throws IOException {
      throw new NotImplementedException();
    }
  }
,type,projector,aggregators,filter);
  Assert.assertEquals(2,response.getRowsList().size());
  System.out.println(response.getRowsList().size());
  Set<String> answers=Sets.newHashSet("120.4747","26.8551");
  for (  org.apache.kylin.storage.hbase.coprocessor.endpoint.generated.IIProtos.IIResponseInternal.IIRow responseRow : response.getRowsList()) {
    byte[] measuresBytes=responseRow.getMeasures().toByteArray();
    List<Object> metrics=aggregators.deserializeMetricValues(measuresBytes,0);
    Assert.assertTrue(answers.contains(metrics.get(0)));
  }
}
