{
  final BufferedCuboidWriter bufferedCuboidWriter=new BufferedCuboidWriter(new TupleConverter(){
    @Override public Tuple2<byte[],byte[]> convert(    long cuboidId,    GTRecord record){
      return new Tuple2<>(Long.valueOf(cuboidId).toString().getBytes(),Long.valueOf(cuboidId).toString().getBytes());
    }
  }
);
  final int testCount=10000000;
  final Future<?> future=Executors.newCachedThreadPool().submit(new Runnable(){
    @Override public void run(){
      int i=0;
      while (i++ < testCount) {
        try {
          bufferedCuboidWriter.write(i,null);
        }
 catch (        IOException e) {
          e.printStackTrace();
          throw new RuntimeException(e);
        }
      }
      bufferedCuboidWriter.close();
    }
  }
);
  long actualCount=0;
  for (  Tuple2<byte[],byte[]> tuple2 : bufferedCuboidWriter.getResult()) {
    assertEquals(Long.parseLong(new String(tuple2._1())),++actualCount);
  }
  future.get();
  assertEquals(actualCount,testCount);
}
