{
  JobStep step=jobInstance.getSteps().get(stepSeqId);
  if (jobInstance.getName() == null || step.getName() == null) {
    throw new IllegalArgumentException("JobInstance name or JobStep name cannot be null!");
  }
  JobDetail jobFlowNode=JobBuilder.newJob(step.isRunAsync() ? AsyncJobFlowNode.class : JobFlowNode.class).withIdentity(JobInstance.getStepIdentity(jobInstance,step),JobConstants.CUBE_JOB_GROUP_NAME).storeDurably().build();
  jobFlowNode.getJobDataMap().put(JobConstants.PROP_JOB_FLOW,this);
  String execCmd=(step.getCmdType() == JobStepCmdTypeEnum.SHELL_CMD || step.getCmdType() == JobStepCmdTypeEnum.SHELL_CMD_HADOOP) ? wrapExecCmd(jobInstance,step.getExecCmd(),String.valueOf(step.getSequenceID())) : step.getExecCmd();
  jobFlowNode.getJobDataMap().put(JobConstants.PROP_COMMAND,execCmd);
  jobFlowNode.getJobDataMap().put(JobConstants.PROP_JOBINSTANCE_UUID,jobInstance.getUuid());
  jobFlowNode.getJobDataMap().put(JobConstants.PROP_JOBSTEP_SEQ_ID,step.getSequenceID());
  jobFlowNode.getJobDataMap().put(JobConstants.PROP_JOB_ASYNC,step.isRunAsync());
  return jobFlowNode;
}
