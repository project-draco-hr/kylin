{
  try {
    List<List<String>> parsedStreamMessages=null;
    while (true) {
      if (parsedStreamMessages == null) {
        parsedStreamMessages=Lists.newLinkedList();
        clearCounter();
      }
      StreamMessage streamMessage;
      try {
        streamMessage=streamMessageQueue.poll(30,TimeUnit.SECONDS);
      }
 catch (      InterruptedException e) {
        logger.warn("stream queue should not be interrupted",e);
        continue;
      }
      if (streamMessage == null) {
        logger.info("The stream queue is drained, current available stream count: " + parsedStreamMessages.size());
        if ((System.currentTimeMillis() - lastBuildTime) > batchInterval() && !parsedStreamMessages.isEmpty()) {
          build(new MicroStreamBatch(parsedStreamMessages,Pair.newPair(startTimestamp,endTimestamp),Pair.newPair(startOffset,endOffset)));
          parsedStreamMessages=null;
        }
        continue;
      }
      if (streamMessage.getOffset() < 0) {
        onStop();
        logger.warn("streaming encountered EOF, stop building");
        break;
      }
      final ParsedStreamMessage parsedStreamMessage=getStreamParser().parse(streamMessage);
      if (getStreamFilter().filter(parsedStreamMessage)) {
        if (startOffset > parsedStreamMessage.getOffset()) {
          startOffset=parsedStreamMessage.getOffset();
        }
        if (endOffset < parsedStreamMessage.getOffset()) {
          endOffset=parsedStreamMessage.getOffset();
        }
        if (startTimestamp > parsedStreamMessage.getTimestamp()) {
          startTimestamp=parsedStreamMessage.getTimestamp();
        }
        if (endTimestamp < parsedStreamMessage.getTimestamp()) {
          endTimestamp=parsedStreamMessage.getTimestamp();
        }
        parsedStreamMessages.add(parsedStreamMessage.getStreamMessage());
        if (parsedStreamMessages.size() >= batchSize()) {
          build(new MicroStreamBatch(parsedStreamMessages,Pair.newPair(startTimestamp,endTimestamp),Pair.newPair(startOffset,endOffset)));
          parsedStreamMessages=null;
        }
      }
 else {
      }
    }
  }
 catch (  Exception e) {
    logger.error("build stream error, stop building",e);
    throw new RuntimeException("build stream error, stop building",e);
  }
}
