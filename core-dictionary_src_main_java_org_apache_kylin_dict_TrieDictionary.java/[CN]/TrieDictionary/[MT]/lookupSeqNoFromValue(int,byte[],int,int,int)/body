{
  if (o == inpEnd)   return checkFlag(headSize,BIT_IS_END_OF_VALUE) ? 0 : roundSeqNo(roundingFlag,-1,-1,0);
  int seq=0;
  while (true) {
    int p=n + firstByteOffset;
    int end=p + BytesUtil.readUnsigned(trieBytes,p - 1,1);
    for (p++; p < end && o < inpEnd; p++, o++) {
      if (trieBytes[p] != inp[o]) {
        int comp=BytesUtil.compareByteUnsigned(trieBytes[p],inp[o]);
        if (comp < 0) {
          seq+=BytesUtil.readUnsigned(trieBytes,n + sizeChildOffset,sizeNoValuesBeneath);
        }
        return roundSeqNo(roundingFlag,seq - 1,-1,seq);
      }
    }
    boolean isEndOfValue=checkFlag(n,BIT_IS_END_OF_VALUE);
    if (o == inpEnd) {
      return p == end && isEndOfValue ? seq : roundSeqNo(roundingFlag,seq - 1,-1,seq);
    }
    if (isEndOfValue)     seq++;
    int c=headSize + (BytesUtil.readUnsigned(trieBytes,n,sizeChildOffset) & childOffsetMask);
    if (c == headSize)     return roundSeqNo(roundingFlag,seq - 1,-1,seq);
    byte inpByte=inp[o];
    int comp;
    while (true) {
      p=c + firstByteOffset;
      comp=BytesUtil.compareByteUnsigned(trieBytes[p],inpByte);
      if (comp == 0) {
        n=c;
        o++;
        break;
      }
 else       if (comp < 0) {
        seq+=BytesUtil.readUnsigned(trieBytes,c + sizeChildOffset,sizeNoValuesBeneath);
        if (checkFlag(c,BIT_IS_LAST_CHILD))         return roundSeqNo(roundingFlag,seq - 1,-1,seq);
        c=p + BytesUtil.readUnsigned(trieBytes,p - 1,1);
      }
 else {
        return roundSeqNo(roundingFlag,seq - 1,-1,seq);
      }
    }
  }
}
