{
  int o=offset;
  while (true) {
    int p=n + firstByteOffset;
    int len=BytesUtil.readUnsigned(trieBytes,p - 1,1);
    System.arraycopy(trieBytes,p,returnValue,o,len);
    o+=len;
    boolean isEndOfValue=checkFlag(n,BIT_IS_END_OF_VALUE);
    if (isEndOfValue) {
      seq--;
      if (seq < 0)       return o - offset;
    }
    int c=headSize + (BytesUtil.readUnsigned(trieBytes,n,sizeChildOffset) & childOffsetMask);
    if (c == headSize)     return -1;
    int nValuesBeneath;
    while (true) {
      nValuesBeneath=BytesUtil.readUnsigned(trieBytes,c + sizeChildOffset,sizeNoValuesBeneath);
      if (seq - nValuesBeneath < 0) {
        n=c;
        break;
      }
 else {
        seq-=nValuesBeneath;
        if (checkFlag(c,BIT_IS_LAST_CHILD))         return -1;
        p=c + firstByteOffset;
        c=p + BytesUtil.readUnsigned(trieBytes,p - 1,1);
      }
    }
  }
}
