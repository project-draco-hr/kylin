{
  clearSegment(cubeName);
  new Thread(new Runnable(){
    @Override public void run(){
      SimpleDateFormat f=new SimpleDateFormat("yyyy-MM-dd");
      f.setTimeZone(TimeZone.getTimeZone("GMT"));
      long dateStart=0;
      try {
        dateStart=f.parse("2012-01-01").getTime();
      }
 catch (      ParseException e) {
      }
      Random rand=new Random();
      while (generateData == true) {
        long dateEnd=dateStart + 7 * 24 * 3600000;
        try {
          generateStreamData(dateStart,dateEnd,rand.nextInt(100));
          dateStart=dateEnd;
          sleep(rand.nextInt(rand.nextInt(100 * 1000)));
        }
 catch (        Exception e) {
          e.printStackTrace();
        }
      }
    }
  }
).start();
  ExecutorService executorService=Executors.newCachedThreadPool();
  List<FutureTask<ExecutableState>> futures=Lists.newArrayList();
  for (int i=0; i < 5; i++) {
    Thread.sleep(5 * 60 * 1000);
    FutureTask futureTask=new FutureTask(new Callable<ExecutableState>(){
      @Override public ExecutableState call(){
        ExecutableState result=null;
        try {
          result=buildSegment(cubeName,0,Long.MAX_VALUE);
        }
 catch (        Exception e) {
          e.printStackTrace();
        }
        return result;
      }
    }
);
    executorService.submit(futureTask);
    futures.add(futureTask);
  }
  generateData=false;
  executorService.shutdown();
  int succeedBuild=0;
  for (int i=0; i < futures.size(); i++) {
    ExecutableState result=futures.get(i).get(20,TimeUnit.MINUTES);
    logger.info("Checking building task " + i + " whose state is "+ result);
    Assert.assertTrue(result == null || result == ExecutableState.SUCCEED || result == ExecutableState.DISCARDED);
    if (result == ExecutableState.SUCCEED)     succeedBuild++;
  }
  logger.info(succeedBuild + " build jobs have been successfully completed.");
  List<CubeSegment> segments=cubeManager.getCube(cubeName).getSegments(SegmentStatusEnum.READY);
  Assert.assertTrue(segments.size() == succeedBuild);
  if (fastBuildMode == false) {
    ExecutableState result=buildSegment(cubeName,0,Long.MAX_VALUE);
    Assert.assertTrue(result == ExecutableState.DISCARDED);
    long endOffset=segments.get(segments.size() - 1).getSourceOffsetEnd();
    result=mergeSegment(cubeName,0,endOffset);
    Assert.assertTrue(result == ExecutableState.SUCCEED);
    segments=cubeManager.getCube(cubeName).getSegments();
    Assert.assertTrue(segments.size() == 1);
    CubeSegment toRefreshSeg=segments.get(0);
    refreshSegment(cubeName,toRefreshSeg.getSourceOffsetStart(),toRefreshSeg.getSourceOffsetEnd());
    segments=cubeManager.getCube(cubeName).getSegments();
    Assert.assertTrue(segments.size() == 1);
  }
}
