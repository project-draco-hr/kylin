{
  deployEnv();
  String fastModeStr=System.getProperty("fastBuildMode");
  if (fastModeStr != null && fastModeStr.equalsIgnoreCase("true")) {
    fastBuildMode=true;
    logger.info("Will use fast build mode");
  }
 else {
    logger.info("Will not use fast build mode");
  }
  final KylinConfig kylinConfig=KylinConfig.getInstanceFromEnv();
  jobService=ExecutableManager.getInstance(kylinConfig);
  scheduler=DefaultScheduler.createInstance();
  scheduler.init(new JobEngineConfig(kylinConfig),new ZookeeperJobLock());
  if (!scheduler.hasStarted()) {
    throw new RuntimeException("scheduler has not been started");
  }
  cubeManager=CubeManager.getInstance(kylinConfig);
  final CubeInstance cubeInstance=CubeManager.getInstance(kylinConfig).getCube(cubeName);
  final String factTable=cubeInstance.getFactTable();
  final StreamingManager streamingManager=StreamingManager.getInstance(kylinConfig);
  final StreamingConfig streamingConfig=streamingManager.getStreamingConfig(factTable);
  kafkaConfig=KafkaConfigManager.getInstance(kylinConfig).getKafkaConfig(streamingConfig.getName());
  String topicName=UUID.randomUUID().toString();
  String localIp=NetworkUtils.getLocalIp();
  BrokerConfig brokerConfig=kafkaConfig.getKafkaClusterConfigs().get(0).getBrokerConfigs().get(0);
  brokerConfig.setHost(localIp);
  kafkaConfig.setTopic(topicName);
  KafkaConfigManager.getInstance(kylinConfig).saveKafkaConfig(kafkaConfig);
  startEmbeddedKafka(topicName,brokerConfig);
}
