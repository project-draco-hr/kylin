{
  ArrayBlockingQueue<List<String>> queue=new ArrayBlockingQueue<List<String>>(1000);
  ExecutorService executorService=Executors.newSingleThreadExecutor();
  long randSeed=System.currentTimeMillis();
  IJoinedFlatTableDesc flatDesc=EngineFactory.getJoinedFlatTableDesc(cube.getDescriptor());
  DoggedCubeBuilder doggedBuilder=new DoggedCubeBuilder(cube.getDescriptor(),flatDesc,dictionaryMap);
  doggedBuilder.setConcurrentThreads(THREADS);
  doggedBuilder.setSplitRowThreshold(SPLIT_ROWS);
  FileRecordWriter doggedResult=new FileRecordWriter();
{
    Future<?> future=executorService.submit(doggedBuilder.buildAsRunnable(queue,doggedResult));
    ITInMemCubeBuilderTest.feedData(cube,flatTable,queue,INPUT_ROWS,randSeed);
    future.get();
    doggedResult.close();
  }
  InMemCubeBuilder inmemBuilder=new InMemCubeBuilder(cube.getDescriptor(),flatDesc,dictionaryMap);
  inmemBuilder.setConcurrentThreads(THREADS);
  FileRecordWriter inmemResult=new FileRecordWriter();
{
    Future<?> future=executorService.submit(inmemBuilder.buildAsRunnable(queue,inmemResult));
    ITInMemCubeBuilderTest.feedData(cube,flatTable,queue,INPUT_ROWS,randSeed);
    future.get();
    inmemResult.close();
  }
  fileCompare(doggedResult.file,inmemResult.file);
  doggedResult.file.delete();
  inmemResult.file.delete();
}
