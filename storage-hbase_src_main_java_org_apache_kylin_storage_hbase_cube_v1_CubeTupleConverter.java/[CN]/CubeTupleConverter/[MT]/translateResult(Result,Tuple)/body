{
  try {
    byte[] rowkey=hbaseRow.getRow();
    rowKeyDecoder.decode(rowkey);
  }
 catch (  IOException ex) {
    throw new RuntimeException("Cannot translate hbase result " + hbaseRow);
  }
  List<String> dimensionValues=rowKeyDecoder.getValues();
  for (int i=0; i < dimensionValues.size(); i++) {
    int tupleIdx=dimensionTupleIdx[i];
    if (tupleIdx >= 0) {
      tuple.setDimensionValue(tupleIdx,dimensionValues.get(i));
    }
  }
  for (  IDerivedColumnFiller filler : derivedColFillers) {
    filler.fillDerivedColumns(dimensionValues,tuple);
  }
  for (int i=0; i < rowValueDecoders.size(); i++) {
    RowValueDecoder rowValueDecoder=rowValueDecoders.get(i);
    rowValueDecoder.decodeAndConvertJavaObj(hbaseRow);
    Object[] measureValues=rowValueDecoder.getValues();
    int[] measureIdx=metricsMeasureIdx[i];
    int[] tupleIdx=metricsTupleIdx[i];
    for (int j=0; j < measureIdx.length; j++) {
      if (measureTypes.get(dimensionValues.size() + j) != null) {
        tuple.setMeasureValue(tupleIdx[j],measureValues[measureIdx[j]]);
      }
    }
  }
  if (advMeasureFillers.isEmpty()) {
    return null;
  }
 else {
    for (int i=0; i < advMeasureFillers.size(); i++) {
      Pair<Integer,Integer> metricLocation=advMeasureIndexInRV.get(i);
      Object measureValue=rowValueDecoders.get(metricLocation.getFirst()).getValues()[metricLocation.getSecond()];
      advMeasureFillers.get(i).reload(measureValue);
    }
    return advMeasureFillers;
  }
}
