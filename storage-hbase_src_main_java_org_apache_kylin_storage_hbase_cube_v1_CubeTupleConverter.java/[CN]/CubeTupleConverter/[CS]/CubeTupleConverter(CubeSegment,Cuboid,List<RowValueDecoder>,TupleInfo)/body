{
  this.cubeSeg=cubeSeg;
  this.cuboid=cuboid;
  this.tupleInfo=tupleInfo;
  this.rowKeyDecoder=new RowKeyDecoder(this.cubeSeg);
  this.rowValueDecoders=rowValueDecoders;
  this.derivedColFillers=Lists.newArrayList();
  List<TblColRef> dimCols=cuboid.getColumns();
  measureTypes=Lists.newArrayList();
  advMeasureFillers=Lists.newArrayListWithCapacity(1);
  advMeasureIndexInRV=Lists.newArrayListWithCapacity(1);
  dimensionTupleIdx=new int[dimCols.size()];
  for (int i=0; i < dimCols.size(); i++) {
    TblColRef col=dimCols.get(i);
    dimensionTupleIdx[i]=tupleInfo.hasColumn(col) ? tupleInfo.getColumnIndex(col) : -1;
    measureTypes.add(null);
  }
  metricsMeasureIdx=new int[rowValueDecoders.size()][];
  metricsTupleIdx=new int[rowValueDecoders.size()][];
  for (int i=0; i < rowValueDecoders.size(); i++) {
    RowValueDecoder decoder=rowValueDecoders.get(i);
    MeasureDesc[] measures=decoder.getMeasures();
    BitSet selectedMeasures=decoder.getProjectionIndex();
    metricsMeasureIdx[i]=new int[selectedMeasures.cardinality()];
    metricsTupleIdx[i]=new int[selectedMeasures.cardinality()];
    for (int j=0, mi=selectedMeasures.nextSetBit(0); j < metricsMeasureIdx[i].length; j++, mi=selectedMeasures.nextSetBit(mi + 1)) {
      FunctionDesc aggrFunc=measures[mi].getFunction();
      int tupleIdx;
      if (aggrFunc.needRewrite()) {
        String rewriteFieldName=aggrFunc.getRewriteFieldName();
        tupleIdx=tupleInfo.hasField(rewriteFieldName) ? tupleInfo.getFieldIndex(rewriteFieldName) : -1;
      }
 else {
        TblColRef col=aggrFunc.getParameter().getColRefs().get(0);
        tupleIdx=tupleInfo.hasColumn(col) ? tupleInfo.getColumnIndex(col) : -1;
      }
      metricsMeasureIdx[i][j]=mi;
      metricsTupleIdx[i][j]=tupleIdx;
      MeasureType<?> measureType=aggrFunc.getMeasureType();
      if (measureType.needAdvancedTupleFilling()) {
        Map<TblColRef,Dictionary<String>> dictionaryMap=buildDictionaryMap(measureType.getColumnsNeedDictionary(aggrFunc));
        advMeasureFillers.add(measureType.getAdvancedTupleFiller(aggrFunc,tupleInfo,dictionaryMap));
        advMeasureIndexInRV.add(Pair.newPair(i,mi));
        measureTypes.add(null);
      }
 else {
        measureTypes.add(measureType);
      }
    }
  }
  Map<Array<TblColRef>,List<DeriveInfo>> hostToDerivedInfo=cuboid.getCubeDesc().getHostToDerivedInfo(dimCols,null);
  for (  Entry<Array<TblColRef>,List<DeriveInfo>> entry : hostToDerivedInfo.entrySet()) {
    TblColRef[] hostCols=entry.getKey().data;
    for (    DeriveInfo deriveInfo : entry.getValue()) {
      IDerivedColumnFiller filler=newDerivedColumnFiller(hostCols,deriveInfo);
      if (filler != null) {
        derivedColFillers.add(filler);
      }
    }
  }
}
