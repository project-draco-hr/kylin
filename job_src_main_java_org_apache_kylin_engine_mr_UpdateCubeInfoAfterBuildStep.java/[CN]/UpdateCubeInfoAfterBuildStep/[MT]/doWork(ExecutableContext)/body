{
  final CubeManager cubeManager=CubeManager.getInstance(context.getConfig());
  final CubeInstance cube=cubeManager.getCube(getCubeName());
  final CubeSegment segment=cube.getSegmentById(getSegmentId());
  CubingJob cubingJob=(CubingJob)executableManager.getJob(getCubingJobId());
  long sourceCount=cubingJob.findSourceRecordCount();
  long sourceSizeBytes=cubingJob.findSourceSizeBytes();
  long cubeSizeBytes=cubingJob.findCubeSizeBytes();
  boolean segmentReady=cubeSizeBytes > 0;
  segment.setLastBuildJobID(getCubingJobId());
  segment.setLastBuildTime(System.currentTimeMillis());
  segment.setSizeKB(cubeSizeBytes / 1024);
  segment.setInputRecords(sourceCount);
  segment.setInputRecordsSize(sourceSizeBytes);
  try {
    if (segmentReady) {
      cubeManager.promoteNewlyBuiltSegments(cube,segment);
    }
 else {
      CubeBuilder cubeBuilder=new CubeBuilder(cube);
      cubeBuilder.setToUpdateSegs(segment);
      cubeManager.updateCube(cubeBuilder);
    }
    return new ExecuteResult(ExecuteResult.State.SUCCEED,"succeed");
  }
 catch (  IOException e) {
    logger.error("fail to update cube after build",e);
    return new ExecuteResult(ExecuteResult.State.ERROR,e.getLocalizedMessage());
  }
}
