{
  byte[] coprocessorEnableBytes=scan.getAttribute(COPROCESSOR_ENABLE);
  if (coprocessorEnableBytes == null || coprocessorEnableBytes.length == 0 || coprocessorEnableBytes[0] == 0) {
    return innerScanner;
  }
  byte[] typeBytes=scan.getAttribute(TYPE);
  CoprocessorRowType type=CoprocessorRowType.deserialize(typeBytes);
  byte[] projectorBytes=scan.getAttribute(PROJECTOR);
  CoprocessorProjector projector=CoprocessorProjector.deserialize(projectorBytes);
  byte[] aggregatorBytes=scan.getAttribute(AGGREGATORS);
  ObserverAggregators aggregators=ObserverAggregators.deserialize(aggregatorBytes);
  byte[] filterBytes=scan.getAttribute(FILTER);
  CoprocessorFilter filter=CoprocessorFilter.deserialize(filterBytes);
  ObserverBehavior observerBehavior=ObserverBehavior.SCAN_FILTER_AGGR_CHECKMEM;
  try {
    byte[] behavior=scan.getAttribute(BEHAVIOR);
    if (behavior != null && behavior.length != 0) {
      observerBehavior=ObserverBehavior.valueOf(new String(behavior));
    }
  }
 catch (  Exception e) {
    LOG.error("failed to parse behavior,using default behavior SCAN_FILTER_AGGR_CHECKMEM",e);
    observerBehavior=ObserverBehavior.SCAN_FILTER_AGGR_CHECKMEM;
  }
  HRegion region=ctxt.getEnvironment().getRegion();
  region.startRegionOperation();
  try {
synchronized (innerScanner) {
      return new AggregationScanner(type,filter,projector,aggregators,innerScanner,observerBehavior);
    }
  }
  finally {
    region.closeRegionOperation();
  }
}
