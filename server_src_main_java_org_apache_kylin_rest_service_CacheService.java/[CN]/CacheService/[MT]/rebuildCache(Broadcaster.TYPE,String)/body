{
  final String log="rebuild cache type: " + cacheType + " name:"+ cacheKey;
  logger.info(log);
  try {
switch (cacheType) {
case CUBE:
      rebuildCubeCache(cacheKey);
    break;
case STREAMING:
  getStreamingManager().reloadStreamingConfigLocal(cacheKey);
break;
case KAFKA:
getKafkaManager().reloadKafkaConfigLocal(cacheKey);
break;
case CUBE_DESC:
getCubeDescManager().reloadCubeDescLocal(cacheKey);
break;
case PROJECT:
reloadProjectCache(cacheKey);
break;
case INVERTED_INDEX:
getIIManager().reloadIILocal(cacheKey);
getHybridManager().reloadHybridInstanceByChild(RealizationType.INVERTED_INDEX,cacheKey);
getProjectManager().clearL2Cache();
break;
case INVERTED_INDEX_DESC:
getIIDescManager().reloadIIDescLocal(cacheKey);
break;
case TABLE:
getMetadataManager().reloadTableCache(cacheKey);
IIDescManager.clearCache();
CubeDescManager.clearCache();
break;
case DATA_MODEL:
getMetadataManager().reloadDataModelDesc(cacheKey);
IIDescManager.clearCache();
CubeDescManager.clearCache();
break;
case ALL:
DictionaryManager.clearCache();
MetadataManager.clearCache();
CubeDescManager.clearCache();
CubeManager.clearCache();
IIDescManager.clearCache();
IIManager.clearCache();
HybridManager.clearCache();
RealizationRegistry.clearCache();
ProjectManager.clearCache();
KafkaConfigManager.clearCache();
StreamingManager.clearCache();
HBaseConnection.clearConnCache();
cleanAllDataCache();
removeAllOLAPDataSources();
break;
default :
throw new RuntimeException("invalid cacheType:" + cacheType);
}
}
 catch (IOException e) {
throw new RuntimeException("error " + log,e);
}
}
