{
  final String log="rebuild cache type: " + cacheType + " name:"+ cacheKey;
  try {
switch (cacheType) {
case CUBE:
      getCubeManager().loadCubeCache(cacheKey);
    cubeService.updateOnNewSegmentReady(cacheKey);
  getHybridManager().reloadHybridInstanceByChild(RealizationType.CUBE,cacheKey);
cleanProjectCacheByRealization(RealizationType.CUBE,cacheKey);
break;
case CUBE_DESC:
String modelName=getCubeDescManager().getCubeDesc(cacheKey).getModelName();
getMetadataManager().reloadDataModelDesc(modelName);
getCubeDescManager().reloadCubeDesc(cacheKey);
IIDescManager.clearCache();
CubeDescManager.clearCache();
break;
case PROJECT:
getProjectManager().reloadProject(cacheKey);
break;
case INVERTED_INDEX:
getIIManager().loadIICache(cacheKey);
getHybridManager().reloadHybridInstanceByChild(RealizationType.INVERTED_INDEX,cacheKey);
cleanProjectCacheByRealization(RealizationType.INVERTED_INDEX,cacheKey);
break;
case INVERTED_INDEX_DESC:
getIIDescManager().reloadIIDesc(cacheKey);
break;
case TABLE:
getMetadataManager().reloadTableCache(cacheKey);
IIDescManager.clearCache();
CubeDescManager.clearCache();
break;
case DATA_MODEL:
break;
case ALL:
MetadataManager.clearCache();
CubeDescManager.clearCache();
CubeManager.clearCache();
IIDescManager.clearCache();
IIManager.clearCache();
HybridManager.clearCache();
RealizationRegistry.clearCache();
ProjectManager.clearCache();
BasicService.resetOLAPDataSources();
break;
default :
throw new RuntimeException("invalid cacheType:" + cacheType);
}
}
 catch (IOException e) {
throw new RuntimeException("error " + log,e);
}
}
