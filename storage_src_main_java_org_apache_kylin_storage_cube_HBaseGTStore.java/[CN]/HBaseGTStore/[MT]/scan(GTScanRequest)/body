{
  return new IGTStoreScanner(){
    @Override public boolean hasNext(){
      return cellListIterator.hasNext();
    }
    @Override public GTRowBlock next(){
      List<Cell> oneRow=cellListIterator.next();
      if (oneRow.size() < 1) {
        throw new IllegalStateException("cell list's size less than 1");
      }
      Cell firstCell=oneRow.get(0);
      byte[] rowkey=firstCell.getRowArray();
      oneBlock.getPrimaryKey().set(rowkey,RowConstants.ROWKEY_CUBOIDID_LEN + firstCell.getRowOffset(),firstCell.getRowLength() - RowConstants.ROWKEY_CUBOIDID_LEN);
      oneBlock.getCellBlock(0).set(rowkey,RowConstants.ROWKEY_CUBOIDID_LEN + firstCell.getRowOffset(),firstCell.getRowLength() - RowConstants.ROWKEY_CUBOIDID_LEN);
      int hbaseColIdx=0;
      for (int i=1; i < selectedColBlocks.trueBitCount(); i++) {
        int colBlockIdx=selectedColBlocks.trueBitAt(i);
        Pair<byte[],byte[]> hbaseColumn=hbaseColumns.get(hbaseColIdx++);
        Cell cell=CubeHBaseRPC.findCell(oneRow,hbaseColumn.getFirst(),hbaseColumn.getSecond());
        oneBlock.getCellBlock(colBlockIdx).set(cell.getValueArray(),cell.getValueOffset(),cell.getValueLength());
      }
      return oneBlock;
    }
    @Override public void remove(){
      throw new UnsupportedOperationException();
    }
    @Override public void close() throws IOException {
      cellListIterator.close();
    }
  }
;
}
