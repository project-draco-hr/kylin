{
  final List<CubingJob> cubingJobs=listAllCubingJobs(cube.getName(),null,EnumSet.of(ExecutableState.READY,ExecutableState.RUNNING));
  if (!cubingJobs.isEmpty()) {
    throw new JobException("Cube schema shouldn't be changed with running job.");
  }
  try {
    if (!cube.getDescriptor().consistentWith(desc)) {
      throw new IllegalStateException("cube's desc is not consistent with the new desc");
    }
    CubeDesc updatedCubeDesc=getCubeDescManager().updateCubeDesc(desc);
    int cuboidCount=CuboidCLI.simulateCuboidGeneration(updatedCubeDesc,false);
    logger.info("Updated cube " + cube.getName() + " has "+ cuboidCount+ " cuboids");
    ProjectManager projectManager=getProjectManager();
    if (!isCubeInProject(newProjectName,cube)) {
      String owner=SecurityContextHolder.getContext().getAuthentication().getName();
      ProjectInstance newProject=projectManager.moveRealizationToProject(RealizationType.CUBE,cube.getName(),newProjectName,owner);
      accessService.inherit(cube,newProject);
    }
    return updatedCubeDesc;
  }
 catch (  IOException e) {
    throw new InternalErrorException("Failed to deal with the request.",e);
  }
}
