{
  super.setup(context);
  intermediateTableDesc=new CubeJoinedFlatTableDesc(cubeDesc,null);
  collectStatistics=Boolean.parseBoolean(context.getConfiguration().get(BatchConstants.CFG_STATISTICS_ENABLED));
  if (collectStatistics) {
    SAMPING_PERCENTAGE=Integer.parseInt(context.getConfiguration().get(BatchConstants.CFG_STATISTICS_SAMPLING_PERCENT,"5"));
    cuboidScheduler=new CuboidScheduler(cubeDesc);
    nRowKey=cubeDesc.getRowkey().getRowKeyColumns().length;
    List<Long> cuboidIdList=Lists.newArrayList();
    List<Integer[]> allCuboidsBitSetList=Lists.newArrayList();
    addCuboidBitSet(baseCuboidId,allCuboidsBitSetList,cuboidIdList);
    allCuboidsBitSet=allCuboidsBitSetList.toArray(new Integer[cuboidIdList.size()][]);
    cuboidIds=cuboidIdList.toArray(new Long[cuboidIdList.size()]);
    allCuboidsHLL=new HyperLogLogPlusCounter[cuboidIds.length];
    for (int i=0; i < cuboidIds.length; i++) {
      allCuboidsHLL[i]=new HyperLogLogPlusCounter(14);
    }
    hf=Hashing.murmur3_32();
    row_hashcodes=new ByteArray[nRowKey];
    for (int i=0; i < nRowKey; i++) {
      row_hashcodes[i]=new ByteArray();
    }
  }
}
