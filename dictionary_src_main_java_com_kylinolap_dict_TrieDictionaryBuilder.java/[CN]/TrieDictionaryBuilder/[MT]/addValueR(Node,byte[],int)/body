{
  int i=0, j=start;
  int n=node.part.length, nn=value.length;
  int comp=0;
  for (; i < n && j < nn; i++, j++) {
    comp=compareByteUnsigned(node.part[i],value[j]);
    if (comp != 0)     break;
  }
  if (j == nn) {
    if (i == n) {
      node.isEndOfValue=true;
    }
 else {
      Node c=new Node(subarray(node.part,i,n),node.isEndOfValue,node.children);
      node.reset(subarray(node.part,0,i),true);
      node.children.add(c);
    }
    return;
  }
  if (i < n) {
    Node c1=new Node(subarray(node.part,i,n),node.isEndOfValue,node.children);
    Node c2=new Node(subarray(value,j,nn),true);
    node.reset(subarray(node.part,0,i),false);
    if (comp < 0) {
      node.children.add(c1);
      node.children.add(c2);
    }
 else {
      node.children.add(c2);
      node.children.add(c1);
    }
    return;
  }
  byte lookfor=value[j];
  int lo=0;
  int hi=node.children.size() - 1;
  int mid=0;
  boolean found=false;
  comp=0;
  while (!found && lo <= hi) {
    mid=lo + (hi - lo) / 2;
    comp=compareByteUnsigned(lookfor,node.children.get(mid).part[0]);
    if (comp < 0)     hi=mid - 1;
 else     if (comp > 0)     lo=mid + 1;
 else     found=true;
  }
  if (found) {
    addValueR(node.children.get(mid),value,j);
  }
 else {
    Node c=new Node(subarray(value,j,nn),true);
    node.children.add(comp <= 0 ? mid : mid + 1,c);
  }
}
