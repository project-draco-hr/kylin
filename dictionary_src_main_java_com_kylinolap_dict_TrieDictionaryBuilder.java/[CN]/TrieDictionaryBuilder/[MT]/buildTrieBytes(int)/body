{
  checkOverflowParts(this.root);
  Stats stats=stats();
  int sizeNoValuesBeneath=stats.mbpn_sizeNoValueBeneath;
  int sizeChildOffset=stats.mbpn_sizeChildOffset;
  byte[] head;
  try {
    ByteArrayOutputStream byteBuf=new ByteArrayOutputStream();
    DataOutputStream headOut=new DataOutputStream(byteBuf);
    headOut.write(HEAD_MAGIC);
    headOut.writeShort(0);
    headOut.writeInt(stats.mbpn_footprint);
    headOut.write(sizeChildOffset);
    headOut.write(sizeNoValuesBeneath);
    headOut.writeShort(baseId);
    headOut.writeShort(stats.maxValueLength);
    headOut.writeUTF(bytesConverter == null ? "" : bytesConverter.getClass().getName());
    headOut.close();
    head=byteBuf.toByteArray();
    BytesUtil.writeUnsigned(head.length,head,HEAD_SIZE_I,2);
  }
 catch (  IOException e) {
    throw new RuntimeException(e);
  }
  byte[] trieBytes=new byte[stats.mbpn_footprint + head.length];
  System.arraycopy(head,0,trieBytes,0,head.length);
  LinkedList<Node> open=new LinkedList<Node>();
  IdentityHashMap<Node,Integer> offsetMap=new IdentityHashMap<Node,Integer>();
  int o=head.length;
  offsetMap.put(root,o);
  o=build_writeNode(root,o,true,sizeNoValuesBeneath,sizeChildOffset,trieBytes);
  if (root.children.isEmpty() == false)   open.addLast(root);
  while (open.isEmpty() == false) {
    Node parent=open.removeFirst();
    build_overwriteChildOffset(offsetMap.get(parent),o - head.length,sizeChildOffset,trieBytes);
    for (int i=0; i < parent.children.size(); i++) {
      Node c=parent.children.get(i);
      boolean isLastChild=(i == parent.children.size() - 1);
      offsetMap.put(c,o);
      o=build_writeNode(c,o,isLastChild,sizeNoValuesBeneath,sizeChildOffset,trieBytes);
      if (c.children.isEmpty() == false)       open.addLast(c);
    }
  }
  if (o != trieBytes.length)   throw new RuntimeException();
  return trieBytes;
}
