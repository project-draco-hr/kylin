{
  Options options=new Options();
  try {
    options.addOption(OPTION_INPUT_PATH);
    options.addOption(OPTION_OUTPUT_PATH);
    options.addOption(OPTION_JOB_NAME);
    options.addOption(OPTION_CUBE_NAME);
    parseOptions(options,args);
    String jobName=getOptionValue(OPTION_JOB_NAME);
    job=Job.getInstance(getConf(),jobName);
    setJobClasspath(job);
    addInputDirs(getOptionValue(OPTION_INPUT_PATH),job);
    Path output=new Path(getOptionValue(OPTION_OUTPUT_PATH));
    FileOutputFormat.setOutputPath(job,output);
    job.setInputFormatClass(SequenceFileInputFormat.class);
    job.setMapperClass(RangeKeyDistributionMapper.class);
    job.setMapOutputKeyClass(Text.class);
    job.setMapOutputValueClass(LongWritable.class);
    job.setReducerClass(RangeKeyDistributionReducer.class);
    job.setOutputFormatClass(SequenceFileOutputFormat.class);
    job.setOutputKeyClass(Text.class);
    job.setOutputValueClass(LongWritable.class);
    job.setNumReduceTasks(1);
    this.deletePath(job.getConfiguration(),output);
    String cubeName=getOptionValue(OPTION_CUBE_NAME).toUpperCase();
    CubeManager cubeMgr=CubeManager.getInstance(KylinConfig.getInstanceFromEnv());
    CubeInstance cube=cubeMgr.getCube(cubeName);
    KylinConfig config=cube.getConfig();
    int hfileSizeGB=config.getHBaseHFileSizeGB();
    DataModelDesc.RealizationCapacity cubeCapacity=cube.getDescriptor().getModel().getCapacity();
    int regionSplitSize=config.getHBaseRegionCut(cubeCapacity.toString());
    int maxRegionCount=config.getHBaseRegionCountMax();
    int minRegionCount=config.getHBaseRegionCountMin();
    job.getConfiguration().set(BatchConstants.CFG_OUTPUT_PATH,output.toString());
    job.getConfiguration().set(BatchConstants.CFG_HFILE_SIZE_GB,String.valueOf(hfileSizeGB));
    job.getConfiguration().set(BatchConstants.CFG_REGION_SPLIT_SIZE,String.valueOf(regionSplitSize));
    job.getConfiguration().set(BatchConstants.CFG_REGION_NUMBER_MAX,String.valueOf(maxRegionCount));
    job.getConfiguration().set(BatchConstants.CFG_REGION_NUMBER_MIN,String.valueOf(minRegionCount));
    TableMapReduceUtil.addDependencyJars(job.getConfiguration(),ImmutableBytesWritable.class,NullWritable.class);
    if (System.getProperty("useSandbox") != null && System.getProperty("useSandbox").equals("true")) {
      job.getConfiguration().setBoolean("useSandbox",true);
    }
    return waitForCompletion(job);
  }
 catch (  Exception e) {
    printUsage(options);
    throw e;
  }
}
