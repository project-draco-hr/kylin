{
  String sql=sqlRequest.getSql();
  String project=sqlRequest.getProject();
  logger.info("Using project: " + project);
  logger.info("The original query:  " + sql);
  String serverMode=KylinConfig.getInstanceFromEnv().getServerMode();
  if (!(Constant.SERVER_MODE_QUERY.equals(serverMode.toLowerCase()) || Constant.SERVER_MODE_ALL.equals(serverMode.toLowerCase()))) {
    throw new InternalErrorException("Query is not allowed in " + serverMode + " mode.");
  }
  try {
    if (sql.toLowerCase().contains("select")) {
      SQLResponse sqlResponse=null;
      Cache exceptionCache=cacheManager.getCache(EXCEPTION_QUERY_CACHE);
      Cache queryCache=cacheManager.getCache(SUCCESS_QUERY_CACHE);
      if (KylinConfig.getInstanceFromEnv().isQueryCacheEnabled()) {
        if (null != exceptionCache.get(sqlRequest)) {
          Element element=exceptionCache.get(sqlRequest);
          SQLResponse scanExceptionRes=(SQLResponse)element.getObjectValue();
          scanExceptionRes.setHitCache(true);
          return scanExceptionRes;
        }
        if (null != queryCache.get(sqlRequest)) {
          Element element=queryCache.get(sqlRequest);
          SQLResponse cachedRes=(SQLResponse)element.getObjectValue();
          cachedRes.setHitCache(true);
          return cachedRes;
        }
      }
      sqlResponse=queryService.query(sqlRequest);
      long durationThreshold=KylinConfig.getInstanceFromEnv().getQueryDurationCacheThreshold();
      long scancountThreshold=KylinConfig.getInstanceFromEnv().getQueryScanCountCacheThreshold();
      if (!sqlResponse.getIsException() && (sqlResponse.getDuration() > durationThreshold || sqlResponse.getTotalScanCount() > scancountThreshold)) {
        queryCache.put(new Element(sqlRequest,sqlResponse));
      }
      if (!sqlResponse.getIsException() && KylinConfig.getInstanceFromEnv().isQuerySecureEnabled()) {
        CubeInstance cubeInstance=this.queryService.getCubeManager().getCube(sqlResponse.getCube());
        queryService.checkAuthorization(cubeInstance);
      }
      return sqlResponse;
    }
 else {
      logger.debug("Directly return expection as not supported");
      return new SQLResponse(null,null,0,true,"Not Supported SQL.");
    }
  }
 catch (  Exception e) {
    SQLResponse exceptionRes=new SQLResponse(null,null,0,true,e.getMessage());
    Cache exceptionCache=cacheManager.getCache(EXCEPTION_QUERY_CACHE);
    exceptionCache.put(new Element(sqlRequest,exceptionRes));
    logger.error("Exception when execute sql",e);
    return new SQLResponse(null,null,0,true,e.getMessage());
  }
}
