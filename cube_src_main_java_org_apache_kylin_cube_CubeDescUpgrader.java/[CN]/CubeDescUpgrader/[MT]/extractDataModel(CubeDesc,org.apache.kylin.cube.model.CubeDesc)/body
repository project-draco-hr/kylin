{
  DataModelDesc dm=new DataModelDesc();
  dm.setUuid(UUID.randomUUID().toString());
  String factTable=oldModel.getFactTable();
  dm.setName(oldModel.getName());
  dm.setFactTable(getMetadataManager().appendDBName(factTable));
  newModel.setModelName(dm.getName());
  List<org.apache.kylin.cube.model.v1.DimensionDesc> oldDimensions=oldModel.getDimensions();
  List<LookupDesc> lookups=Lists.newArrayList();
  List<String> lookupTables=Lists.newArrayList();
  for (  org.apache.kylin.cube.model.v1.DimensionDesc dim : oldDimensions) {
    JoinDesc join=dim.getJoin();
    if (join != null && !StringUtils.isEmpty(join.getType()) && join.getForeignKey() != null && join.getForeignKey().length > 0) {
      String table=dim.getTable();
      table=getMetadataManager().appendDBName(table);
      if (lookupTables.contains(table)) {
        continue;
      }
      LookupDesc lookup=new LookupDesc();
      lookup.setJoin(join);
      lookup.setTable(table);
      lookupTables.add(table);
      lookups.add(lookup);
    }
  }
  dm.setLookups(lookups.toArray(new LookupDesc[lookups.size()]));
  dm.setFilterCondition(oldModel.getFilterCondition());
  updatePartitionDesc(oldModel,dm);
  if (oldModel.getCapacity() == CubeDesc.CubeCapacity.SMALL) {
    dm.setCapacity(DataModelDesc.RealizationCapacity.SMALL);
  }
 else   if (oldModel.getCapacity() == CubeDesc.CubeCapacity.MEDIUM) {
    dm.setCapacity(DataModelDesc.RealizationCapacity.MEDIUM);
  }
 else   if (oldModel.getCapacity() == CubeDesc.CubeCapacity.LARGE) {
    dm.setCapacity(DataModelDesc.RealizationCapacity.LARGE);
  }
  return dm;
}
