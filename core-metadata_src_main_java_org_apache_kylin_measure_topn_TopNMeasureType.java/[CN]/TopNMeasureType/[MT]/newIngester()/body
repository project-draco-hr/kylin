{
  return new MeasureIngester<TopNCounter>(){
    @Override public TopNCounter valueOf(    String[] values,    MeasureDesc measureDesc,    Map<TblColRef,Dictionary<String>> dictionaryMap){
      if (values.length != 2)       throw new IllegalArgumentException();
      double counter=values[0] == null ? 0 : Double.parseDouble(values[0]);
      String literal=values[1];
      TblColRef literalCol=measureDesc.getFunction().getTopNLiteralColumn();
      Dictionary<String> dictionary=dictionaryMap.get(literalCol);
      int keyEncodedValue=dictionary.getIdFromValue(literal);
      ByteArray key=new ByteArray(dictionary.getSizeOfId());
      BytesUtil.writeUnsigned(keyEncodedValue,key.array(),0,dictionary.getSizeOfId());
      TopNCounter<ByteArray> topNCounter=new TopNCounter<ByteArray>(dataType.getPrecision() * TopNCounter.EXTRA_SPACE_RATE);
      topNCounter.offer(key,counter);
      return topNCounter;
    }
  }
;
}
