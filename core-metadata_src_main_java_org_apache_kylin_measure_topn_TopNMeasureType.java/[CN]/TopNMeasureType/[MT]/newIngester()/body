{
  return new MeasureIngester<TopNCounter<ByteArray>>(){
    private DimensionEncoding[] dimensionEncodings=null;
    private List<TblColRef> literalCols=null;
    private int keyLength=0;
    private DimensionEncoding[] newDimensionEncodings=null;
    private int newKeyLength=0;
    private boolean needReEncode=true;
    @Override public TopNCounter<ByteArray> valueOf(    String[] values,    MeasureDesc measureDesc,    Map<TblColRef,Dictionary<String>> dictionaryMap){
      double counter=values[0] == null ? 0 : Double.parseDouble(values[0]);
      if (dimensionEncodings == null) {
        literalCols=getTopNLiteralColumn(measureDesc.getFunction());
        dimensionEncodings=getDimensionEncodings(measureDesc.getFunction(),literalCols,dictionaryMap);
        for (        DimensionEncoding encoding : dimensionEncodings) {
          keyLength+=encoding.getLengthOfEncoding();
        }
        if (values.length != (literalCols.size() + 1)) {
          throw new IllegalArgumentException();
        }
      }
      final ByteArray key=new ByteArray(keyLength);
      int offset=0;
      for (int i=0; i < dimensionEncodings.length; i++) {
        byte[] valueBytes=Bytes.toBytes(values[i + 1]);
        dimensionEncodings[i].encode(valueBytes,valueBytes.length,key.array(),offset);
        offset+=dimensionEncodings[i].getLengthOfEncoding();
      }
      TopNCounter<ByteArray> topNCounter=new TopNCounter<ByteArray>(dataType.getPrecision() * TopNCounter.EXTRA_SPACE_RATE);
      topNCounter.offer(key,counter);
      return topNCounter;
    }
    @Override public TopNCounter<ByteArray> reEncodeDictionary(    TopNCounter<ByteArray> value,    MeasureDesc measureDesc,    Map<TblColRef,Dictionary<String>> oldDicts,    Map<TblColRef,Dictionary<String>> newDicts){
      TopNCounter<ByteArray> topNCounter=value;
      if (newDimensionEncodings == null) {
        literalCols=getTopNLiteralColumn(measureDesc.getFunction());
        dimensionEncodings=getDimensionEncodings(measureDesc.getFunction(),literalCols,oldDicts);
        keyLength=0;
        boolean hasDictEncoding=false;
        for (        DimensionEncoding encoding : dimensionEncodings) {
          keyLength+=encoding.getLengthOfEncoding();
          if (encoding instanceof DictionaryDimEnc) {
            hasDictEncoding=true;
          }
        }
        newDimensionEncodings=getDimensionEncodings(measureDesc.getFunction(),literalCols,newDicts);
        newKeyLength=0;
        for (        DimensionEncoding encoding : newDimensionEncodings) {
          newKeyLength+=encoding.getLengthOfEncoding();
        }
        needReEncode=hasDictEncoding;
      }
      if (needReEncode == false) {
        return topNCounter;
      }
      int topNSize=topNCounter.size();
      byte[] newIdBuf=new byte[topNSize * newKeyLength];
      int bufOffset=0;
      for (      Counter<ByteArray> c : topNCounter) {
        int offset=c.getItem().offset();
        int innerBuffOffset=0;
        for (int i=0; i < dimensionEncodings.length; i++) {
          String dimValue=dimensionEncodings[i].decode(c.getItem().array(),offset,dimensionEncodings[i].getLengthOfEncoding());
          byte[] dimValueBytes=Bytes.toBytes(dimValue);
          newDimensionEncodings[i].encode(dimValueBytes,dimValueBytes.length,newIdBuf,bufOffset + innerBuffOffset);
          innerBuffOffset+=newDimensionEncodings[i].getLengthOfEncoding();
          offset+=dimensionEncodings[i].getLengthOfEncoding();
        }
        c.getItem().set(newIdBuf,bufOffset,newKeyLength);
        bufOffset+=newKeyLength;
      }
      return topNCounter;
    }
  }
;
}
