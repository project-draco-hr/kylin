{
  final TblColRef literalCol=getTopNLiteralColumn(function);
  final TblColRef numericCol=getTopNNumericColumn(function);
  final Dictionary<String> topNColDict=dictionaryMap.get(literalCol);
  final int literalTupleIdx=tupleInfo.hasColumn(literalCol) ? tupleInfo.getColumnIndex(literalCol) : -1;
  final int numericTupleIdx=tupleInfo.hasColumn(numericCol) ? tupleInfo.getColumnIndex(numericCol) : -1;
  final DataType numericField=DataType.getType(tupleInfo.getDataTypeName(numericTupleIdx));
  final boolean isIntFamily=numericField.isIntegerFamily();
  return new IAdvMeasureFiller(){
    private TopNCounter<ByteArray> topNCounter;
    private Iterator<Counter<ByteArray>> topNCounterIterator;
    private int expectRow=0;
    @SuppressWarnings("unchecked") @Override public void reload(    Object measureValue){
      this.topNCounter=(TopNCounter<ByteArray>)measureValue;
      this.topNCounterIterator=topNCounter.iterator();
      this.expectRow=0;
    }
    @Override public int getNumOfRows(){
      return topNCounter.size();
    }
    @Override public void fillTuple(    Tuple tuple,    int row){
      if (expectRow++ != row)       throw new IllegalStateException();
      Counter<ByteArray> counter=topNCounterIterator.next();
      int key=BytesUtil.readUnsigned(counter.getItem().array(),counter.getItem().offset(),counter.getItem().length());
      String colValue=topNColDict.getValueFromId(key);
      tuple.setDimensionValue(literalTupleIdx,colValue);
      tuple.setMeasureValue(numericTupleIdx,isIntFamily ? (long)counter.getCount() : counter.getCount());
    }
  }
;
}
