{
  final List<TblColRef> literalCols=getTopNLiteralColumn(function);
  final TblColRef numericCol=getTopNNumericColumn(function);
  final int[] literalTupleIdx=new int[literalCols.size()];
  final DimensionEncoding[] dimensionEncodings=getDimensionEncodings(function,literalCols,dictionaryMap);
  for (int i=0; i < literalCols.size(); i++) {
    TblColRef colRef=literalCols.get(i);
    literalTupleIdx[i]=tupleInfo.hasColumn(colRef) ? tupleInfo.getColumnIndex(colRef) : -1;
  }
  final int numericTupleIdx=(numericCol != null && tupleInfo.hasColumn(numericCol)) ? tupleInfo.getColumnIndex(numericCol) : -1;
  return new IAdvMeasureFiller(){
    private TopNCounter<ByteArray> topNCounter;
    private Iterator<Counter<ByteArray>> topNCounterIterator;
    private int expectRow=0;
    @SuppressWarnings("unchecked") @Override public void reload(    Object measureValue){
      this.topNCounter=(TopNCounter<ByteArray>)measureValue;
      this.topNCounterIterator=topNCounter.iterator();
      this.expectRow=0;
    }
    @Override public int getNumOfRows(){
      return topNCounter.size();
    }
    @Override public void fillTuple(    Tuple tuple,    int row){
      if (expectRow++ != row)       throw new IllegalStateException();
      Counter<ByteArray> counter=topNCounterIterator.next();
      int offset=counter.getItem().offset();
      for (int i=0; i < dimensionEncodings.length; i++) {
        String colValue=dimensionEncodings[i].decode(counter.getItem().array(),offset,dimensionEncodings[i].getLengthOfEncoding());
        tuple.setDimensionValue(literalTupleIdx[i],colValue);
        offset+=dimensionEncodings[i].getLengthOfEncoding();
      }
      tuple.setMeasureValue(numericTupleIdx,counter.getCount());
    }
  }
;
}
