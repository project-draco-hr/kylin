{
  ShellExecutable step=new ShellExecutable();
  ;
  step.setName(ExecutableConstants.STEP_NAME_MATERIALIZE_HIVE_VIEW_IN_LOOKUP);
  HiveCmdBuilder hiveCmdBuilder=new HiveCmdBuilder();
  KylinConfig kylinConfig=KylinConfig.getInstanceFromEnv();
  CubeManager cubeMgr=CubeManager.getInstance(kylinConfig);
  String cubeName=seg.getRealization().getName();
  CubeDesc cubeDesc=cubeMgr.getCube(cubeName).getDescriptor();
  MetadataManager metadataManager=MetadataManager.getInstance(kylinConfig);
  final Set<TableDesc> lookupViewsTables=Sets.newHashSet();
  for (  LookupDesc lookupDesc : cubeDesc.getModel().getLookups()) {
    TableDesc tableDesc=metadataManager.getTableDesc(lookupDesc.getTable());
    if (TableDesc.TABLE_TYPE_VIRTUAL_VIEW.equalsIgnoreCase(tableDesc.getTableType())) {
      lookupViewsTables.add(tableDesc);
    }
  }
  if (lookupViewsTables.size() == 0) {
    return null;
  }
  final String useDatabaseHql="USE " + conf.getConfig().getHiveDatabaseForIntermediateTable() + ";";
  hiveCmdBuilder.addStatement(useDatabaseHql);
  hiveCmdBuilder.addStatement(JoinedFlatTable.generateHiveSetStatements(conf));
  for (  TableDesc lookUpTableDesc : lookupViewsTables) {
    if (TableDesc.TABLE_TYPE_VIRTUAL_VIEW.equalsIgnoreCase(lookUpTableDesc.getTableType())) {
      StringBuilder createIntermediateTableHql=new StringBuilder();
      createIntermediateTableHql.append("DROP TABLE IF EXISTS " + lookUpTableDesc.getMaterializedName() + ";\n");
      createIntermediateTableHql.append("CREATE TABLE IF NOT EXISTS " + lookUpTableDesc.getMaterializedName() + "\n");
      createIntermediateTableHql.append("LOCATION '" + JobBuilderSupport.getJobWorkingDir(conf,jobId) + "/"+ lookUpTableDesc.getMaterializedName()+ "'\n");
      createIntermediateTableHql.append("AS SELECT * FROM " + lookUpTableDesc.getIdentity() + ";\n");
      hiveCmdBuilder.addStatement(createIntermediateTableHql.toString());
      hiveViewIntermediateTables=hiveViewIntermediateTables + lookUpTableDesc.getMaterializedName() + ";";
    }
  }
  hiveViewIntermediateTables=hiveViewIntermediateTables.substring(0,hiveViewIntermediateTables.length() - 1);
  step.setCmd(hiveCmdBuilder.build());
  return step;
}
