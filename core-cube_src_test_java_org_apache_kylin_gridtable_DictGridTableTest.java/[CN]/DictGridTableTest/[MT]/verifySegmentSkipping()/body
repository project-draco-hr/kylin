{
  ByteArray segmentStart=enc(info,0,"2015-01-14");
  ByteArray segmentStartX=enc(info,0,"2015-01-14 00:00:00");
  ByteArray segmentEnd=enc(info,0,"2015-01-15");
  assertEquals(segmentStart,segmentStartX);
{
    LogicalTupleFilter filter=and(timeComp0,ageComp1);
    CubeScanRangePlanner planner=new CubeScanRangePlanner(info,Pair.newPair(segmentStart,segmentEnd),info.colRef(0),filter);
    List<GTScanRange> r=planner.planScanRanges();
    assertEquals(1,r.size());
    assertEquals("[null, 10]-[1421193600000, 10]",r.get(0).toString());
    assertEquals(1,r.get(0).fuzzyKeys.size());
    assertEquals("[[null, 10, null, null, null]]",r.get(0).fuzzyKeys.toString());
  }
{
    LogicalTupleFilter filter=and(timeComp2,ageComp1);
    CubeScanRangePlanner planner=new CubeScanRangePlanner(info,Pair.newPair(segmentStart,segmentEnd),info.colRef(0),filter);
    List<GTScanRange> r=planner.planScanRanges();
    assertEquals(0,r.size());
  }
{
    LogicalTupleFilter filter=and(timeComp4,ageComp1);
    CubeScanRangePlanner planner=new CubeScanRangePlanner(info,Pair.newPair(segmentStart,segmentEnd),info.colRef(0),filter);
    List<GTScanRange> r=planner.planScanRanges();
    assertEquals(1,r.size());
  }
{
    LogicalTupleFilter filter=and(timeComp5,ageComp1);
    CubeScanRangePlanner planner=new CubeScanRangePlanner(info,Pair.newPair(segmentStart,segmentEnd),info.colRef(0),filter);
    List<GTScanRange> r=planner.planScanRanges();
    assertEquals(0,r.size());
  }
{
    LogicalTupleFilter filter=or(and(timeComp2,ageComp1),and(timeComp1,ageComp1),and(timeComp6,ageComp1));
    CubeScanRangePlanner planner=new CubeScanRangePlanner(info,Pair.newPair(segmentStart,segmentEnd),info.colRef(0),filter);
    List<GTScanRange> r=planner.planScanRanges();
    assertEquals(1,r.size());
    assertEquals("[1421193600000, 10]-[null, 10]",r.get(0).toString());
    assertEquals("[[null, 10, null, null, null], [1421193600000, 10, null, null, null]]",r.get(0).fuzzyKeys.toString());
  }
{
    LogicalTupleFilter filter=or(timeComp2,timeComp1,timeComp6);
    CubeScanRangePlanner planner=new CubeScanRangePlanner(info,Pair.newPair(segmentStart,segmentEnd),info.colRef(0),filter);
    List<GTScanRange> r=planner.planScanRanges();
    assertEquals(1,r.size());
    assertEquals("[1421193600000, null]-[null, null]",r.get(0).toString());
    assertEquals(0,r.get(0).fuzzyKeys.size());
  }
{
    LogicalTupleFilter filter=and(ageComp1,ConstantTupleFilter.FALSE);
    CubeScanRangePlanner planner=new CubeScanRangePlanner(info,Pair.newPair(segmentStart,segmentEnd),info.colRef(0),filter);
    List<GTScanRange> r=planner.planScanRanges();
    assertEquals(0,r.size());
  }
{
    LogicalTupleFilter filter=or(ConstantTupleFilter.TRUE,ConstantTupleFilter.FALSE);
    CubeScanRangePlanner planner=new CubeScanRangePlanner(info,Pair.newPair(segmentStart,segmentEnd),info.colRef(0),filter);
    List<GTScanRange> r=planner.planScanRanges();
    assertEquals(1,r.size());
    assertEquals("[null, null]-[null, null]",r.get(0).toString());
  }
{
    LogicalTupleFilter filter=or(ageComp1,ConstantTupleFilter.TRUE);
    CubeScanRangePlanner planner=new CubeScanRangePlanner(info,Pair.newPair(segmentStart,segmentEnd),info.colRef(0),filter);
    List<GTScanRange> r=planner.planScanRanges();
    assertEquals(1,r.size());
    assertEquals("[null, null]-[null, null]",r.get(0).toString());
  }
}
