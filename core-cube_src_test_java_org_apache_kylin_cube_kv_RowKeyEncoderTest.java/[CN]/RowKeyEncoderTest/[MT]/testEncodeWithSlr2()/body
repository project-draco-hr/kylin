{
  CubeInstance cube=CubeManager.getInstance(getTestConfig()).getCube("TEST_KYLIN_CUBE_WITH_SLR_READY");
  CubeDesc cubeDesc=cube.getDescriptor();
  byte[][] data=new byte[9][];
  data[0]=Bytes.toBytes("123456789");
  data[1]=null;
  data[2]=null;
  data[3]=null;
  data[4]=null;
  data[5]=null;
  data[6]=null;
  data[7]=null;
  data[8]=null;
  long baseCuboidId=Cuboid.getBaseCuboidId(cubeDesc);
  Cuboid baseCuboid=Cuboid.findById(cubeDesc,baseCuboidId);
  RowKeyEncoder rowKeyEncoder=new RowKeyEncoder(cube.getFirstSegment(),baseCuboid);
  byte[] encodedKey=rowKeyEncoder.encode(data);
  assertEquals(40 + rowKeyEncoder.getHeaderLength(),encodedKey.length);
  byte[] shard=Arrays.copyOfRange(encodedKey,0,RowConstants.ROWKEY_SHARDID_LEN);
  byte[] cuboidId=Arrays.copyOfRange(encodedKey,RowConstants.ROWKEY_SHARDID_LEN,rowKeyEncoder.getHeaderLength());
  byte[] sellerId=Arrays.copyOfRange(encodedKey,rowKeyEncoder.getHeaderLength(),18 + rowKeyEncoder.getHeaderLength());
  byte[] rest=Arrays.copyOfRange(encodedKey,18 + rowKeyEncoder.getHeaderLength(),encodedKey.length);
  assertEquals(0,Bytes.toShort(shard));
  assertTrue(Bytes.toString(sellerId).startsWith("123456789"));
  assertEquals(511,Bytes.toLong(cuboidId));
  assertArrayEquals(new byte[]{-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1},rest);
}
