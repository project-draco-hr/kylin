{
  CubeInstance cube=CubeManager.getInstance(getTestConfig()).getCube("TEST_KYLIN_CUBE_WITH_SLR_READY");
  CubeDesc cubeDesc=cube.getDescriptor();
  byte[][] data=new byte[9][];
  data[0]=Bytes.toBytes("123456789");
  data[1]=Bytes.toBytes("2012-12-15");
  data[2]=Bytes.toBytes("11848");
  data[3]=Bytes.toBytes("Health & Beauty");
  data[4]=Bytes.toBytes("Fragrances");
  data[5]=Bytes.toBytes("Women");
  data[6]=Bytes.toBytes("FP-GTC");
  data[7]=Bytes.toBytes("0");
  data[8]=Bytes.toBytes("15");
  long baseCuboidId=Cuboid.getBaseCuboidId(cubeDesc);
  Cuboid baseCuboid=Cuboid.findById(cubeDesc,baseCuboidId);
  AbstractRowKeyEncoder rowKeyEncoder=AbstractRowKeyEncoder.createInstance(cube.getFirstSegment(),baseCuboid);
  byte[] encodedKey=rowKeyEncoder.encode(data);
  assertEquals(40 + RowConstants.ROWKEY_HEADER_LEN,encodedKey.length);
  byte[] shard=Arrays.copyOfRange(encodedKey,0,RowConstants.ROWKEY_SHARDID_LEN);
  byte[] sellerId=Arrays.copyOfRange(encodedKey,RowConstants.ROWKEY_HEADER_LEN,18 + RowConstants.ROWKEY_HEADER_LEN);
  byte[] cuboidId=Arrays.copyOfRange(encodedKey,RowConstants.ROWKEY_SHARDID_LEN,RowConstants.ROWKEY_HEADER_LEN);
  byte[] rest=Arrays.copyOfRange(encodedKey,18 + RowConstants.ROWKEY_HEADER_LEN,encodedKey.length);
  assertEquals(0,Bytes.toShort(shard));
  assertTrue(Bytes.toString(sellerId).startsWith("123456789"));
  assertEquals(511,Bytes.toLong(cuboidId));
  assertArrayEquals(new byte[]{11,55,-13,13,22,34,121,70,80,45,71,84,67,9,9,9,9,9,9,0,10,5},rest);
}
