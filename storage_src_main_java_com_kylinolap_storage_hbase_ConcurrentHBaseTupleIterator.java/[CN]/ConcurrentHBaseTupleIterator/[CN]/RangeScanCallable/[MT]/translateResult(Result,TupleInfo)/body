{
  Tuple tuple=new Tuple(tupleInfo);
  byte[] rowkey=res.getRow();
  rowKeyDecoder.decode(rowkey);
  List<TblColRef> columns=rowKeyDecoder.getColumns();
  List<String> dimensionNames=rowKeyDecoder.getNames(aliasMap);
  List<String> dimensionValues=rowKeyDecoder.getValues();
  for (int i=0; i < dimensionNames.size(); i++) {
    TblColRef column=columns.get(i);
    if (!tuple.hasColumn(column)) {
      continue;
    }
    tuple.setDimensionValue(dimensionNames.get(i),dimensionValues.get(i));
  }
  for (  IDerivedColumnFiller filler : tupleInfo.getDerivedColumnFillers()) {
    filler.fillDerivedColumns(dimensionValues,tuple);
  }
  for (  RowValueDecoder rowValueDecoder : rowValueDecoders) {
    HBaseColumnDesc hbaseColumn=rowValueDecoder.getHBaseColumn();
    String columnFamily=hbaseColumn.getColumnFamilyName();
    String qualifier=hbaseColumn.getQualifier();
    byte[] valueBytes=res.getValue(Bytes.toBytes(columnFamily),Bytes.toBytes(qualifier));
    rowValueDecoder.decode(valueBytes);
    List<String> measureNames=rowValueDecoder.getNames();
    Object[] measureValues=rowValueDecoder.getValues();
    BitSet projectionIndex=rowValueDecoder.getProjectionIndex();
    for (int i=projectionIndex.nextSetBit(0); i >= 0; i=projectionIndex.nextSetBit(i + 1)) {
      tuple.setMeasureValue(measureNames.get(i),measureValues[i]);
    }
  }
  return tuple;
}
