{
  this.errors.clear();
  this.config=config;
  if (this.modelName == null || this.modelName.length() == 0) {
    this.addError("The cubeDesc '" + this.getName() + "' doesn't have data model specified.");
  }
  this.model=MetadataManager.getInstance(config).getDataModelDesc(this.modelName);
  if (this.model == null) {
    this.addError("No data model found with name '" + modelName + "'.");
  }
  Map<String,List<String>> columnTableMap=new HashMap<String,List<String>>();
  String colName;
  for (  TableDesc table : tables.values()) {
    for (    ColumnDesc col : table.getColumns()) {
      colName=col.getName();
      List<String> tableNames=columnTableMap.get(colName);
      if (tableNames == null) {
        tableNames=new ArrayList<String>(3);
        columnTableMap.put(colName,tableNames);
      }
      tableNames.add(table.getIdentity());
    }
  }
  for (  DimensionDesc dim : dimensions) {
    dim.init(this,tables,columnTableMap);
  }
  sortDimAndMeasure();
  initDimensionColumns(tables);
  initMeasureColumns(tables);
  rowkey.init(this);
  if (hbaseMapping != null) {
    hbaseMapping.init(this);
  }
  initMeasureReferenceToColumnFamily();
  if (null != this.cubePartitionDesc) {
    this.cubePartitionDesc.init(columnMap);
  }
  List<TblColRef> dimCols=listDimensionColumnsExcludingDerived();
  if (rowkey.getRowKeyColumns().length != dimCols.size()) {
    addError("RowKey columns count (" + rowkey.getRowKeyColumns().length + ") does not equal to dimension columns count ("+ dimCols.size()+ "). ");
  }
}
