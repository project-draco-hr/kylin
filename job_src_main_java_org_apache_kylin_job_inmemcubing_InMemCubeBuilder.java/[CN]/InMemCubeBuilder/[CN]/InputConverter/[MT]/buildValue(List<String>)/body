{
  Object[] values=new Object[measureCount];
  MeasureDesc measureDesc=null;
  for (int position=0; position < hbaseMeasureRefIndex.length; position++) {
    int i=hbaseMeasureRefIndex[position];
    measureDesc=measureDescs[i];
    Object value=null;
    int[] flatTableIdx=intermediateTableDesc.getMeasureColumnIndexes()[i];
    FunctionDesc function=cubeDesc.getMeasures().get(i).getFunction();
    if (function.isCount() || function.isHolisticCountDistinct()) {
      value=ONE;
    }
 else     if (flatTableIdx == null) {
      value=measureCodec.getSerializer(i).valueOf(measureDesc.getFunction().getParameter().getValue());
    }
 else     if (flatTableIdx.length == 1) {
      value=measureCodec.getSerializer(i).valueOf(Bytes.toBytes(row.get(flatTableIdx[0])));
    }
 else {
      byte[] result=null;
      for (int x=0; x < flatTableIdx.length; x++) {
        byte[] split=Bytes.toBytes(row.get(flatTableIdx[x]));
        if (result == null) {
          result=Arrays.copyOf(split,split.length);
        }
 else {
          byte[] newResult=new byte[result.length + split.length];
          System.arraycopy(result,0,newResult,0,result.length);
          System.arraycopy(split,0,newResult,result.length,split.length);
          result=newResult;
        }
      }
      value=measureCodec.getSerializer(i).valueOf(result);
    }
    values[position]=value;
  }
  return values;
}
