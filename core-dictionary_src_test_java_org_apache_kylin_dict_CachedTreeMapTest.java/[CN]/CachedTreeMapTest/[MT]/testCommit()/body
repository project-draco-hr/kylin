{
  CachedTreeMap map=CachedTreeMap.CachedTreeMapBuilder.newBuilder().baseDir(baseDir).persistent(true).immutable(false).maxSize(2).keyClazz(Key.class).valueClazz(Value.class).build();
  map.put(Key.of(1),Value.of("a"));
  map.put(Key.of(2),Value.of("b"));
  map.put(Key.of(3),Value.of("c"));
  map.put(Key.of(4),Value.of("d"));
  DataOutputStream out=new DataOutputStream(new FileOutputStream(tmpDir + ".index"));
  map.write(out);
  out.flush();
  out.close();
  map.commit(true);
  assertTrue(new File(tmpDir).exists());
  assertFalse(new File(backupDir).exists());
  DataInputStream in=new DataInputStream(new FileInputStream(baseDir + ".index"));
  CachedTreeMap map2=CachedTreeMap.CachedTreeMapBuilder.newBuilder().baseDir(baseDir).persistent(true).immutable(true).maxSize(2).keyClazz(Key.class).valueClazz(Value.class).build();
  map2.readFields(in);
  assertEquals(4,map2.size());
  assertEquals("a",((Value)map2.get(Key.of(1))).valueStr);
  map.put(Key.of(1),Value.of("aa"));
  map.put(Key.of(2),Value.of("bb"));
  map.put(Key.of(3),Value.of("cc"));
  map.put(Key.of(5),Value.of("e"));
  map.put(Key.of(6),Value.of("f"));
  out=new DataOutputStream(new FileOutputStream(tmpDir + ".index"));
  map.write(out);
  out.flush();
  out.close();
  assertTrue(new File(tmpDir).exists());
  assertEquals(6,new File(tmpDir).listFiles(new CachedFileFilter()).length);
  assertEquals(4,new File(baseDir).listFiles(new CachedFileFilter()).length);
  in=new DataInputStream(new FileInputStream(baseDir + ".index"));
  map2=CachedTreeMap.CachedTreeMapBuilder.newBuilder().baseDir(baseDir).persistent(true).immutable(true).maxSize(2).keyClazz(Key.class).valueClazz(Value.class).build();
  map2.readFields(in);
  assertEquals(4,map2.size());
  assertEquals("a",((Value)map2.get(Key.of(1))).valueStr);
  map.commit(false);
  assertFalse(new File(tmpDir).exists());
  assertEquals(6,new File(baseDir).listFiles(new CachedFileFilter()).length);
  in=new DataInputStream(new FileInputStream(baseDir + ".index"));
  map2=CachedTreeMap.CachedTreeMapBuilder.newBuilder().baseDir(baseDir).persistent(true).immutable(true).maxSize(2).keyClazz(Key.class).valueClazz(Value.class).build();
  map2.readFields(in);
  assertEquals(6,map2.size());
  assertEquals("aa",((Value)map2.get(Key.of(1))).valueStr);
  assertEquals("f",((Value)map2.get(Key.of(6))).valueStr);
}
