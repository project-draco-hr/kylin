{
  String jobId=optionsHelper.getOptionValue(OPTION_JOB_ID);
  boolean includeCube=optionsHelper.hasOption(OPTION_INCLUDE_CUBE) ? Boolean.valueOf(optionsHelper.getOptionValue(OPTION_INCLUDE_CUBE)) : true;
  boolean includeYarnLogs=optionsHelper.hasOption(OPTION_INCLUDE_YARN_LOGS) ? Boolean.valueOf(optionsHelper.getOptionValue(OPTION_INCLUDE_YARN_LOGS)) : true;
  boolean includeClient=optionsHelper.hasOption(OPTION_INCLUDE_CLIENT) ? Boolean.valueOf(optionsHelper.getOptionValue(OPTION_INCLUDE_CLIENT)) : true;
  boolean includeConf=optionsHelper.hasOption(OPTION_INCLUDE_CONF) ? Boolean.valueOf(optionsHelper.getOptionValue(OPTION_INCLUDE_CONF)) : true;
  logger.info("Start to dump job output");
  ExecutablePO executablePO=executableDao.getJob(jobId);
  addRequired(ResourceStore.EXECUTE_RESOURCE_ROOT + "/" + jobId);
  addRequired(ResourceStore.EXECUTE_OUTPUT_RESOURCE_ROOT + "/" + jobId);
  for (  ExecutablePO task : executablePO.getTasks()) {
    addRequired(ResourceStore.EXECUTE_RESOURCE_ROOT + "/" + executablePO.getTasks());
    addRequired(ResourceStore.EXECUTE_OUTPUT_RESOURCE_ROOT + "/" + executablePO.getTasks());
    if (includeYarnLogs) {
      yarnLogsResources.add(task.getUuid());
    }
  }
  extractResources(exportDir);
  if (includeCube) {
    String cubeName=executablePO.getParams().get("cubeName");
    if (!StringUtils.isEmpty(cubeName)) {
      File metaDir=new File(exportDir,"cube");
      FileUtils.forceMkdir(metaDir);
      String[] cubeMetaArgs={"-cube",cubeName,"-destDir",new File(metaDir,cubeName).getAbsolutePath(),"-includeJobs","false","-compress","false","-submodule","true"};
      logger.info("Start to extract related cube: " + StringUtils.join(cubeMetaArgs));
      CubeMetaExtractor cubeMetaExtractor=new CubeMetaExtractor();
      logger.info("CubeMetaExtractor args: " + Arrays.toString(cubeMetaArgs));
      cubeMetaExtractor.execute(cubeMetaArgs);
    }
  }
  if (includeYarnLogs) {
    logger.info("Start to dump yarn job logs: " + jobId);
    File yarnLogDir=new File(exportDir,"yarn");
    FileUtils.forceMkdir(yarnLogDir);
    for (    String stepId : yarnLogsResources) {
      extractTaskCounter(stepId,new File(new File(yarnLogDir,stepId),"Counters"));
      extractYarnLog(stepId,new File(yarnLogDir,stepId),true);
    }
  }
  if (includeClient) {
    String[] clientArgs={"-destDir",new File(exportDir,"client").getAbsolutePath(),"-compress","false","-submodule","true"};
    ClientEnvExtractor clientEnvExtractor=new ClientEnvExtractor();
    logger.info("ClientEnvExtractor args: " + Arrays.toString(clientArgs));
    clientEnvExtractor.execute(clientArgs);
  }
  if (includeConf) {
    logger.info("Start to extract kylin conf files.");
    try {
      FileUtils.copyDirectoryToDirectory(new File(ToolUtil.getConfFolder()),exportDir);
    }
 catch (    Exception e) {
      logger.warn("Error in export conf.",e);
    }
  }
  String[] logsArgs={"-destDir",new File(exportDir,"logs").getAbsolutePath(),"-compress","false","-submodule","true"};
  KylinLogExtractor logExtractor=new KylinLogExtractor();
  logger.info("KylinLogExtractor args: " + Arrays.toString(logsArgs));
  logExtractor.execute(logsArgs);
}
