{
  Options options=new Options();
  try {
    options.addOption(OPTION_INPUT_PATH);
    options.addOption(OPTION_OUTPUT_PATH);
    options.addOption(OPTION_JOB_NAME);
    options.addOption(OPTION_CUBE_NAME);
    parseOptions(options,args);
    String jobName=getOptionValue(OPTION_JOB_NAME);
    job=Job.getInstance(getConf(),jobName);
    File JarFile=new File(KylinConfig.getInstanceFromEnv().getKylinJobJarPath());
    if (JarFile.exists()) {
      job.setJar(KylinConfig.getInstanceFromEnv().getKylinJobJarPath());
    }
 else {
      job.setJarByClass(this.getClass());
    }
    addInputDirs(getOptionValue(OPTION_INPUT_PATH),job);
    Path output=new Path(getOptionValue(OPTION_OUTPUT_PATH));
    FileOutputFormat.setOutputPath(job,output);
    job.setInputFormatClass(SequenceFileInputFormat.class);
    job.setMapperClass(RangeKeyDistributionMapper.class);
    job.setMapOutputKeyClass(Text.class);
    job.setMapOutputValueClass(LongWritable.class);
    job.setReducerClass(RangeKeyDistributionReducer.class);
    job.setOutputFormatClass(SequenceFileOutputFormat.class);
    job.setOutputKeyClass(Text.class);
    job.setOutputValueClass(LongWritable.class);
    job.setNumReduceTasks(1);
    this.deletePath(job.getConfiguration(),output);
    String cubeName=getOptionValue(OPTION_CUBE_NAME).toUpperCase();
    CubeManager cubeMgr=CubeManager.getInstance(KylinConfig.getInstanceFromEnv());
    CubeInstance cube=cubeMgr.getCube(cubeName);
    RealizationCapacity realizationCapacity=cube.getDescriptor().getCapacity();
    job.getConfiguration().set(BatchConstants.CUBE_CAPACITY,realizationCapacity.toString());
    return waitForCompletion(job);
  }
 catch (  Exception e) {
    printUsage(options);
    log.error(e.getLocalizedMessage(),e);
    return 2;
  }
}
