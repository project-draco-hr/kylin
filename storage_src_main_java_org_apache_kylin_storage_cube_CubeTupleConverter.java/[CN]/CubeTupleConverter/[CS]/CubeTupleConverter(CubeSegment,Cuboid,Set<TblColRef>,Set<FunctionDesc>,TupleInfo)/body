{
  this.cubeSeg=cubeSeg;
  this.cuboid=cuboid;
  this.tupleInfo=returnTupleInfo;
  this.derivedColFillers=Lists.newArrayList();
  List<TblColRef> cuboidDims=cuboid.getColumns();
  List<MeasureDesc> cuboidMeasures=cuboid.getCube().getMeasures();
  nSelectedDims=selectedDimensions.size();
  gtColIdx=new int[selectedDimensions.size() + selectedMetrics.size()];
  tupleIdx=new int[selectedDimensions.size() + selectedMetrics.size()];
  tmpValues=new Object[selectedDimensions.size() + selectedMetrics.size()];
  int iii=0;
  for (int i=0; i < cuboidDims.size(); i++) {
    TblColRef col=cuboidDims.get(i);
    if (selectedDimensions.contains(col)) {
      gtColIdx[iii]=i;
      tupleIdx[iii]=tupleInfo.hasColumn(col) ? tupleInfo.getColumnIndex(col) : -1;
      iii++;
    }
  }
  for (int i=0; i < cuboidMeasures.size(); i++) {
    FunctionDesc aggrFunc=cuboidMeasures.get(i).getFunction();
    if (contains(selectedMetrics,aggrFunc)) {
      gtColIdx[iii]=cuboidDims.size() + i;
      if (aggrFunc.needRewrite()) {
        String rewriteFieldName=aggrFunc.getRewriteFieldName();
        tupleIdx[iii]=tupleInfo.hasField(rewriteFieldName) ? tupleInfo.getFieldIndex(rewriteFieldName) : -1;
      }
 else {
        TblColRef col=aggrFunc.getParameter().getColRefs().get(0);
        tupleIdx[iii]=tupleInfo.hasColumn(col) ? tupleInfo.getColumnIndex(col) : -1;
      }
      iii++;
    }
  }
  Map<Array<TblColRef>,List<DeriveInfo>> hostToDerivedInfo=cuboid.getCube().getHostToDerivedInfo(cuboidDims,null);
  for (  Entry<Array<TblColRef>,List<DeriveInfo>> entry : hostToDerivedInfo.entrySet()) {
    TblColRef[] hostCols=entry.getKey().data;
    for (    DeriveInfo deriveInfo : entry.getValue()) {
      IDerivedColumnFiller filler=newDerivedColumnFiller(hostCols,deriveInfo);
      if (filler != null) {
        derivedColFillers.add(filler);
      }
    }
  }
}
