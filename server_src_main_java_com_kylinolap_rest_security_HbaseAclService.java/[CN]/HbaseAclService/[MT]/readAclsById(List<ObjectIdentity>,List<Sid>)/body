{
  Map<ObjectIdentity,Acl> aclMaps=new HashMap<ObjectIdentity,Acl>();
  HTableInterface htable=null;
  Result result=null;
  try {
    htable=HBaseConnection.get(hbaseUrl).getTable(userTableName);
    for (    ObjectIdentity object : objects) {
      if (aclCache.containsKey(object)) {
        aclMaps.put(object,aclCache.get(object));
      }
 else {
        result=htable.get(new Get(Bytes.toBytes(String.valueOf(object.getIdentifier()))));
        if (null != result && !result.isEmpty()) {
          AclImpl acl=new AclImpl(object,object.getIdentifier(),aclAuthorizationStrategy,auditLogger);
          SidInfo owner=sidSerializer.deserialize(result.getValue(Bytes.toBytes(ACL_INFO_FAMILY),Bytes.toBytes(ACL_INFO_FAMILY_OWNER_COLUMN)));
          acl.setOwner((null == owner) ? null : (owner.isPrincipal() ? new PrincipalSid(owner.getSid()) : new GrantedAuthoritySid(owner.getSid())));
          acl.setEntriesInheriting(Bytes.toBoolean(result.getValue(Bytes.toBytes(ACL_INFO_FAMILY),Bytes.toBytes(ACL_INFO_FAMILY_ENTRY_INHERIT_COLUMN))));
          DomainObjectInfo parentInfo=domainObjSerializer.deserialize(result.getValue(Bytes.toBytes(ACL_INFO_FAMILY),Bytes.toBytes(ACL_INFO_FAMILY_PARENT_COLUMN)));
          if (null != parentInfo) {
            ObjectIdentity parentObj=new ObjectIdentityImpl(parentInfo.getType(),parentInfo.getId());
            acl.setParent(readAclById(parentObj,null));
          }
          genAces(sids,result,acl);
          aclMaps.put(object,acl);
          aclCache.put(object,acl);
        }
      }
    }
  }
 catch (  IOException e) {
    logger.error(e.getLocalizedMessage(),e);
  }
 finally {
    IOUtils.closeQuietly(htable);
  }
  return aclMaps;
}
