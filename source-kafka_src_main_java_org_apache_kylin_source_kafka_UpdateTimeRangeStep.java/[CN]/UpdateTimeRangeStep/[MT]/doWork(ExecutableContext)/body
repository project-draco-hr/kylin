{
  final CubeManager cubeManager=CubeManager.getInstance(context.getConfig());
  final CubeInstance cube=cubeManager.getCube(CubingExecutableUtil.getCubeName(this.getParams()));
  final CubeSegment segment=cube.getSegmentById(CubingExecutableUtil.getSegmentId(this.getParams()));
  final TblColRef partitionCol=segment.getCubeDesc().getModel().getPartitionDesc().getPartitionDateColumnRef();
  final String outputPath=this.getParams().get(BatchConstants.CFG_OUTPUT_PATH);
  final Path outputFile=new Path(outputPath,partitionCol.getName());
  String minValue=null, maxValue=null, currentValue=null;
  try (FileSystem fs=HadoopUtil.getFileSystem(outputPath);FSDataInputStream inputStream=fs.open(outputFile);BufferedReader bufferedReader=new BufferedReader(new InputStreamReader(inputStream))){
    minValue=currentValue=bufferedReader.readLine();
    while (currentValue != null) {
      maxValue=currentValue;
      currentValue=bufferedReader.readLine();
    }
  }
 catch (  IOException e) {
    logger.error("fail to read file " + outputFile,e);
    return new ExecuteResult(ExecuteResult.State.ERROR,e.getLocalizedMessage());
  }
  final DataType partitionColType=partitionCol.getType();
  FastDateFormat dateFormat;
  if (partitionColType.isDate()) {
    dateFormat=DateFormat.getDateFormat(DateFormat.DEFAULT_DATE_PATTERN);
  }
 else   if (partitionColType.isDatetime() || partitionColType.isTimestamp()) {
    dateFormat=DateFormat.getDateFormat(DateFormat.DEFAULT_DATETIME_PATTERN_WITHOUT_MILLISECONDS);
  }
 else   if (partitionColType.isStringFamily()) {
    String partitionDateFormat=segment.getCubeDesc().getModel().getPartitionDesc().getPartitionDateFormat();
    if (StringUtils.isEmpty(partitionDateFormat)) {
      partitionDateFormat=DateFormat.DEFAULT_DATE_PATTERN;
    }
    dateFormat=DateFormat.getDateFormat(partitionDateFormat);
  }
 else {
    return new ExecuteResult(ExecuteResult.State.ERROR,"Type " + partitionColType + " is not valid partition column type");
  }
  try {
    long startTime=dateFormat.parse(minValue).getTime();
    long endTime=dateFormat.parse(maxValue).getTime();
    CubeUpdate cubeBuilder=new CubeUpdate(cube);
    segment.setDateRangeStart(startTime);
    segment.setDateRangeEnd(endTime);
    cubeBuilder.setToUpdateSegs(segment);
    cubeManager.updateCube(cubeBuilder);
    return new ExecuteResult(ExecuteResult.State.SUCCEED,"succeed");
  }
 catch (  Exception e) {
    logger.error("fail to update cube segment offset",e);
    return new ExecuteResult(ExecuteResult.State.ERROR,e.getLocalizedMessage());
  }
}
