{
  diskPart.openRead();
  logger.debug(GTMemDiskStore.this + " read start @ " + diskOffset);
  InputStream in=new InputStream(){
    byte[] tmp=new byte[1];
    MemChunk memChunk;
    @Override public int read() throws IOException {
      int n=read(tmp,0,1);
      if (n <= 0)       return -1;
 else       return (int)tmp[0];
    }
    @Override public int read(    byte[] b,    int off,    int len) throws IOException {
      nReadCalls++;
      if (available() <= 0)       return -1;
      if (memChunk == null && memPart.headOffset() <= diskOffset && diskOffset < memPart.tailOffset()) {
        memChunk=memPart.seekMemChunk(diskOffset);
      }
      int lenToGo=Math.min(available(),len);
      int nRead=0;
      while (lenToGo > 0) {
        int n;
        if (memChunk != null) {
          if (memChunk.headOffset() > diskOffset) {
            memChunk=null;
            continue;
          }
          if (diskOffset >= memChunk.tailOffset()) {
            memChunk=memChunk.next;
            continue;
          }
          int chunkOffset=(int)(diskOffset - memChunk.headOffset());
          n=Math.min((int)(memChunk.tailOffset() - diskOffset),lenToGo);
          System.arraycopy(memChunk.data,chunkOffset,b,off,n);
          memRead+=n;
        }
 else {
          n=diskPart.read(diskOffset,b,off,lenToGo);
          diskRead+=n;
        }
        lenToGo-=n;
        nRead+=n;
        off+=n;
        diskOffset+=n;
      }
      return nRead;
    }
    @Override public int available() throws IOException {
      return (int)(diskPart.tailOffset - diskOffset);
    }
  }
;
  din=new DataInputStream(new BufferedInputStream(in,STREAM_BUFFER_SIZE));
}
