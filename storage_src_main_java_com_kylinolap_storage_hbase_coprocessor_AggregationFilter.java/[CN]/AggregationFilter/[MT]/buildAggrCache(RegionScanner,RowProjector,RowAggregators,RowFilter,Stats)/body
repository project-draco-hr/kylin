{
  AggregationCache aggCache=new AggregationCache(aggregators,0);
  boolean hasMore=true;
  List<Cell> results=new ArrayList<Cell>();
  while (hasMore) {
    results.clear();
    hasMore=innerScanner.nextRaw(results);
    if (!results.isEmpty()) {
      if (stats != null) {
        stats.countInputRow(results);
      }
      ImmutableBytesWritable aggKey=projector.getRowKey(results);
      if (filter.evaluate(aggKey)) {
        MeasureAggregator[] bufs=aggCache.getBuffer(aggKey);
        aggregators.aggregate(bufs,results);
      }
      aggCache.checkMemoryUsage();
    }
  }
  return aggCache;
}
