{
  CubeInstance cubeInstance=CubeManager.getInstance(KylinConfig.getInstanceFromEnv()).getCube(cubeName);
  List<String> data=StreamingTableDataGenerator.generate(10000,startTime,endTime,cubeInstance.getFactTable());
  List<String> data2=StreamingTableDataGenerator.generate(10,endTime,endTime + 300000,cubeInstance.getFactTable());
  TableDesc tableDesc=cubeInstance.getFactTableDesc();
  KafkaDataLoader.loadIntoKafka(kafkaConfig.getKafkaClusterConfigs(),data);
  KafkaDataLoader.loadIntoKafka(kafkaConfig.getKafkaClusterConfigs(),data2);
  logger.info("Write {} messages into topic {}",data.size(),kafkaConfig.getTopic());
  List<TblColRef> tableColumns=Lists.newArrayList();
  for (  ColumnDesc columnDesc : tableDesc.getColumns()) {
    tableColumns.add(new TblColRef(columnDesc));
  }
  TimedJsonStreamParser timedJsonStreamParser=new TimedJsonStreamParser(tableColumns,"formatTs=true");
  StringBuilder sb=new StringBuilder();
  for (  String json : data) {
    List<String> rowColumns=timedJsonStreamParser.parse(new MessageAndOffset(new Message(json.getBytes()),0)).getData();
    sb.append(StringUtils.join(rowColumns,","));
    sb.append(System.getProperty("line.separator"));
  }
  overrideFactTableData(sb.toString(),cubeInstance.getFactTable());
}
