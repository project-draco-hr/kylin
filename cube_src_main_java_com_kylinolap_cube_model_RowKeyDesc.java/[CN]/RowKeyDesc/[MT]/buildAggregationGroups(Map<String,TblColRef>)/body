{
  if (aggregationGroups == null) {
    aggregationGroups=new String[0][];
  }
  for (int i=0; i < aggregationGroups.length; i++) {
    StringUtil.toUpperCaseArray(aggregationGroups[i],this.aggregationGroups[i]);
  }
  for (int i=0; i < this.rowkeyColumns.length; i++) {
    int index=rowkeyColumns[i].getBitIndex();
    this.fullMask|=1L << index;
  }
  this.aggrGroupMasks=new AggrGroupMask[aggregationGroups.length];
  for (int i=0; i < this.aggregationGroups.length; i++) {
    String[] aggGrp=this.aggregationGroups[i];
    AggrGroupMask mask=new AggrGroupMask(aggGrp.length);
    for (int j=0; j < aggGrp.length; j++) {
      TblColRef aggCol=colNameAbbr.get(aggGrp[j].toUpperCase());
      if (aggCol == null) {
        throw new IllegalArgumentException("Can't find aggregation column " + aggGrp[j] + " in  cube "+ this.cubeDesc.getName());
      }
      Integer index=getColumnBitIndex(aggCol);
      mask.groupMask|=1L << index;
      mask.groupOneBitMasks[j]=1L << index;
      this.aggrGroupFullMask|=1L << index;
    }
    this.aggrGroupMasks[i]=mask;
  }
  this.tailMask=fullMask ^ mandatoryColumnMask ^ aggrGroupFullMask;
  for (int i=0; i < aggrGroupMasks.length; i++) {
    AggrGroupMask mask=aggrGroupMasks[i];
    mask.uniqueMask=mask.groupMask;
    for (int j=i + 1; j < aggrGroupMasks.length; j++) {
      mask.uniqueMask&=~aggrGroupMasks[j].groupMask;
    }
    mask.leftoverMask=tailMask;
    for (int j=i + 1; j < aggrGroupMasks.length; j++) {
      mask.leftoverMask|=aggrGroupMasks[j].groupMask;
    }
    mask.leftoverMask&=~mask.groupMask;
  }
}
