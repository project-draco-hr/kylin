{
  if (name != null)   name=name.toUpperCase();
  this.table=null;
  this.database=null;
  this.join=null;
  for (int i=0, n=this.column.length; i < n; i++) {
    String thisColumn=this.column[i];
    String[] splits=StringSplitter.split(thisColumn,".");
    if (splits.length > 1) {
      String thisTable=splits[splits.length - 2].toUpperCase();
      if (table == null) {
        table=thisTable;
      }
 else       if (thisTable != null && !table.equalsIgnoreCase(thisTable)) {
        throw new IllegalStateException("One dimension can only refer to the columns on the same table: '" + table + "' and '"+ thisTable+ "'.");
      }
      if (database == null && splits.length > 2) {
        database=splits[splits.length - 3].toUpperCase();
      }
    }
 else {
      List<String> tableNames=columnTableMap.get(thisColumn);
      if (tableNames != null && tableNames.size() == 1) {
        table=tableNames.get(0);
      }
 else {
        if (tableNames == null)         throw new IllegalStateException("The column '" + thisColumn + "' doesn't belong to any table.");
        if (tableNames.size() > 1)         throw new IllegalStateException("The column '" + thisColumn + "' is ambiguous; the name appeared in more than one tables, please specify table name together with the column name.");
      }
    }
  }
  TableDesc tableDesc=tables.get(table);
  if (tableDesc == null)   throw new IllegalStateException("Can't find table " + table + " on dimension "+ name);
  for (  LookupDesc lookup : cubeDesc.getModel().getLookups()) {
    if (lookup.getTable().equalsIgnoreCase(table)) {
      this.join=lookup.getJoin();
      break;
    }
  }
  if (isHierarchy && this.column.length > 0) {
    List<HierarchyDesc> hierarchyList=new ArrayList<HierarchyDesc>(3);
    for (int i=0, n=this.column.length; i < n; i++) {
      String aColumn=this.column[i];
      HierarchyDesc aHierarchy=new HierarchyDesc();
      aHierarchy.setLevel(String.valueOf(i + 1));
      aHierarchy.setColumn(aColumn);
      hierarchyList.add(aHierarchy);
    }
    this.hierarchy=hierarchyList.toArray(new HierarchyDesc[hierarchyList.size()]);
  }
  if (hierarchy != null && hierarchy.length == 0)   hierarchy=null;
  if (derived != null && derived.length == 0)   derived=null;
  if (hierarchy != null) {
    for (    HierarchyDesc h : hierarchy)     h.setColumn(h.getColumn().toUpperCase());
  }
  if (derived != null) {
    StringUtil.toUpperCaseArray(derived,derived);
  }
}
