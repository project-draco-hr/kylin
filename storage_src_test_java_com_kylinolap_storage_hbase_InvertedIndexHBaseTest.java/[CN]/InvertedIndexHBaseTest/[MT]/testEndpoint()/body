{
  String tableName=seg.getStorageLocationIdentifier();
  HTableInterface table=hconn.getTable(tableName);
  final TableRecordInfoDigest recordInfo=new TableRecordInfo(seg);
  final IIProtos.IIRequest request=IIProtos.IIRequest.newBuilder().setTableInfo(ByteString.copyFrom(TableRecordInfoDigest.serialize(recordInfo))).build();
  Map<byte[],List<TableRecord>> results=table.coprocessorService(IIProtos.RowsService.class,null,null,new Batch.Call<IIProtos.RowsService,List<TableRecord>>(){
    public List<TableRecord> call(    IIProtos.RowsService counter) throws IOException {
      ServerRpcController controller=new ServerRpcController();
      BlockingRpcCallback<IIProtos.IIResponse> rpcCallback=new BlockingRpcCallback<IIProtos.IIResponse>();
      counter.getRows(controller,request,rpcCallback);
      IIProtos.IIResponse response=rpcCallback.get();
      if (controller.failedOnException()) {
        throw controller.getFailedOn();
      }
      List<TableRecord> records=new ArrayList<TableRecord>();
      for (      ByteString raw : response.getRowsList()) {
        TableRecord record=new TableRecord(recordInfo);
        record.setBytes(raw.toByteArray(),0,raw.size());
        records.add(record);
      }
      return records;
    }
  }
);
  for (  Map.Entry<byte[],List<TableRecord>> entry : results.entrySet()) {
    System.out.println("result count : " + entry.getValue());
  }
}
