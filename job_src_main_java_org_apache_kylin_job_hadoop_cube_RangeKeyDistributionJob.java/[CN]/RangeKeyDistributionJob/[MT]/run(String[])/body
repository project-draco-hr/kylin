{
  Options options=new Options();
  try {
    options.addOption(OPTION_INPUT_PATH);
    options.addOption(OPTION_OUTPUT_PATH);
    options.addOption(OPTION_JOB_NAME);
    options.addOption(OPTION_CUBE_NAME);
    parseOptions(options,args);
    String jobName=getOptionValue(OPTION_JOB_NAME);
    job=Job.getInstance(getConf(),jobName);
    setJobClasspath(job);
    addInputDirs(getOptionValue(OPTION_INPUT_PATH),job);
    Path output=new Path(getOptionValue(OPTION_OUTPUT_PATH));
    FileOutputFormat.setOutputPath(job,output);
    job.setInputFormatClass(SequenceFileInputFormat.class);
    job.setMapperClass(RangeKeyDistributionMapper.class);
    job.setMapOutputKeyClass(Text.class);
    job.setMapOutputValueClass(LongWritable.class);
    job.setReducerClass(RangeKeyDistributionReducer.class);
    job.setOutputFormatClass(SequenceFileOutputFormat.class);
    job.setOutputKeyClass(Text.class);
    job.setOutputValueClass(LongWritable.class);
    job.setNumReduceTasks(1);
    this.deletePath(job.getConfiguration(),output);
    String cubeName=getOptionValue(OPTION_CUBE_NAME).toUpperCase();
    CubeManager cubeMgr=CubeManager.getInstance(KylinConfig.getInstanceFromEnv());
    CubeInstance cube=cubeMgr.getCube(cubeName);
    int regionSplitSize=KylinConfig.getInstanceFromEnv().getHBaseRegionSizeGB(cube.getDescriptor().getModel().getCapacity().toString());
    int maxRegionCount=KylinConfig.getInstanceFromEnv().getHBaseMaxRegionCount();
    job.getConfiguration().set(BatchConstants.REGION_SPLIT_SIZE,String.valueOf(regionSplitSize));
    job.getConfiguration().set(BatchConstants.REGION_NUMBER,String.valueOf(maxRegionCount));
    return waitForCompletion(job);
  }
 catch (  Exception e) {
    printUsage(options);
    throw e;
  }
}
