{
  List<String> loadedTables=Lists.newArrayList();
  MetadataManager metaMgr=MetadataManager.getInstance(KylinConfig.getInstanceFromEnv());
  for (  String tableName : tables) {
    Table table=null;
    HiveClient hiveClient=new HiveClient();
    List<FieldSchema> fields=null;
    try {
      table=hiveClient.getHiveTable(database,tableName);
      fields=hiveClient.getHiveTableFields(database,tableName);
    }
 catch (    Exception e) {
      e.printStackTrace();
      throw new IOException(e);
    }
    long tableSize=hiveClient.getFileSizeForTable(table);
    long tableFileNum=hiveClient.getFileNumberForTable(table);
    TableDesc tableDesc=metaMgr.getTableDesc(database + "." + tableName);
    if (tableDesc == null) {
      tableDesc=new TableDesc();
      tableDesc.setDatabase(database.toUpperCase());
      tableDesc.setName(tableName.toUpperCase());
      tableDesc.setUuid(UUID.randomUUID().toString());
      tableDesc.setLastModified(0);
    }
    int columnNumber=fields.size();
    List<ColumnDesc> columns=new ArrayList<ColumnDesc>(columnNumber);
    for (int i=0; i < columnNumber; i++) {
      FieldSchema field=fields.get(i);
      ColumnDesc cdesc=new ColumnDesc();
      cdesc.setName(field.getName().toUpperCase());
      cdesc.setDatatype(field.getType());
      cdesc.setId(String.valueOf(i + 1));
      columns.add(cdesc);
    }
    tableDesc.setColumns(columns.toArray(new ColumnDesc[columnNumber]));
    List<FieldSchema> partitionCols=table.getPartitionKeys();
    StringBuffer partitionColumnString=new StringBuffer();
    for (int i=0, n=partitionCols.size(); i < n; i++) {
      if (i > 0)       partitionColumnString.append(", ");
      partitionColumnString.append(partitionCols.get(i).getName().toUpperCase());
    }
    Map<String,String> map=metaMgr.getTableDescExd(tableDesc.getIdentity());
    if (map == null) {
      map=Maps.newHashMap();
    }
    map.put(MetadataConstances.TABLE_EXD_TABLENAME,table.getTableName());
    map.put(MetadataConstances.TABLE_EXD_LOCATION,table.getSd().getLocation());
    map.put(MetadataConstances.TABLE_EXD_IF,table.getSd().getInputFormat());
    map.put(MetadataConstances.TABLE_EXD_OF,table.getSd().getOutputFormat());
    map.put(MetadataConstances.TABLE_EXD_OWNER,table.getOwner());
    map.put(MetadataConstances.TABLE_EXD_LAT,String.valueOf(table.getLastAccessTime()));
    map.put(MetadataConstances.TABLE_EXD_PC,partitionColumnString.toString());
    map.put(MetadataConstances.TABLE_EXD_TFS,String.valueOf(tableSize));
    map.put(MetadataConstances.TABLE_EXD_TNF,String.valueOf(tableFileNum));
    map.put(MetadataConstances.TABLE_EXD_PARTITIONED,Boolean.valueOf(partitionCols != null && partitionCols.size() > 0).toString());
    metaMgr.saveSourceTable(tableDesc);
    metaMgr.saveTableExd(tableDesc.getIdentity(),map);
    loadedTables.add(tableDesc.getIdentity());
  }
  return loadedTables;
}
