{
  String algPref=kylinConf.getCubeAlgorithm();
  AlgorithmEnum alg;
  if (AlgorithmEnum.INMEM.name().equalsIgnoreCase(algPref)) {
    alg=AlgorithmEnum.INMEM;
  }
 else   if (AlgorithmEnum.LAYER.name().equalsIgnoreCase(algPref)) {
    alg=AlgorithmEnum.LAYER;
  }
 else {
    int memoryHungryMeasures=0;
    for (    MeasureDesc measure : seg.getCubeDesc().getMeasures()) {
      if (measure.getFunction().getMeasureType().isMemoryHungry()) {
        logger.info("This cube has memory-hungry measure " + measure.getFunction().getExpression());
        memoryHungryMeasures++;
      }
    }
    if (memoryHungryMeasures > 4 || (kylinConf.isDevEnv() && memoryHungryMeasures > 0)) {
      alg=AlgorithmEnum.LAYER;
    }
 else     if ("random".equalsIgnoreCase(algPref)) {
      alg=new Random().nextBoolean() ? AlgorithmEnum.INMEM : AlgorithmEnum.LAYER;
    }
 else {
      double threshold=kylinConf.getCubeAlgorithmAutoThreshold();
      double mapperOverlapRatio=new CubeStatsReader(seg,kylinConf).getMapperOverlapRatioOfFirstBuild();
      logger.info("mapperOverlapRatio for " + seg + " is "+ mapperOverlapRatio+ " and threshold is "+ threshold);
      alg=mapperOverlapRatio < threshold ? AlgorithmEnum.INMEM : AlgorithmEnum.LAYER;
    }
  }
  logger.info("The cube algorithm for " + seg + " is "+ alg);
  CubingJob cubingJob=(CubingJob)executableManager.getJob(CubingExecutableUtil.getCubingJobId(this.getParams()));
  cubingJob.setAlgorithm(alg);
}
