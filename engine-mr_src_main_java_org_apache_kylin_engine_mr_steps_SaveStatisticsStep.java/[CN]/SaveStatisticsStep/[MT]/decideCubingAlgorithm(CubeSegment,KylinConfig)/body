{
  String algPref=kylinConf.getCubeAlgorithm();
  AlgorithmEnum alg;
  if (AlgorithmEnum.INMEM.name().equalsIgnoreCase(algPref)) {
    alg=AlgorithmEnum.INMEM;
  }
 else   if (AlgorithmEnum.LAYER.name().equalsIgnoreCase(algPref)) {
    alg=AlgorithmEnum.LAYER;
  }
 else {
    int memoryHungryMeasures=0;
    for (    MeasureDesc measure : seg.getCubeDesc().getMeasures()) {
      if (measure.getFunction().getMeasureType().isMemoryHungry()) {
        logger.info("This cube has memory-hungry measure " + measure.getFunction().getExpression());
        memoryHungryMeasures++;
      }
    }
    if (memoryHungryMeasures > 0) {
      alg=AlgorithmEnum.LAYER;
    }
 else     if ("random".equalsIgnoreCase(algPref)) {
      alg=new Random().nextBoolean() ? AlgorithmEnum.INMEM : AlgorithmEnum.LAYER;
    }
 else {
      CubeStatsReader cubeStats=new CubeStatsReader(seg,kylinConf);
      int mapperNumber=cubeStats.getMapperNumberOfFirstBuild();
      int mapperNumLimit=kylinConf.getCubeAlgorithmAutoMapperLimit();
      double mapperOverlapRatio=cubeStats.getMapperOverlapRatioOfFirstBuild();
      double overlapThreshold=kylinConf.getCubeAlgorithmAutoThreshold();
      logger.info("mapperNumber for " + seg + " is "+ mapperNumber+ " and threshold is "+ mapperNumLimit);
      logger.info("mapperOverlapRatio for " + seg + " is "+ mapperOverlapRatio+ " and threshold is "+ overlapThreshold);
      alg=(mapperNumber <= mapperNumLimit && mapperOverlapRatio <= overlapThreshold) ? AlgorithmEnum.INMEM : AlgorithmEnum.LAYER;
    }
  }
  logger.info("The cube algorithm for " + seg + " is "+ alg);
  CubingJob cubingJob=(CubingJob)executableManager.getJob(CubingExecutableUtil.getCubingJobId(this.getParams()));
  cubingJob.setAlgorithm(alg);
}
