{
  SimpleDateFormat f=new SimpleDateFormat("yyyy-MM-dd");
  f.setTimeZone(TimeZone.getTimeZone("GMT"));
  long dateEnd=f.parse("2013-11-12").getTime();
  JobManager jobManager=new JobManager("JobInstanceBuilderTest",new JobEngineConfig(KylinConfig.getInstanceFromEnv()));
  String cubeName="test_kylin_cube_with_slr_empty";
  CubeManager cubeManager=CubeManager.getInstance(this.getTestConfig());
  CubeInstance cube=cubeManager.getCube(cubeName);
  CubeSegment segment=cubeManager.allocateSegments(cube,CubeBuildTypeEnum.BUILD,0,dateEnd).get(0);
  JobInstance jobInstance=jobManager.createJob(cubeName,segment.getName(),UUID.randomUUID().toString(),CubeBuildTypeEnum.BUILD);
  String actual=JsonUtil.writeValueAsIndentString(jobInstance);
  System.out.println(actual);
  assertEquals(13,jobInstance.getSteps().size());
  assertTrue(jobInstance.getSteps().get(3).getExecCmd().contains("hadoop_job_conf.xml"));
  JobStep jobStep;
  jobStep=jobInstance.getSteps().get(0);
  assertEquals(JobStepCmdTypeEnum.SHELL_CMD_HADOOP,jobStep.getCmdType());
  assertEquals(false,jobStep.isRunAsync());
  jobStep=jobInstance.getSteps().get(1);
  assertEquals(JobStepCmdTypeEnum.JAVA_CMD_HADOOP_FACTDISTINCT,jobStep.getCmdType());
  assertEquals(true,jobStep.isRunAsync());
  jobStep=jobInstance.getSteps().get(2);
  assertEquals(JobStepCmdTypeEnum.JAVA_CMD_HADOOP_NO_MR_DICTIONARY,jobStep.getCmdType());
  assertEquals(false,jobStep.isRunAsync());
  jobStep=jobInstance.getSteps().get(3);
  assertEquals(JobStepCmdTypeEnum.JAVA_CMD_HADOOP_BASECUBOID,jobStep.getCmdType());
  assertEquals(true,jobStep.isRunAsync());
  jobStep=jobInstance.getSteps().get(4);
  assertEquals(JobStepCmdTypeEnum.JAVA_CMD_HADOOP_NDCUBOID,jobStep.getCmdType());
  assertEquals(true,jobStep.isRunAsync());
  jobStep=jobInstance.getSteps().get(5);
  assertEquals(JobStepCmdTypeEnum.JAVA_CMD_HADOOP_NDCUBOID,jobStep.getCmdType());
  assertEquals(true,jobStep.isRunAsync());
  jobStep=jobInstance.getSteps().get(6);
  assertEquals(JobStepCmdTypeEnum.JAVA_CMD_HADOOP_NDCUBOID,jobStep.getCmdType());
  assertEquals(true,jobStep.isRunAsync());
  jobStep=jobInstance.getSteps().get(7);
  assertEquals(JobStepCmdTypeEnum.JAVA_CMD_HADOOP_NDCUBOID,jobStep.getCmdType());
  assertEquals(true,jobStep.isRunAsync());
  jobStep=jobInstance.getSteps().get(8);
  assertEquals(JobStepCmdTypeEnum.JAVA_CMD_HADOOP_NDCUBOID,jobStep.getCmdType());
  assertEquals(true,jobStep.isRunAsync());
  jobStep=jobInstance.getSteps().get(9);
  assertEquals(JobStepCmdTypeEnum.JAVA_CMD_HADOOP_RANGEKEYDISTRIBUTION,jobStep.getCmdType());
  assertEquals(true,jobStep.isRunAsync());
  jobStep=jobInstance.getSteps().get(10);
  assertEquals(JobStepCmdTypeEnum.JAVA_CMD_HADDOP_NO_MR_CREATEHTABLE,jobStep.getCmdType());
  assertEquals(false,jobStep.isRunAsync());
  jobStep=jobInstance.getSteps().get(11);
  assertEquals(JobStepCmdTypeEnum.JAVA_CMD_HADOOP_CONVERTHFILE,jobStep.getCmdType());
  assertEquals(true,jobStep.isRunAsync());
  jobStep=jobInstance.getSteps().get(12);
  assertEquals(JobStepCmdTypeEnum.JAVA_CMD_HADOOP_NO_MR_BULKLOAD,jobStep.getCmdType());
  assertEquals(false,jobStep.isRunAsync());
}
