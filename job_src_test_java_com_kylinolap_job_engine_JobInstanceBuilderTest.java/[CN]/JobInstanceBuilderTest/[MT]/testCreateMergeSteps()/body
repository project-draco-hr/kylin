{
  JobManager jobManager=new JobManager("JobInstanceBuilderTest",new JobEngineConfig(KylinConfig.getInstanceFromEnv()));
  String cubeName="test_kylin_cube_with_slr_ready_2_segments";
  CubeManager cubeManager=CubeManager.getInstance(this.getTestConfig());
  CubeInstance cube=cubeManager.getCube(cubeName);
  CubeSegment segment=CubeManager.getInstance(this.getTestConfig()).allocateSegments(cube,RealizationBuildTypeEnum.MERGE,1384240200000L,1386835200000L).get(0);
  JobInstance jobInstance=jobManager.createJob(cubeName,segment.getName(),UUID.randomUUID().toString(),RealizationBuildTypeEnum.MERGE,null);
  String actual=JsonUtil.writeValueAsIndentString(jobInstance);
  System.out.println(actual);
  assertEquals(5,jobInstance.getSteps().size());
  JobStep jobStep;
  jobStep=jobInstance.getSteps().get(0);
  assertEquals(JobStepCmdTypeEnum.JAVA_CMD_HADOOP_MERGECUBOID,jobStep.getCmdType());
  assertEquals(true,jobStep.isRunAsync());
  jobStep=jobInstance.getSteps().get(1);
  assertEquals(JobStepCmdTypeEnum.JAVA_CMD_HADOOP_RANGEKEYDISTRIBUTION,jobStep.getCmdType());
  assertEquals(true,jobStep.isRunAsync());
  jobStep=jobInstance.getSteps().get(2);
  assertEquals(JobStepCmdTypeEnum.JAVA_CMD_HADDOP_NO_MR_CREATEHTABLE,jobStep.getCmdType());
  assertEquals(false,jobStep.isRunAsync());
  jobStep=jobInstance.getSteps().get(3);
  assertEquals(JobStepCmdTypeEnum.JAVA_CMD_HADOOP_CONVERTHFILE,jobStep.getCmdType());
  assertEquals(true,jobStep.isRunAsync());
  jobStep=jobInstance.getSteps().get(4);
  assertEquals(JobStepCmdTypeEnum.JAVA_CMD_HADOOP_NO_MR_BULKLOAD,jobStep.getCmdType());
  assertEquals(false,jobStep.isRunAsync());
}
