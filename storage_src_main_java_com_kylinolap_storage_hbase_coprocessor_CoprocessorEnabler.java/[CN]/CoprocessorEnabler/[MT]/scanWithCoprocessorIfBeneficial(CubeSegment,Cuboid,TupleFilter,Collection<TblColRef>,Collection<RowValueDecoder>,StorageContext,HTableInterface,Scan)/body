{
  if (!isCoprocessorBeneficial(segment.getCubeInstance(),groupBy,rowValueDecoders,context)) {
    return table.getScanner(scan);
  }
  SRowType type=SRowType.fromCuboid(segment,cuboid);
  SRowFilter filter=SRowFilter.fromFilter(segment,tupleFiler);
  SRowProjector projector=SRowProjector.fromColumns(segment,cuboid,groupBy);
  SRowAggregators aggrs=SRowAggregators.fromValuDecoders(rowValueDecoders);
  if (DEBUG_LOCAL_COPROCESSOR) {
    RegionScanner innerScanner=new RegionScannerAdapter(table.getScanner(scan));
    AggregationScanner aggrScanner=new AggregationScanner(type,filter,projector,aggrs,innerScanner);
    return new ResultScannerAdapter(aggrScanner);
  }
 else {
    scan.setAttribute(AggregateRegionObserver.COPROCESSOR_ENABLE,new byte[]{0x01});
    scan.setAttribute(AggregateRegionObserver.TYPE,SRowType.serialize(type));
    scan.setAttribute(AggregateRegionObserver.PROJECTOR,SRowProjector.serialize(projector));
    scan.setAttribute(AggregateRegionObserver.AGGREGATORS,SRowAggregators.serialize(aggrs));
    scan.setAttribute(AggregateRegionObserver.FILTER,SRowFilter.serialize(filter));
    return table.getScanner(scan);
  }
}
