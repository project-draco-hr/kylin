{
  if (!isCoprocessorBeneficial(keyRange,rowValueDecoders,cuboid,context)) {
    return table.getScanner(scan);
  }
  RowProjector projector=RowProjector.fromColumns(segment,cuboid,dimensionColumns);
  RowAggregators aggrs=RowAggregators.fromValuDecoders(rowValueDecoders);
  RowFilter filter=RowFilter.fromKeyRange(keyRange);
  if (DEBUG_LOCAL_COPROCESSOR) {
    RegionScanner innerScanner=new RegionScannerAdapter(table.getScanner(scan));
    AggregationFilter aggregationFilter=new AggregationFilter(cuboid,filter,projector,aggrs,innerScanner);
    return new ResultScannerAdapter(aggregationFilter);
  }
 else {
    scan.setAttribute(AggregateRegionObserver.COPROCESSOR_ENABLE,new byte[]{0x01});
    scan.setAttribute(AggregateRegionObserver.PROJECTOR,RowProjector.serialize(projector));
    scan.setAttribute(AggregateRegionObserver.AGGREGATORS,RowAggregators.serialize(aggrs));
    scan.setAttribute(AggregateRegionObserver.FILTER,RowFilter.serialize(filter));
    return table.getScanner(scan);
  }
}
