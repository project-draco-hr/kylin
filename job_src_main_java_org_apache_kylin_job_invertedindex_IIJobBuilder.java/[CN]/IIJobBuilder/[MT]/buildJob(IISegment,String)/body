{
  checkPreconditions(seg);
  IIJob result=initialJob(seg,"BUILD",submitter);
  final String jobId=result.getId();
  final IIJoinedFlatTableDesc intermediateTableDesc=new IIJoinedFlatTableDesc(seg.getIIDesc());
  final String intermediateTableIdentity=getIntermediateTableIdentity(intermediateTableDesc);
  final String factDistinctColumnsPath=getIIDistinctColumnsPath(seg,jobId);
  final String iiRootPath=getJobWorkingDir(jobId) + "/" + seg.getIIInstance().getName()+ "/";
  final String iiPath=iiRootPath + "*";
  final AbstractExecutable intermediateHiveTableStep=createFlatHiveTableStep(intermediateTableDesc,jobId);
  result.addTask(intermediateHiveTableStep);
  result.addTask(createFactDistinctColumnsStep(seg,intermediateTableIdentity,jobId,factDistinctColumnsPath));
  result.addTask(createBuildDictionaryStep(seg,factDistinctColumnsPath));
  result.addTask(createInvertedIndexStep(seg,intermediateTableIdentity,iiRootPath));
  result.addTask(createCreateHTableStep(seg));
  result.addTask(createConvertToHfileStep(seg,iiPath,jobId));
  result.addTask(createBulkLoadStep(seg,jobId));
  return result;
}
