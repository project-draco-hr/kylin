{
  this.cubeSeg=cubeSeg;
  this.cuboid=cuboid;
  this.tupleInfo=returnTupleInfo;
  this.derivedColFillers=Lists.newArrayList();
  this.topNCol=topNCol;
  List<TblColRef> cuboidDims=cuboid.getColumns();
  CuboidToGridTableMapping mapping=cuboid.getCuboidToGridTableMapping();
  nSelectedDims=selectedDimensions.size();
  gtColIdx=new int[selectedDimensions.size() + selectedMetrics.size()];
  tupleIdx=new int[selectedDimensions.size() + selectedMetrics.size()];
  tmpValues=new Object[selectedDimensions.size() + selectedMetrics.size()];
  int iii=0;
  for (  TblColRef dim : selectedDimensions) {
    int i=mapping.getIndexOf(dim);
    gtColIdx[iii]=i;
    tupleIdx[iii]=tupleInfo.hasColumn(dim) ? tupleInfo.getColumnIndex(dim) : -1;
    iii++;
  }
  for (  FunctionDesc metric : selectedMetrics) {
    int i=mapping.getIndexOf(metric);
    gtColIdx[iii]=i;
    if (metric.needRewrite()) {
      String rewriteFieldName=metric.getRewriteFieldName();
      tupleIdx[iii]=tupleInfo.hasField(rewriteFieldName) ? tupleInfo.getFieldIndex(rewriteFieldName) : -1;
    }
 else {
      TblColRef col=metric.getParameter().getColRefs().get(0);
      tupleIdx[iii]=tupleInfo.hasColumn(col) ? tupleInfo.getColumnIndex(col) : -1;
    }
    iii++;
  }
  if (this.topNCol != null) {
    this.topNColTupleIdx=tupleInfo.hasColumn(this.topNCol) ? tupleInfo.getColumnIndex(this.topNCol) : -1;
    this.topNMeasureTupleIdx=nSelectedDims;
    this.topNColDict=(Dictionary<String>)cubeSeg.getDictionary(this.topNCol);
  }
  Map<Array<TblColRef>,List<DeriveInfo>> hostToDerivedInfo=cuboid.getCube().getHostToDerivedInfo(cuboidDims,null);
  for (  Entry<Array<TblColRef>,List<DeriveInfo>> entry : hostToDerivedInfo.entrySet()) {
    TblColRef[] hostCols=entry.getKey().data;
    for (    DeriveInfo deriveInfo : entry.getValue()) {
      IDerivedColumnFiller filler=newDerivedColumnFiller(hostCols,deriveInfo);
      if (filler != null) {
        derivedColFillers.add(filler);
      }
    }
  }
}
