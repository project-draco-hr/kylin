{
  createTestMetadata();
  logger.info("The metadataUrl is : " + getTestConfig());
  MetadataManager.clearCache();
  CubeManager.clearCache();
  ProjectManager.clearCache();
  DictionaryManager.clearCache();
  FileUtils.deleteDirectory(new File("../job/meta"));
  MergeCuboidMapper mapper=new MergeCuboidMapper();
  mapDriver=MapDriver.newMapDriver(mapper);
  cubeManager=CubeManager.getInstance(getTestConfig());
  cube=cubeManager.getCube("test_kylin_cube_without_slr_left_join_ready_2_segments");
  dictionaryManager=DictionaryManager.getInstance(getTestConfig());
  lfn=cube.getDescriptor().findColumnRef("DEFAULT.TEST_KYLIN_FACT","LSTG_FORMAT_NAME");
  lsi=cube.getDescriptor().findColumnRef("DEFAULT.TEST_KYLIN_FACT","CAL_DT");
  ssc=cube.getDescriptor().findColumnRef("DEFAULT.TEST_CATEGORY_GROUPINGS","META_CATEG_NAME");
  DictionaryInfo sharedDict=makeSharedDict();
  boolean isFirstSegment=true;
  for (  CubeSegment segment : cube.getSegments()) {
    TableSignature signature=new TableSignature();
    signature.setSize(100);
    signature.setLastModifiedTime(System.currentTimeMillis());
    signature.setPath("fake_dict_for" + lfn.getName() + segment.getName());
    DictionaryInfo newDictInfo=new DictionaryInfo(lfn.getTable(),lfn.getColumnDesc().getName(),lfn.getColumnDesc().getZeroBasedIndex(),"string",signature);
    List<byte[]> values=new ArrayList<byte[]>();
    values.add(new byte[]{97,97,97});
    if (isFirstSegment)     values.add(new byte[]{99,99,99});
 else     values.add(new byte[]{98,98,98});
    Dictionary<?> dict=DictionaryGenerator.buildDictionaryFromValueList(DataType.getInstance(newDictInfo.getDataType()),values);
    dictionaryManager.trySaveNewDict(dict,newDictInfo);
    ((TrieDictionary)dict).dump(System.out);
    segment.putDictResPath(lfn,newDictInfo.getResourcePath());
    segment.putDictResPath(lsi,sharedDict.getResourcePath());
    segment.putDictResPath(ssc,sharedDict.getResourcePath());
    isFirstSegment=false;
  }
  CubeUpdate cubeBuilder=new CubeUpdate(cube);
  cubeBuilder.setToUpdateSegs(cube.getSegments().toArray(new CubeSegment[cube.getSegments().size()]));
  cube=cubeManager.updateCube(cubeBuilder);
}
