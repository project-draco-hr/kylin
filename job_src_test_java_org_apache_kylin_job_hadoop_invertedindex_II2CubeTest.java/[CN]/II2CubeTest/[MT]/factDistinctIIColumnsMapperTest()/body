{
  MapDriver<ImmutableBytesWritable,Result,ShortWritable,Text> mapDriver;
  FactDistinctIIColumnsMapper mapper=new FactDistinctIIColumnsMapper();
  mapDriver=MapDriver.newMapDriver(mapper);
  mapDriver.getConfiguration().set(BatchConstants.CFG_II_NAME,iiName);
  mapDriver.getConfiguration().set(BatchConstants.CFG_CUBE_NAME,cubeName);
  mapDriver.getConfiguration().setStrings("io.serializations",mapDriver.getConfiguration().get("io.serializations"),MutationSerialization.class.getName(),ResultSerialization.class.getName());
  mapDriver.addAll(Lists.newArrayList(Collections2.transform(iiRows,new Function<IIRow,Pair<ImmutableBytesWritable,Result>>(){
    @Nullable @Override public Pair<ImmutableBytesWritable,Result> apply(    @Nullable IIRow input){
      return new Pair<ImmutableBytesWritable,Result>(new ImmutableBytesWritable(new byte[]{1}),Result.create(input.makeCells()));
    }
  }
)));
  List<Pair<ShortWritable,Text>> result=mapDriver.run();
  Set<String> lstgNames=Sets.newHashSet("FP-non GTC","ABIN");
  for (  Pair<ShortWritable,Text> pair : result) {
    Assert.assertEquals(pair.getFirst().get(),6);
    Assert.assertTrue(lstgNames.contains(pair.getSecond().toString()));
  }
}
