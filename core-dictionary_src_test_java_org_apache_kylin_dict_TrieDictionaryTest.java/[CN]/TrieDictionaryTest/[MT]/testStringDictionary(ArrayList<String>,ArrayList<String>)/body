{
  TrieDictionaryBuilder<String> b=newDictBuilder(str);
  int baseId=new Random().nextInt(100);
  TrieDictionary<String> dict=b.build(baseId);
  TreeSet<String> set=new TreeSet<String>();
  for (  String s : str) {
    set.add(s);
  }
  dict=testSerialize(dict);
  Iterator<String> it=set.iterator();
  int id=baseId;
  for (; it.hasNext(); id++) {
    String value=it.next();
    assertEquals(id,dict.getIdFromValue(value));
    assertEquals(value,dict.getValueFromId(id));
  }
  if (notFound != null) {
    for (    String s : notFound) {
      try {
        dict.getIdFromValue(s);
        fail("For not found value '" + s + "', IllegalArgumentException is expected");
      }
 catch (      IllegalArgumentException e) {
      }
    }
  }
  int nullId=dict.getIdFromValue(null);
  assertNull(dict.getValueFromId(nullId));
  int nullId2=dict.getIdFromValueBytes(null,0,0);
  assertEquals(dict.getValueBytesFromId(nullId2,null,0),-1);
  assertEquals(nullId,nullId2);
}
