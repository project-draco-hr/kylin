{
  final List<BuildCubeJob> buildCubeJobs=listAllCubingJobs(cube.getName(),null,EnumSet.allOf(ExecutableState.class));
  for (  BuildCubeJob job : buildCubeJobs) {
    if (job.getStatus() == ExecutableState.READY || job.getStatus() == ExecutableState.RUNNING) {
      throw new JobException("The cube " + cube.getName() + " has running job("+ job.getId()+ ") please discard it and try again.");
    }
  }
  String uuid=null;
  try {
    List<CubeSegment> cubeSegments;
    if (buildType == CubeBuildTypeEnum.BUILD) {
      cubeSegments=this.getCubeManager().appendSegments(cube,startDate,endDate);
    }
 else     if (buildType == CubeBuildTypeEnum.MERGE) {
      cubeSegments=this.getCubeManager().mergeSegments(cube,startDate,endDate);
    }
 else {
      throw new JobException("invalid build type:" + buildType);
    }
    getCubeManager().updateCube(cube);
    for (    CubeSegment segment : cubeSegments) {
      uuid=segment.getUuid();
      BuildCubeJobBuilder builder=BuildCubeJobBuilder.newBuilder(new JobEngineConfig(getConfig()),segment);
      getExecutableManager().addJob(builder.build());
      segment.setLastBuildJobID(uuid);
    }
  }
 catch (  CubeIntegrityException e) {
    throw new InternalErrorException(e.getLocalizedMessage(),e);
  }
  return uuid;
}
