{
  final List<CubingJob> cubingJobs=listAllCubingJobs(cube.getName(),null,EnumSet.allOf(ExecutableState.class));
  for (  CubingJob job : cubingJobs) {
    if (job.getStatus() == ExecutableState.READY || job.getStatus() == ExecutableState.RUNNING) {
      throw new JobException("The cube " + cube.getName() + " has running job("+ job.getId()+ ") please discard it and try again.");
    }
  }
  try {
    CubingJob job;
    CubingJobBuilder builder=(CubingJobBuilder)CubingJobBuilder.newBuilder().setJobEnginConfig(new JobEngineConfig(getConfig())).setSubmitter(submitter);
    if (buildType == CubeBuildTypeEnum.BUILD) {
      CubeSegment newSeg=getCubeManager().appendSegments(cube,startDate,endDate);
      builder.setSegment(newSeg);
      job=builder.buildJob();
    }
 else     if (buildType == CubeBuildTypeEnum.MERGE) {
      CubeSegment newSeg=getCubeManager().mergeSegments(cube,startDate,endDate);
      builder.setSegment(newSeg);
      job=builder.mergeJob();
    }
 else {
      throw new JobException("invalid build type:" + buildType);
    }
    getExecutableManager().addJob(job);
    return parseToJobInstance(job);
  }
 catch (  CubeIntegrityException e) {
    throw new InternalErrorException(e.getLocalizedMessage(),e);
  }
}
