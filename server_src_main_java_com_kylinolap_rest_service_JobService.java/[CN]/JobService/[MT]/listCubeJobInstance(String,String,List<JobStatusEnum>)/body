{
  Set<ExecutableState> states;
  if (statusList == null || statusList.isEmpty()) {
    states=EnumSet.allOf(ExecutableState.class);
  }
 else {
    states=Sets.newHashSet();
    for (    JobStatusEnum status : statusList) {
      states.add(parseToExecutableState(status));
    }
  }
  return Lists.newArrayList(FluentIterable.from(listAllCubingJobs(cubeName,projectName,states)).transform(new Function<CubingJob,JobInstance>(){
    @Override public JobInstance apply(    CubingJob cubingJob){
      return parseToJobInstance(cubingJob);
    }
  }
));
}
