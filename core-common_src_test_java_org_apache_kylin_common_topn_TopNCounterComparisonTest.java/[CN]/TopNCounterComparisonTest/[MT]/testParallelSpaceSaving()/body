{
  String dataFile=prepareTestDate();
  int PARALLEL=10;
  TopNCounterComparisonTest.SpaceSavingConsumer[] parallelCounters=new TopNCounterComparisonTest.SpaceSavingConsumer[PARALLEL];
  for (int i=0; i < PARALLEL; i++) {
    parallelCounters[i]=new TopNCounterComparisonTest.SpaceSavingConsumer();
  }
  int slice=TOTAL_RECORDS / PARALLEL;
  int startPosition=0;
  for (int i=0; i < PARALLEL; i++) {
    feedDataToConsumer(dataFile,parallelCounters[i],startPosition,startPosition + slice);
    startPosition+=slice;
  }
  TopNCounterComparisonTest.SpaceSavingConsumer[] mergedCounters=mergeSpaceSavingConsumer(parallelCounters);
  TopNCounterComparisonTest.HashMapConsumer accurateCounter=new TopNCounterComparisonTest.HashMapConsumer();
  feedDataToConsumer(dataFile,accurateCounter,0,TOTAL_RECORDS);
  compareResult(mergedCounters[0],accurateCounter);
  FileUtils.forceDelete(new File(dataFile));
}
