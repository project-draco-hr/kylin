{
  Options options=new Options();
  try {
    options.addOption(OPTION_II_NAME);
    options.addOption(OPTION_HTABLE_NAME);
    parseOptions(options,args);
    String tableName=getOptionValue(OPTION_HTABLE_NAME);
    String iiName=getOptionValue(OPTION_II_NAME);
    KylinConfig config=KylinConfig.getInstanceFromEnv();
    IIManager iiManager=IIManager.getInstance(config);
    IIInstance ii=iiManager.getII(iiName);
    int sharding=ii.getDescriptor().getSharding();
    HTableDescriptor tableDesc=new HTableDescriptor(TableName.valueOf(tableName));
    HColumnDescriptor cf=new HColumnDescriptor(IIDesc.HBASE_FAMILY);
    cf.setMaxVersions(1);
    cf.setDataBlockEncoding(DataBlockEncoding.FAST_DIFF);
    tableDesc.addFamily(cf);
    tableDesc.setValue(IRealizationConstants.HTableTag,config.getMetadataUrlPrefix());
    tableDesc.setValue(HTableDescriptor.SPLIT_POLICY,DisabledRegionSplitPolicy.class.getName());
    Configuration conf=HBaseConfiguration.create(getConf());
    if (User.isHBaseSecurityEnabled(conf)) {
      tableDesc.addCoprocessor("org.apache.hadoop.hbase.security.access.SecureBulkLoadEndpoint");
    }
    DeployCoprocessorCLI.deployCoprocessor(tableDesc);
    HBaseAdmin admin=new HBaseAdmin(conf);
    if (admin.tableExists(tableName)) {
      admin.disableTable(tableName);
      admin.deleteTable(tableName);
    }
    byte[][] splitKeys=getSplits(sharding);
    if (splitKeys.length == 0)     splitKeys=null;
    admin.createTable(tableDesc,splitKeys);
    if (splitKeys != null) {
      for (int i=0; i < splitKeys.length; i++) {
        System.out.println("split key " + i + ": "+ BytesUtil.toHex(splitKeys[i]));
      }
    }
    System.out.println("create hbase table " + tableName + " done.");
    admin.close();
    return 0;
  }
 catch (  Exception e) {
    printUsage(options);
    throw e;
  }
}
