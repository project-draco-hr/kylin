{
  try {
    AbstractRestCache.setCacheUpdater(new RemoteCacheUpdater());
    Preconditions.checkArgument(args[0].equals("streaming"));
    Preconditions.checkArgument(args[1].equals("start"));
    String kafkaConfName=args[2];
    int partition=Integer.parseInt(args[3]);
    int i=4;
    BootstrapConfig bootstrapConfig=new BootstrapConfig();
    while (i < args.length) {
      String argName=args[i];
switch (argName) {
case "-oneoff":
        bootstrapConfig.setOneOff(Boolean.parseBoolean(args[i + 1]));
      break;
case "-start":
    bootstrapConfig.setStart(Long.parseLong(args[i + 1]));
  break;
case "-end":
bootstrapConfig.setEnd(Long.parseLong(args[i + 1]));
break;
default :
throw new RuntimeException("invalid argName:" + argName);
}
i+=2;
}
StreamingBootstrap.getInstance(KylinConfig.getInstanceFromEnv()).start(kafkaConfName,partition,bootstrapConfig);
}
 catch (Exception e) {
printArgsError(args);
logger.error("error start streaming",e);
System.exit(-1);
}
}
