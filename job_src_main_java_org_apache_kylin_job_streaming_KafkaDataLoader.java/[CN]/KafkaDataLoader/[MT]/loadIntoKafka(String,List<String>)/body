{
  StreamingManager streamingManager=StreamingManager.getInstance(KylinConfig.getInstanceFromEnv());
  StreamingConfig streamingConfig=streamingManager.getStreamingConfig(streamName);
  KafkaClusterConfig clusterConfig=streamingConfig.getKafkaClusterConfigs().get(0);
  String brokerList=StringUtils.join(Collections2.transform(clusterConfig.getBrokerConfigs(),new Function<BrokerConfig,String>(){
    @Nullable @Override public String apply(    BrokerConfig brokerConfig){
      return brokerConfig.getHost() + ":" + brokerConfig.getPort();
    }
  }
),",");
  Properties props=new Properties();
  props.put("metadata.broker.list",brokerList);
  props.put("serializer.class","kafka.serializer.StringEncoder");
  props.put("request.required.acks","1");
  ProducerConfig config=new ProducerConfig(props);
  Producer<String,String> producer=new Producer<String,String>(config);
  for (int i=0; i < messages.size(); ++i) {
    KeyedMessage<String,String> data=new KeyedMessage<String,String>(streamingConfig.getTopic(),String.valueOf(i),messages.get(i));
    producer.send(data);
  }
  producer.close();
}
