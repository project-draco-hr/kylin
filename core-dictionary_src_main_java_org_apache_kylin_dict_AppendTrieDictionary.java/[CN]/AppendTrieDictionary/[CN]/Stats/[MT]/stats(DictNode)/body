{
  traversePostOrderR(root,new Visitor(){
    @Override public void visit(    DictNode n,    int level){
      n.nValuesBeneath=n.isEndOfValue ? 1 : 0;
      for (      DictNode c : n.children)       n.nValuesBeneath+=c.nValuesBeneath;
    }
  }
,0);
  final Stats s=new Stats();
  final ArrayList<Integer> lenAtLvl=new ArrayList<Integer>();
  traverseR(root,new Visitor(){
    @Override public void visit(    DictNode n,    int level){
      if (n.isEndOfValue)       s.nValues++;
      s.nValueBytesPlain+=n.part.length * n.nValuesBeneath;
      s.nValueBytesCompressed+=n.part.length;
      s.mbpn_nNodes++;
      if (s.mbpn_trieDepth < level + 1)       s.mbpn_trieDepth=level + 1;
      if (n.children.size() > 0) {
        if (s.mbpn_maxFanOut < n.children.size())         s.mbpn_maxFanOut=n.children.size();
        int childLookups=n.nValuesBeneath - (n.isEndOfValue ? 1 : 0);
        s.mbpn_nChildLookups+=childLookups;
        s.mbpn_nTotalFanOut+=childLookups * n.children.size();
      }
      if (level < lenAtLvl.size())       lenAtLvl.set(level,n.part.length);
 else       lenAtLvl.add(n.part.length);
      int lenSoFar=0;
      for (int i=0; i <= level; i++)       lenSoFar+=lenAtLvl.get(i);
      if (lenSoFar > s.maxValueLength)       s.maxValueLength=lenSoFar;
    }
  }
,0);
  s.mbpn_sizeId=4;
  s.mbpn_sizeValueTotal=s.nValueBytesCompressed + s.nValues * s.mbpn_sizeId;
  s.mbpn_sizeNoValueBytes=1;
  s.mbpn_sizeChildOffset=4;
  s.mbpn_footprint=s.mbpn_sizeValueTotal + s.mbpn_nNodes * (s.mbpn_sizeNoValueBytes + s.mbpn_sizeChildOffset);
  while (true) {
    int t=s.mbpn_sizeValueTotal + s.mbpn_nNodes * (s.mbpn_sizeNoValueBytes + s.mbpn_sizeChildOffset - 1);
    if (BytesUtil.sizeForValue(t * 4) <= s.mbpn_sizeChildOffset - 1) {
      s.mbpn_sizeChildOffset--;
      s.mbpn_footprint=t;
    }
 else     break;
  }
  return s;
}
