{
  DictNode root=null;
  while (true) {
    int p=n + firstByteOffset;
    int childOffset=BytesUtil.readUnsigned(trieBytes,n,sizeChildOffset) & childOffsetMask;
    int parLen=BytesUtil.readUnsigned(trieBytes,p - 1,1);
    boolean isEndOfValue=checkFlag(n,BIT_IS_END_OF_VALUE);
    byte[] value=new byte[parLen];
    System.arraycopy(trieBytes,p,value,0,parLen);
    DictNode node=new DictNode(value,isEndOfValue);
    if (isEndOfValue) {
      int id=BytesUtil.readUnsigned(trieBytes,p + parLen,sizeOfId);
      node.id=id;
    }
    if (parent == null) {
      root=node;
    }
 else {
      parent.addChild(node);
    }
    if (childOffset != 0) {
      rebuildTrieTreeR(childOffset + headSize,node);
    }
    if (checkFlag(n,BIT_IS_LAST_CHILD)) {
      break;
    }
 else {
      n+=firstByteOffset + parLen + (isEndOfValue ? sizeOfId : 0);
    }
  }
  return root;
}
