{
  this.info=info;
  encodedColumns=new BitSet();
  for (  Integer index : dictionaryMaps.keySet()) {
    encodedColumns.set(index);
  }
  serializerMap=Maps.newHashMap();
  for (int i=0; i < info.nColumns; i++) {
    if (!encodedColumns.get(i)) {
      serializerMap.put(i,DataTypeSerializer.create(info.colTypes[i]));
    }
  }
  this.filterCS=new IFilterCodeSystem<ByteArray>(){
    @Override public boolean isNull(    ByteArray code){
      byte[] array=code.array();
      for (int i=0, j=code.offset(), n=code.length(); i < n; i++, j++) {
        if (array[j] != Dictionary.NULL)         return false;
      }
      return true;
    }
    @Override public int compare(    ByteArray code1,    ByteArray code2){
      return code1.compareTo(code2);
    }
    @Override public void serialize(    ByteArray code,    ByteBuffer buffer){
      BytesUtil.writeByteArray(code.array(),code.offset(),code.length(),buffer);
    }
    @Override public ByteArray deserialize(    ByteBuffer buffer){
      return new ByteArray(BytesUtil.readByteArray(buffer));
    }
  }
;
}
