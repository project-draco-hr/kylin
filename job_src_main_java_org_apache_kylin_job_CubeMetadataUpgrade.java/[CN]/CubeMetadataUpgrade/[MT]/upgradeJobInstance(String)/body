{
  JobInstance job=getStore().getResource(path,JobInstance.class,new JsonSerializer<JobInstance>(JobInstance.class));
  long lastModified=job.getLastModified();
  if (System.currentTimeMillis() - lastModified > 2592000000l) {
    return;
  }
  CubingJob cubingJob=new CubingJob();
  cubingJob.setId(job.getId());
  cubingJob.setName(job.getName());
  cubingJob.setCubeName(job.getRelatedCube());
  cubingJob.setSubmitter(job.getSubmitter());
  for (  JobInstance.JobStep step : job.getSteps()) {
    final AbstractExecutable executable=parseToExecutable(step);
    cubingJob.addTask(executable);
  }
  getExecutableManager().addJob(cubingJob);
  cubingJob.setStartTime(job.getExecStartTime());
  cubingJob.setEndTime(job.getExecEndTime());
  cubingJob.setMapReduceWaitTime(job.getMrWaiting());
  getExecutableManager().resetJobOutput(cubingJob.getId(),parseState(job.getStatus()),job.getStatus().toString());
  for (int i=0, size=job.getSteps().size(); i < size; ++i) {
    final JobInstance.JobStep jobStep=job.getSteps().get(i);
    final InputStream inputStream=getStore().getResource(ResourceStore.JOB_OUTPUT_PATH_ROOT + "/" + job.getId()+ "."+ i);
    String output=null;
    if (inputStream != null) {
      HashMap<String,String> job_output=JsonUtil.readValue(inputStream,HashMap.class);
      if (job_output != null) {
        output=job_output.get("output");
      }
    }
    updateJobStepOutput(jobStep,output,cubingJob.getTasks().get(i));
  }
}
