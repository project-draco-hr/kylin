{
  if (!(args != null && (args.length == 1 || args.length == 2))) {
    System.out.println("Usage: java CubeMetadataUpgrade <metadata_export_folder> <verify>; e.g, /export/kylin/meta ");
    return;
  }
  String exportFolder=args[0];
  boolean verify=false;
  if (args.length == 2 && "verify".equals(args[1])) {
    System.out.println("Only verify the metadata in folder " + exportFolder);
    verify=true;
  }
  CubeMetadataUpgrade instance=null;
  if (verify) {
    instance=new CubeMetadataUpgrade(exportFolder);
    instance.verify();
  }
 else {
    File oldMetaFolder=new File(exportFolder);
    if (!oldMetaFolder.exists()) {
      System.out.println("Provided folder doesn't exist: '" + exportFolder + "'");
      return;
    }
    if (!oldMetaFolder.isDirectory()) {
      System.out.println("Provided folder is not a directory: '" + exportFolder + "'");
      return;
    }
    String newMetadataUrl=oldMetaFolder.getAbsolutePath() + "_v2";
    try {
      FileUtils.deleteDirectory(new File(newMetadataUrl));
      FileUtils.copyDirectory(oldMetaFolder,new File(newMetadataUrl),new FileFilter(){
        @Override public boolean accept(        File pathname){
          if (pathname.getAbsolutePath().contains(ResourceStore.JOB_PATH_ROOT) || pathname.getAbsolutePath().contains(ResourceStore.JOB_OUTPUT_PATH_ROOT))           return false;
          return true;
        }
      }
);
    }
 catch (    IOException e) {
      e.printStackTrace();
    }
    instance=new CubeMetadataUpgrade(newMetadataUrl);
    instance.upgrade();
    logger.info("=================================================================");
    logger.info("Run CubeMetadataUpgrade completed;");
  }
  logger.info("=================================================================");
  if (instance.errorMsgs.size() > 0) {
    logger.info("Here are the error/warning messages, you may need check:");
    for (    String s : instance.errorMsgs) {
      logger.warn(s);
    }
  }
 else {
    logger.info("No error or warning messages; The migration is success.");
  }
}
