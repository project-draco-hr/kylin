{
  Object tupleValue=null;
  for (  TupleFilter filter : this.children) {
    if (!isConstant(filter)) {
      filter.evaluate(tuple,cs);
      tupleValue=filter.getValues().iterator().next();
    }
  }
  TblColRef tblColRef=this.getColumn();
  DataType strDataType=DataType.getType("string");
  if (tblColRef.getType() != strDataType) {
    throw new IllegalStateException("Only String type is allow in BuiltInFunction");
  }
  ByteArray valueByteArray=(ByteArray)tupleValue;
  StringSerializer serializer=new StringSerializer(strDataType);
  String value=serializer.deserialize(ByteBuffer.wrap(valueByteArray.array(),valueByteArray.offset(),valueByteArray.length()));
  try {
    if (isLikeFunction()) {
      return (Boolean)invokeFunction(value);
    }
 else {
      this.tupleValue=invokeFunction(value);
      ByteBuffer buffer=ByteBuffer.allocate(valueByteArray.length() * 2);
      serializer.serialize((String)this.tupleValue,buffer);
      this.tupleValue=new ByteArray(buffer.array(),0,buffer.position());
      return true;
    }
  }
 catch (  InvocationTargetException|IllegalAccessException e) {
    throw new RuntimeException(e);
  }
}
