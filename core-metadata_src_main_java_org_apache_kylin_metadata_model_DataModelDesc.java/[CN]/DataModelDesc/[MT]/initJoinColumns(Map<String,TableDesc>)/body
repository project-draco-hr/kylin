{
  for (  LookupDesc lookup : this.lookups) {
    lookup.setTable(lookup.getTable().toUpperCase());
    TableDesc dimTable=tables.get(lookup.getTable());
    if (dimTable == null) {
      throw new IllegalStateException("Table " + lookup.getTable() + " does not exist for "+ this);
    }
    lookup.setTableDesc(dimTable);
    this.lookupTableDescs.add(dimTable);
    JoinDesc join=lookup.getJoin();
    if (join == null)     continue;
    StringUtil.toUpperCaseArray(join.getForeignKey(),join.getForeignKey());
    StringUtil.toUpperCaseArray(join.getPrimaryKey(),join.getPrimaryKey());
    String[] pks=join.getPrimaryKey();
    TblColRef[] pkCols=new TblColRef[pks.length];
    for (int i=0; i < pks.length; i++) {
      ColumnDesc col=dimTable.findColumnByName(pks[i]);
      if (col == null) {
        throw new IllegalStateException("Can't find column " + pks[i] + " in table "+ dimTable.getIdentity());
      }
      TblColRef colRef=new TblColRef(col);
      pks[i]=colRef.getName();
      pkCols[i]=colRef;
    }
    join.setPrimaryKeyColumns(pkCols);
    String[] fks=join.getForeignKey();
    TblColRef[] fkCols=new TblColRef[fks.length];
    for (int i=0; i < fks.length; i++) {
      ColumnDesc col=factTableDesc.findColumnByName(fks[i]);
      if (col == null) {
        throw new IllegalStateException("Can't find column " + fks[i] + " in table "+ this.getFactTable());
      }
      TblColRef colRef=new TblColRef(col);
      fks[i]=colRef.getName();
      fkCols[i]=colRef;
    }
    join.setForeignKeyColumns(fkCols);
    if (pkCols.length != fkCols.length) {
      throw new IllegalStateException("Primary keys(" + lookup.getTable() + ")"+ Arrays.toString(pks)+ " are not consistent with Foreign keys("+ this.getFactTable()+ ") "+ Arrays.toString(fks));
    }
    for (int i=0; i < fkCols.length; i++) {
      if (!fkCols[i].getDatatype().equals(pkCols[i].getDatatype())) {
        final KylinConfig kylinConfig=KylinConfig.getInstanceFromEnv();
        final String msg="Primary key " + lookup.getTable() + "."+ pkCols[i].getName()+ "."+ pkCols[i].getDatatype()+ " are not consistent with Foreign key "+ this.getFactTable()+ "."+ fkCols[i].getName()+ "."+ fkCols[i].getDatatype();
        if (kylinConfig.getTableJoinTypeCheck() == true) {
          throw new IllegalStateException(msg);
        }
 else {
          logger.warn(msg);
        }
      }
    }
  }
}
