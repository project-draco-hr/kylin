{
  Collection<? extends TupleFilter> toCheck;
  if (filter instanceof CompareTupleFilter) {
    toCheck=Collections.singleton(filter);
  }
 else   if (filter instanceof LogicalTupleFilter && filter.getOperator() == FilterOperatorEnum.AND) {
    toCheck=filter.getChildren();
  }
 else {
    return (Set<TblColRef>)Collections.EMPTY_SET;
  }
  Set<TblColRef> result=Sets.newHashSet();
  for (  TupleFilter f : toCheck) {
    if (f instanceof CompareTupleFilter) {
      CompareTupleFilter compFilter=(CompareTupleFilter)f;
      if (compFilter.getOperator() == FilterOperatorEnum.EQ && compFilter.getValues().size() == 1 && compFilter.getColumn() != null) {
        result.add(compFilter.getColumn());
      }
    }
  }
  Set<TblColRef> resultD=Sets.newHashSet();
  for (  TblColRef col : result) {
    if (cubeDesc.isExtendedColumn(col)) {
      throw new CubeDesc.CannotFilterExtendedColumnException(col);
    }
    if (cubeDesc.isDerived(col)) {
      DeriveInfo hostInfo=cubeDesc.getHostInfo(col);
      if (hostInfo.isOneToOne) {
        for (        TblColRef hostCol : hostInfo.columns) {
          resultD.add(hostCol);
        }
      }
    }
 else {
      resultD.add(col);
    }
  }
  return resultD;
}
