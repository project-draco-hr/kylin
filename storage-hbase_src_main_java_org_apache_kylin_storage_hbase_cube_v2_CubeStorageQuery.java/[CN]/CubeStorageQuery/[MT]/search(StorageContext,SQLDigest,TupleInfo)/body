{
  checkAndRewriteTopN(context,sqlDigest,returnTupleInfo);
  Collection<TblColRef> groups=sqlDigest.groupbyColumns;
  TblColRef topNCol=extractTopNCol(groups);
  if (topNCol != null)   groups.remove(topNCol);
  TupleFilter filter=sqlDigest.filter;
  Set<TblColRef> dimensions=new LinkedHashSet<TblColRef>();
  Set<FunctionDesc> metrics=new LinkedHashSet<FunctionDesc>();
  buildDimensionsAndMetrics(sqlDigest,dimensions,metrics);
  Set<TblColRef> filterDims=Sets.newHashSet(dimensions);
  filterDims.removeAll(groups);
  Set<TblColRef> derivedPostAggregation=Sets.newHashSet();
  Set<TblColRef> groupsD=expandDerived(groups,derivedPostAggregation);
  Set<TblColRef> filterDimsD=expandDerived(filterDims,derivedPostAggregation);
  filterDimsD.removeAll(groupsD);
  derivedPostAggregation.removeAll(groups);
  Set<TblColRef> dimensionsD=new LinkedHashSet<TblColRef>();
  dimensionsD.addAll(groupsD);
  dimensionsD.addAll(filterDimsD);
  Cuboid cuboid=identifyCuboid(dimensionsD);
  context.setCuboid(cuboid);
  Set<TblColRef> singleValuesD=findSingleValueColumns(filter);
  boolean isExactAggregation=isExactAggregation(cuboid,groups,filterDimsD,singleValuesD,derivedPostAggregation);
  context.setExactAggregation(isExactAggregation);
  if (isExactAggregation) {
    metrics=replaceHolisticCountDistinct(metrics);
  }
  TupleFilter filterD=translateDerived(filter,groupsD);
  setThreshold(dimensionsD,metrics,context);
  setLimit(filter,context);
  List<CubeSegmentScanner> scanners=Lists.newArrayList();
  for (  CubeSegment cubeSeg : cubeInstance.getSegments(SegmentStatusEnum.READY)) {
    CubeSegmentScanner scanner;
    try {
      scanner=new CubeSegmentScanner(cubeSeg,cuboid,dimensionsD,groupsD,metrics,filterD,!isExactAggregation);
    }
 catch (    NotEnoughGTInfoException e) {
      logger.info("Cannot construct Segment {}'s GTInfo, this may due to empty segment or broken metadata");
      continue;
    }
    scanners.add(scanner);
  }
  if (scanners.isEmpty())   return ITupleIterator.EMPTY_TUPLE_ITERATOR;
  if (topNCol != null)   return new SequentialCubeTopNTupleIterator(scanners,cuboid,dimensionsD,topNCol,metrics,returnTupleInfo,context);
  return new SequentialCubeTupleIterator(scanners,cuboid,dimensionsD,metrics,returnTupleInfo,context);
}
