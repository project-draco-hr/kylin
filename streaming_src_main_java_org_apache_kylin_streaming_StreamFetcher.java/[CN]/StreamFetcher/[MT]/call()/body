{
  try {
    MicroStreamBatch microStreamBatch=null;
    while (true) {
      if (microStreamBatch == null) {
        microStreamBatch=new MicroStreamBatch(partitionId);
      }
      StreamMessage streamMessage=peek(streamMessageQueue,60000);
      if (streamMessage == null) {
        logger.info("The stream queue is drained, current available stream count: " + microStreamBatch.size());
        return microStreamBatch;
      }
      if (streamMessage.getOffset() < 0) {
        logger.warn("streaming encountered EOF, stop building");
        return null;
      }
      microStreamBatch.incRawMessageCount();
      final ParsedStreamMessage parsedStreamMessage=streamParser.parse(streamMessage);
      if (parsedStreamMessage == null) {
        throw new RuntimeException("parsedStreamMessage of " + new String(streamMessage.getRawData()) + " is null");
      }
      final BatchCondition.Result result=condition.apply(parsedStreamMessage);
      if (parsedStreamMessage.isAccepted()) {
        if (result == BatchCondition.Result.ACCEPT) {
          streamMessageQueue.take();
          microStreamBatch.add(parsedStreamMessage);
        }
 else         if (result == BatchCondition.Result.LAST_ACCEPT_FOR_BATCH) {
          streamMessageQueue.take();
          microStreamBatch.add(parsedStreamMessage);
          break;
        }
 else         if (result == BatchCondition.Result.DISCARD) {
          streamMessageQueue.take();
        }
 else         if (result == BatchCondition.Result.REJECT) {
          logger.info("Partition :" + partitionId + " rejecting message at "+ parsedStreamMessage.getOffset());
          break;
        }
      }
 else {
        streamMessageQueue.take();
      }
    }
    Preconditions.checkArgument(microStreamBatch != null,"microStreamBatch is null!");
    logger.info(String.format("Partition %d contributing %d filtered messages out from %d raw messages",partitionId,microStreamBatch.getFilteredMessageCount(),microStreamBatch.getRawMessageCount()));
    return microStreamBatch;
  }
 catch (  Exception e) {
    logger.error("build stream error, stop building",e);
    throw new RuntimeException("build stream error, stop building",e);
  }
 finally {
    logger.info("partition {} sign off",partitionId);
    countDownLatch.countDown();
  }
}
