{
  CapabilityResult result=new CapabilityResult();
  result.capable=false;
  boolean isJoinMatch=JoinChecker.isJoinMatch(digest.joinDescs,cube);
  if (!isJoinMatch) {
    logger.info("Exclude cube " + cube.getName() + " because unmatched joins");
    return result;
  }
  Collection<TblColRef> dimensionColumns=getDimensionColumns(digest);
  Collection<FunctionDesc> aggrFunctions=digest.aggregations;
  Collection<TblColRef> unmatchedDimensions=unmatchedDimensions(dimensionColumns,cube);
  Collection<FunctionDesc> unmatchedAggregations=unmatchedAggregations(aggrFunctions,cube);
  tryCustomMeasureTypes(unmatchedDimensions,unmatchedAggregations,digest,cube,result);
  if (cube.getDescriptor().getFactTable().equals(digest.factTable)) {
    if (!unmatchedAggregations.isEmpty()) {
      tryDimensionAsMeasures(unmatchedAggregations,result,cube.getDescriptor().listDimensionColumnsIncludingDerived());
    }
  }
 else {
    if (cube.getSegments().get(0).getSnapshots().containsKey(digest.factTable)) {
      TableDesc tableDesc=MetadataManager.getInstance(KylinConfig.getInstanceFromEnv()).getTableDesc(digest.factTable);
      Set<TblColRef> dimCols=Sets.newHashSet();
      for (      ColumnDesc columnDesc : tableDesc.getColumns()) {
        dimCols.add(columnDesc.getRef());
      }
      if (!unmatchedAggregations.isEmpty()) {
        Iterator<FunctionDesc> itr=unmatchedAggregations.iterator();
        while (itr.hasNext()) {
          FunctionDesc functionDesc=itr.next();
          if (dimCols.containsAll(functionDesc.getParameter().getColRefs())) {
            itr.remove();
          }
        }
      }
      tryDimensionAsMeasures(Lists.newArrayList(aggrFunctions),result,dimCols);
      if (!unmatchedDimensions.isEmpty()) {
        unmatchedDimensions.removeAll(dimCols);
      }
    }
 else {
      logger.info("cube {} does not touch lookup table {} at all",cube.getName(),digest.factTable);
    }
  }
  if (!unmatchedDimensions.isEmpty()) {
    logger.info("Exclude cube " + cube.getName() + " because unmatched dimensions");
    return result;
  }
  if (!unmatchedAggregations.isEmpty()) {
    logger.info("Exclude cube " + cube.getName() + " because unmatched aggregations");
    return result;
  }
  if (cube.getStorageType() == IStorageAware.ID_HBASE && MassInTupleFilter.containsMassInTupleFilter(digest.filter)) {
    logger.info("Exclude cube " + cube.getName() + " because only v2 storage + v2 query engine supports massin");
    return result;
  }
  if (digest.isRawQuery && cube.getFactTable().equals(digest.factTable)) {
    result.influences.add(new CapabilityInfluence(){
      @Override public double suggestCostMultiplier(){
        return 100;
      }
    }
);
  }
  result.capable=true;
  return result;
}
