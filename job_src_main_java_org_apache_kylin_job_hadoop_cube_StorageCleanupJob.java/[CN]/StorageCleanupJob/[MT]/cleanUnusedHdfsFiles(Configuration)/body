{
  JobEngineConfig engineConfig=new JobEngineConfig(KylinConfig.getInstanceFromEnv());
  CubeManager cubeMgr=CubeManager.getInstance(KylinConfig.getInstanceFromEnv());
  FileSystem fs=FileSystem.get(conf);
  List<String> allHdfsPathsNeedToBeDeleted=new ArrayList<String>();
  FileStatus[] fStatus=fs.listStatus(new Path(KylinConfig.getInstanceFromEnv().getHdfsWorkingDirectory()));
  for (  FileStatus status : fStatus) {
    String path=status.getPath().getName();
    if (path.startsWith(JobInstance.JOB_WORKING_DIR_PREFIX)) {
      String kylinJobPath=engineConfig.getHdfsWorkingDirectory() + path;
      allHdfsPathsNeedToBeDeleted.add(kylinJobPath);
    }
  }
  List<String> allJobs=executableManager.getAllJobIds();
  for (  String jobId : allJobs) {
    final ExecutableState state=executableManager.getOutput(jobId).getState();
    if (!state.isFinalState()) {
      String path=JobInstance.getJobWorkingDir(jobId,engineConfig.getHdfsWorkingDirectory());
      allHdfsPathsNeedToBeDeleted.remove(path);
      logger.info("Remove " + path + " from deletion list, as the path belongs to job "+ jobId+ " with status "+ state);
    }
  }
  for (  CubeInstance cube : cubeMgr.listAllCubes()) {
    for (    CubeSegment seg : cube.getSegments()) {
      String jobUuid=seg.getLastBuildJobID();
      if (jobUuid != null && jobUuid.equals("") == false) {
        String path=JobInstance.getJobWorkingDir(jobUuid,engineConfig.getHdfsWorkingDirectory());
        allHdfsPathsNeedToBeDeleted.remove(path);
        logger.info("Remove " + path + " from deletion list, as the path belongs to segment "+ seg+ " of cube "+ cube.getName());
      }
    }
  }
  if (delete == true) {
    for (    String hdfsPath : allHdfsPathsNeedToBeDeleted) {
      logger.info("Deleting hdfs path " + hdfsPath);
      Path p=new Path(hdfsPath);
      if (fs.exists(p) == true) {
        fs.delete(p,true);
        logger.info("Deleted hdfs path " + hdfsPath);
      }
 else {
        logger.info("Hdfs path " + hdfsPath + "does not exist");
      }
    }
  }
 else {
    System.out.println("--------------- HDFS Path To Be Deleted ---------------");
    for (    String hdfsPath : allHdfsPathsNeedToBeDeleted) {
      System.out.println(hdfsPath);
    }
    System.out.println("-------------------------------------------------------");
  }
}
