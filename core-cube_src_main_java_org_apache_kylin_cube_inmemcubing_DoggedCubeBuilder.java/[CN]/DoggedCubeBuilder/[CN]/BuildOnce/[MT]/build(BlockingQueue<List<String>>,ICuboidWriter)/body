{
  final List<SplitThread> splits=new ArrayList<SplitThread>();
  final Merger merger=new Merger();
  long start=System.currentTimeMillis();
  logger.info("Dogged Cube Build start");
  try {
    SplitThread last=null;
    boolean eof=false;
    while (!eof) {
      if (last != null && shouldCutSplit(splits)) {
        cutSplit(last);
        last=null;
      }
      checkException(splits);
      if (last == null) {
        last=new SplitThread();
        splits.add(last);
        last.start();
        logger.info("Split #" + splits.size() + " kickoff");
      }
      eof=feedSomeInput(input,last,unitRows);
    }
    for (    SplitThread split : splits) {
      split.join();
    }
    checkException(splits);
    logger.info("Dogged Cube Build splits complete, took " + (System.currentTimeMillis() - start) + " ms");
    merger.mergeAndOutput(splits,output);
  }
 catch (  Throwable e) {
    logger.error("Dogged Cube Build error",e);
    if (e instanceof Error)     throw (Error)e;
 else     if (e instanceof RuntimeException)     throw (RuntimeException)e;
 else     throw new IOException(e);
  }
 finally {
    output.close();
    closeGirdTables(splits);
    logger.info("Dogged Cube Build end, totally took " + (System.currentTimeMillis() - start) + " ms");
    ensureExit(splits);
    logger.info("Dogged Cube Build return");
  }
}
