{
  if (nameToNodeMap != null && qualified.prefixLength == 1) {
    RexNode node=nameToNodeMap.get(qualified.identifier.names.get(0));
    if (node == null) {
      throw Util.newInternal("Unknown identifier '" + qualified.identifier + "' encountered while expanding expression");
    }
    return Pair.of(node,null);
  }
  int[] offsets={-1};
  final SqlValidatorScope[] ancestorScopes={null};
  SqlValidatorNamespace foundNs=scope.resolve(qualified.prefix(),ancestorScopes,offsets);
  if (foundNs == null) {
    return null;
  }
  SqlValidatorScope ancestorScope=ancestorScopes[0];
  boolean isParent=ancestorScope != scope;
  if ((inputs != null) && !isParent) {
    int offset=offsets[0];
    final LookupContext rels=new LookupContext(this,inputs,systemFieldList.size());
    final RexNode node=lookup(offset,rels);
    if (node == null) {
      return null;
    }
 else {
      return Pair.of(node,null);
    }
  }
 else {
    DeferredLookup lookup=new DeferredLookup(this,qualified.identifier.names.get(0));
    final CorrelationId correlId=cluster.createCorrel();
    mapCorrelToDeferred.put(correlId,lookup);
    if (offsets[0] < 0) {
      return Pair.of(rexBuilder.makeCorrel(foundNs.getRowType(),correlId),null);
    }
 else {
      final RelDataTypeFactory.FieldInfoBuilder builder=typeFactory.builder();
      final ListScope ancestorScope1=(ListScope)ancestorScopes[0];
      final ImmutableMap.Builder<String,Integer> fields=ImmutableMap.builder();
      int i=0;
      int offset=0;
      for (      SqlValidatorNamespace c : ancestorScope1.getChildren()) {
        builder.addAll(c.getRowType().getFieldList());
        if (i == offsets[0]) {
          for (          RelDataTypeField field : c.getRowType().getFieldList()) {
            fields.put(field.getName(),field.getIndex() + offset);
          }
        }
        ++i;
        offset+=c.getRowType().getFieldCount();
      }
      final RexNode c=rexBuilder.makeCorrel(builder.uniquify().build(),correlId);
      return Pair.<RexNode,Map<String,Integer>>of(c,fields.build());
    }
  }
}
