{
  final SqlKind kind=query.getKind();
switch (kind) {
case SELECT:
    return RelRoot.of(convertSelect((SqlSelect)query,top),kind);
case INSERT:
  return RelRoot.of(convertInsert((SqlInsert)query),kind);
case DELETE:
return RelRoot.of(convertDelete((SqlDelete)query),kind);
case UPDATE:
return RelRoot.of(convertUpdate((SqlUpdate)query),kind);
case MERGE:
return RelRoot.of(convertMerge((SqlMerge)query),kind);
case UNION:
case INTERSECT:
case EXCEPT:
return RelRoot.of(convertSetOp((SqlCall)query),kind);
case WITH:
return convertWith((SqlWith)query,top);
case VALUES:
return RelRoot.of(convertValues((SqlCall)query,targetRowType),kind);
default :
throw Util.newInternal("not a query: " + query);
}
}
