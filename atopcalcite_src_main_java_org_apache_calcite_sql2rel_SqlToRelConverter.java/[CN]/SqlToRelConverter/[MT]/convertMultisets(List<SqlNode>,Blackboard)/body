{
  final List<Object> joinList=new ArrayList<>();
  List<SqlNode> lastList=new ArrayList<>();
  for (int i=0; i < operands.size(); i++) {
    SqlNode operand=operands.get(i);
    if (!(operand instanceof SqlCall)) {
      lastList.add(operand);
      continue;
    }
    final SqlCall call=(SqlCall)operand;
    final RelNode input;
switch (call.getKind()) {
case MULTISET_VALUE_CONSTRUCTOR:
case ARRAY_VALUE_CONSTRUCTOR:
      final SqlNodeList list=new SqlNodeList(call.getOperandList(),call.getParserPosition());
    CollectNamespace nss=(CollectNamespace)validator.getNamespace(call);
  Blackboard usedBb;
if (null != nss) {
  usedBb=createBlackboard(nss.getScope(),null,false);
}
 else {
  usedBb=createBlackboard(new ListScope(bb.scope){
    public SqlNode getNode(){
      return call;
    }
  }
,null,false);
}
RelDataType multisetType=validator.getValidatedNodeType(call);
validator.setValidatedNodeType(list,multisetType.getComponentType());
input=convertQueryOrInList(usedBb,list,null);
break;
case MULTISET_QUERY_CONSTRUCTOR:
case ARRAY_QUERY_CONSTRUCTOR:
final RelRoot root=convertQuery(call.operand(0),false,true);
input=root.rel;
break;
default :
lastList.add(operand);
continue;
}
if (lastList.size() > 0) {
joinList.add(lastList);
}
lastList=new ArrayList<>();
Collect collect=new Collect(cluster,cluster.traitSetOf(Convention.NONE),input,validator.deriveAlias(call,i));
joinList.add(collect);
}
if (joinList.size() == 0) {
joinList.add(lastList);
}
for (int i=0; i < joinList.size(); i++) {
Object o=joinList.get(i);
if (o instanceof List) {
@SuppressWarnings("unchecked") List<SqlNode> projectList=(List<SqlNode>)o;
final List<RexNode> selectList=new ArrayList<>();
final List<String> fieldNameList=new ArrayList<>();
for (int j=0; j < projectList.size(); j++) {
SqlNode operand=projectList.get(j);
selectList.add(bb.convertExpression(operand));
fieldNameList.add(SqlUtil.deriveAliasFromOrdinal(j));
}
RelNode projRel=RelOptUtil.createProject(LogicalValues.createOneRow(cluster),selectList,fieldNameList);
joinList.set(i,projRel);
}
}
RelNode ret=(RelNode)joinList.get(0);
for (int i=1; i < joinList.size(); i++) {
RelNode relNode=(RelNode)joinList.get(i);
ret=RelFactories.DEFAULT_JOIN_FACTORY.createJoin(ret,relNode,rexBuilder.makeLiteral(true),ImmutableSet.<CorrelationId>of(),JoinRelType.INNER,false);
}
return ret;
}
