{
  SqlCall call=(SqlCall)node;
  SqlCall aggCall=call.operand(0);
  SqlNode windowOrRef=call.operand(1);
  final SqlWindow window=validator.resolveWindow(windowOrRef,bb.scope,true);
  if (aggCall.getOperator() == SqlStdOperatorTable.ROW_NUMBER) {
    window.setLowerBound(SqlWindow.createUnboundedPreceding(SqlParserPos.ZERO));
    window.setUpperBound(SqlWindow.createCurrentRow(SqlParserPos.ZERO));
    window.setRows(SqlLiteral.createBoolean(true,SqlParserPos.ZERO));
  }
  final SqlNodeList partitionList=window.getPartitionList();
  final ImmutableList.Builder<RexNode> partitionKeys=ImmutableList.builder();
  for (  SqlNode partition : partitionList) {
    partitionKeys.add(bb.convertExpression(partition));
  }
  RexNode lowerBound=bb.convertExpression(window.getLowerBound());
  RexNode upperBound=bb.convertExpression(window.getUpperBound());
  SqlNodeList orderList=window.getOrderList();
  if ((orderList.size() == 0) && !window.isRows()) {
    orderList=bb.scope.getOrderList();
    if (orderList == null) {
      throw new AssertionError("Relation should have sort key for implicit ORDER BY");
    }
  }
  final ImmutableList.Builder<RexFieldCollation> orderKeys=ImmutableList.builder();
  final Set<SqlKind> flags=EnumSet.noneOf(SqlKind.class);
  for (  SqlNode order : orderList) {
    flags.clear();
    RexNode e=bb.convertSortExpression(order,flags);
    orderKeys.add(new RexFieldCollation(e,flags));
  }
  try {
    Util.permAssert(bb.window == null,"already in window agg mode");
    bb.window=window;
    RexNode rexAgg=exprConverter.convertCall(bb,aggCall);
    rexAgg=rexBuilder.ensureType(validator.getValidatedNodeType(call),rexAgg,false);
    final RexShuttle visitor=new HistogramShuttle(partitionKeys.build(),orderKeys.build(),RexWindowBound.create(window.getLowerBound(),lowerBound),RexWindowBound.create(window.getUpperBound(),upperBound),window);
    return rexAgg.accept(visitor);
  }
  finally {
    bb.window=null;
  }
}
