{
  final ImmutableList.Builder<ImmutableList<RexLiteral>> tupleList=ImmutableList.builder();
  final RelDataType rowType;
  if (targetRowType != null) {
    rowType=targetRowType;
  }
 else {
    rowType=SqlTypeUtil.promoteToRowType(typeFactory,validator.getValidatedNodeType(rowList),null);
  }
  final List<RelNode> unionInputs=new ArrayList<>();
  for (  SqlNode node : rows) {
    SqlBasicCall call;
    if (isRowConstructor(node)) {
      call=(SqlBasicCall)node;
      ImmutableList.Builder<RexLiteral> tuple=ImmutableList.builder();
      for (      Ord<SqlNode> operand : Ord.zip(call.operands)) {
        RexLiteral rexLiteral=convertLiteralInValuesList(operand.e,bb,rowType,operand.i);
        if ((rexLiteral == null) && allowLiteralsOnly) {
          return null;
        }
        if ((rexLiteral == null) || !shouldCreateValuesRel) {
          tuple=null;
          break;
        }
        tuple.add(rexLiteral);
      }
      if (tuple != null) {
        tupleList.add(tuple.build());
        continue;
      }
    }
 else {
      RexLiteral rexLiteral=convertLiteralInValuesList(node,bb,rowType,0);
      if ((rexLiteral != null) && shouldCreateValuesRel) {
        tupleList.add(ImmutableList.of(rexLiteral));
        continue;
      }
 else {
        if ((rexLiteral == null) && allowLiteralsOnly) {
          return null;
        }
      }
      call=(SqlBasicCall)SqlStdOperatorTable.ROW.createCall(SqlParserPos.ZERO,node);
    }
    unionInputs.add(convertRowConstructor(bb,call));
  }
  LogicalValues values=LogicalValues.create(cluster,rowType,tupleList.build());
  RelNode resultRel;
  if (unionInputs.isEmpty()) {
    resultRel=values;
  }
 else {
    if (!values.getTuples().isEmpty()) {
      unionInputs.add(values);
    }
    resultRel=LogicalUnion.create(unionInputs,true);
  }
  leaves.add(resultRel);
  return resultRel;
}
