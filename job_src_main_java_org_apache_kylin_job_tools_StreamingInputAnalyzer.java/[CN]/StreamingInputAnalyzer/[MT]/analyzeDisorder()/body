{
  final List<BlockingQueue<StreamMessage>> allPartitionData=consumeAll(OffsetRequest.EarliestTime());
  final List<Long> wallClocks=Lists.newArrayList();
  final List<Long> wallOffset=Lists.newArrayList();
  final List<Long> maxDisorderTime=Lists.newArrayList();
  final List<Long> maxDisorderOffset=Lists.newArrayList();
  final List<Long> processedMessages=Lists.newArrayList();
  for (int i=0; i < allPartitionData.size(); i++) {
    wallClocks.add(0L);
    wallOffset.add(0L);
    maxDisorderTime.add(0L);
    maxDisorderOffset.add(0L);
    processedMessages.add(0L);
  }
  ExecutorService executorService=Executors.newFixedThreadPool(allPartitionData.size(),new DaemonThreadFactory());
  final CountDownLatch countDownLatch=new CountDownLatch(allPartitionData.size());
  for (int i=0; i < allPartitionData.size(); ++i) {
    final int index=i;
    executorService.submit(new Runnable(){
      @Override public void run(){
        try {
          while (true) {
            StreamMessage message=allPartitionData.get(index).poll(60,TimeUnit.SECONDS);
            if (message == null) {
              System.out.println(String.format("Thread %d is exiting",index));
              break;
            }
            ParsedStreamMessage parsedStreamMessage=parser.parse(message);
            long t=parsedStreamMessage.getTimestamp();
            long offset=parsedStreamMessage.getOffset();
            if (t < wallClocks.get(index)) {
              maxDisorderTime.set(index,Math.max(wallClocks.get(index) - t,maxDisorderTime.get(index)));
              maxDisorderOffset.set(index,Math.max(offset - wallOffset.get(index),maxDisorderOffset.get(index)));
            }
 else {
              wallClocks.set(index,t);
              wallOffset.set(index,offset);
            }
            processedMessages.set(index,processedMessages.get(index) + 1);
            if (processedMessages.get(index) % 10000 == 1) {
              System.out.println(String.format("Thread %d processed %d messages. Max disorder time is %d , max disorder offset is %d",index,processedMessages.get(index),maxDisorderTime.get(index),maxDisorderOffset.get(index)));
            }
          }
          System.out.println(String.format("Thread %d finishes after %d messages. Max disorder time is %d , max disorder offset is %d",index,processedMessages.get(index),maxDisorderTime.get(index),maxDisorderOffset.get(index)));
          countDownLatch.countDown();
        }
 catch (        InterruptedException e) {
          e.printStackTrace();
        }
      }
    }
);
  }
  countDownLatch.await();
}
