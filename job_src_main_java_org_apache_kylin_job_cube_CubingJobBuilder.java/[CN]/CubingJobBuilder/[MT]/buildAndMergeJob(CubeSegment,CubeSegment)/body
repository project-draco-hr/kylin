{
  checkPreconditions(appendSegment,mergeSegment);
  CubingJob result=initialJob(mergeSegment,"BUILD");
  final String jobId=result.getId();
  final String appendRootPath=getJobWorkingDir(jobId) + "/" + appendSegment.getCubeInstance().getName()+ "/append_cuboid/";
  final String mergedRootPath=getJobWorkingDir(jobId) + "/" + appendSegment.getCubeInstance().getName()+ "/cuboid/";
  addCubingSteps(appendSegment,appendRootPath,result);
  result.addTask(createUpdateCubeInfoAfterBuildStep(appendSegment,jobId));
  List<CubeSegment> mergingSegments=mergeSegment.getCubeInstance().getMergingSegments(mergeSegment);
  Preconditions.checkState(mergingSegments.size() > 1,"there should be more than 2 segments to merge");
  List<String> mergingSegmentIds=Lists.newArrayList();
  List<String> mergingCuboidPaths=Lists.newArrayList();
  List<String> mergingHTables=Lists.newArrayList();
  for (  CubeSegment merging : mergingSegments) {
    mergingSegmentIds.add(merging.getUuid());
    mergingHTables.add(merging.getStorageLocationIdentifier());
    if (merging.equals(appendSegment))     mergingCuboidPaths.add(appendRootPath + "*");
 else     mergingCuboidPaths.add(getPathToMerge(merging));
  }
  if (this.inMemoryCubing()) {
    addMergeFromHBaseSteps(mergeSegment,mergingSegmentIds,mergingHTables,mergedRootPath,result);
    result.addTask(createBulkLoadStep(mergeSegment,result.getId()));
  }
 else {
    addMergeSteps(mergeSegment,mergingSegmentIds,mergingCuboidPaths,mergedRootPath,result);
    addHTableSteps(mergeSegment,mergedRootPath,result);
  }
  result.addTask(createUpdateCubeInfoAfterMergeStep(mergeSegment,mergingSegmentIds,jobId));
  result.addTask(createGarbageCollectionStep(mergeSegment,mergingHTables,null));
  return result;
}
