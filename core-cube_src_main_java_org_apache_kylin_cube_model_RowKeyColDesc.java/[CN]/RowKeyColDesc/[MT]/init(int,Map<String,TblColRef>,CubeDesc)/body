{
  column=column.toUpperCase();
  bitIndex=index;
  colRef=colNameAbbr.get(column);
  if (colRef == null) {
    throw new IllegalArgumentException("Cannot find rowkey column " + column + " in cube "+ cubeDesc);
  }
  Preconditions.checkState(StringUtils.isNotEmpty(this.encoding));
  Object[] encodingConf=DimensionEncoding.parseEncodingConf(this.encoding);
  encodingName=(String)encodingConf[0];
  encodingArgs=(String[])encodingConf[1];
  if (!DimensionEncodingFactory.isVaildEncoding(this.encodingName))   throw new IllegalArgumentException("Not supported row key col encoding: '" + this.encoding + "'");
  DataType type=colRef.getType();
  if (DictionaryDimEnc.ENCODING_NAME.equals(encodingName)) {
    if (type.isDate()) {
      encoding=encodingName=DateDimEnc.ENCODING_NAME;
    }
    if (type.isTime() || type.isTimestamp() || type.isDatetime()) {
      encoding=encodingName=TimeDimEnc.ENCODING_NAME;
    }
  }
  if (DateDimEnc.ENCODING_NAME.equals(encodingName) && type.isDate() == false)   throw new IllegalArgumentException(colRef + " type is " + type+ " and cannot apply date encoding");
  if (TimeDimEnc.ENCODING_NAME.equals(encodingName) && type.isTime() == false)   throw new IllegalArgumentException(colRef + " type is " + type+ " and cannot apply time encoding");
}
