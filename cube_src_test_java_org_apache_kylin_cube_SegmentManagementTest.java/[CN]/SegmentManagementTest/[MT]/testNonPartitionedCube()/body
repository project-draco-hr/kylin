{
  CubeDescManager cubeDescMgr=getCubeDescManager();
  CubeDesc desc=cubeDescMgr.getCubeDesc("test_kylin_cube_without_slr_desc");
  createNewCube(desc);
  SimpleDateFormat f=new SimpleDateFormat("yyyy-MM-dd");
  f.setTimeZone(TimeZone.getTimeZone("GMT"));
  long dateEnd=f.parse("2013-11-12").getTime();
  CubeInstance cubeInstance=cubeMgr.getCube("a_whole_new_cube");
  assertEquals(RealizationStatusEnum.DISABLED,cubeInstance.getStatus());
  assertEquals(0,cubeInstance.getSegments().size());
  assertEquals(0,cubeInstance.getBuildingSegments().size());
  assertEquals(0,cubeInstance.getAllocatedEndDate());
  System.out.println("Initial Build");
  CubeSegment initialSegment=cubeMgr.appendSegments(cubeInstance,dateEnd);
  System.out.println(JsonUtil.writeValueAsIndentString(cubeInstance));
  assertEquals(RealizationStatusEnum.DISABLED,cubeInstance.getStatus());
  assertEquals(SegmentStatusEnum.NEW,cubeInstance.getBuildingSegments().get(0).getStatus());
  assertEquals(1,cubeInstance.getSegments().size());
  assertEquals(0,cubeInstance.getSegments(SegmentStatusEnum.READY).size());
  assertEquals(1,cubeInstance.getBuildingSegments().size());
  assertEquals(0,cubeInstance.getRebuildingSegments().size());
  assertTrue("".equals(initialSegment.getStorageLocationIdentifier()) == false);
  assertEquals("FULL_BUILD",initialSegment.getName());
  assertEquals(desc.getModel().getPartitionDesc().getPartitionDateStart(),cubeInstance.getAllocatedStartDate());
  assertEquals(0,cubeInstance.getAllocatedEndDate());
  System.out.println("Initial Build Success");
  cubeMgr.updateSegmentOnJobSucceed(cubeInstance,CubeBuildTypeEnum.BUILD,initialSegment.getName(),"job_5",System.currentTimeMillis(),111L,222L,333L);
  assertEquals(RealizationStatusEnum.READY,cubeInstance.getStatus());
  assertEquals(1,cubeInstance.getSegments(SegmentStatusEnum.READY).size());
  assertEquals(0,cubeInstance.getBuildingSegments().size());
  assertEquals(0,cubeInstance.getRebuildingSegments().size());
  assertEquals(0,cubeInstance.getAllocatedStartDate());
  assertEquals(0,cubeInstance.getAllocatedEndDate());
  System.out.println(JsonUtil.writeValueAsIndentString(cubeInstance));
  System.out.println("Rebuild Segment");
  CubeSegment rebuildSegment=cubeMgr.appendSegments(cubeInstance,1386806400000L);
  System.out.println(JsonUtil.writeValueAsIndentString(cubeInstance));
  assertEquals(RealizationStatusEnum.READY,cubeInstance.getStatus());
  assertEquals(SegmentStatusEnum.NEW,cubeInstance.getBuildingSegments().get(0).getStatus());
  assertEquals(1,cubeInstance.getSegments(SegmentStatusEnum.READY).size());
  assertEquals(1,cubeInstance.getSegments(SegmentStatusEnum.NEW).size());
  assertEquals(1,cubeInstance.getBuildingSegments().size());
  assertEquals(1,cubeInstance.getRebuildingSegments().size());
  assertEquals(0,cubeInstance.getAllocatedStartDate());
  assertEquals(0,cubeInstance.getAllocatedEndDate());
  System.out.println("Rebuild Success");
  cubeMgr.updateSegmentOnJobSucceed(cubeInstance,CubeBuildTypeEnum.BUILD,rebuildSegment.getName(),"job_6",System.currentTimeMillis(),111,222,333);
  assertEquals(RealizationStatusEnum.READY,cubeInstance.getStatus());
  assertEquals(1,cubeInstance.getSegments().size());
  assertEquals(1,cubeInstance.getSegments(SegmentStatusEnum.READY).size());
  assertEquals(0,cubeInstance.getBuildingSegments().size());
  assertEquals(0,cubeInstance.getRebuildingSegments().size());
  assertEquals(0,cubeInstance.getAllocatedStartDate());
  assertEquals(0,cubeInstance.getAllocatedEndDate());
  assertEquals("job_6",cubeInstance.getSegments().get(0).getLastBuildJobID());
  System.out.println(JsonUtil.writeValueAsIndentString(cubeInstance));
}
