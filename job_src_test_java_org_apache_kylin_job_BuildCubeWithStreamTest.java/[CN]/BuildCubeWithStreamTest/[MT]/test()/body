{
  CubeInstance cube=cubeManager.getCube("test_kylin_cube_without_slr_left_join_empty");
  Map<TblColRef,Dictionary> dictionaryMap=Maps.newHashMap();
  String tableName="kylin_intermediate_test_kylin_cube_without_slr_desc_19700101000000_20130112000000_a24dec89_efbd_425f_9a5f_8b78dd1412af";
  tableName="kylin_intermediate_test_kylin_cube_without_slr_desc_19700101000000_20130112000000_a5e1eb5d_da6b_475d_9807_be0b61f03215";
  tableName="kylin_intermediate_test_kylin_cube_without_slr_left_join_desc_19700101000000_20150302000000_0a183367_f245_43d1_8850_1c138c8514c3";
  tableName="kylin_intermediate_test_kylin_cube_without_slr_left_join_desc_19700101000000_20150301000000_ce061464_7962_4642_bd7d_7c3d8fbe9389";
  logger.info("intermediate table name:" + tableName);
  final Configuration conf=new Configuration();
  HCatInputFormat.setInput(conf,"default",tableName);
  final HCatSchema tableSchema=HCatInputFormat.getTableSchema(conf);
  logger.info(StringUtils.join(tableSchema.getFieldNames(),"\n"));
  HiveTableReader reader=new HiveTableReader("default",tableName);
  List<List<String>> queue=Lists.newArrayList();
  while (reader.next()) {
    queue.add(reader.getRowAsList());
  }
  reader.close();
  Map<Long,GridTable> cuboidsMap=Maps.newHashMap();
  final CubeStreamBuilder streamBuilder=new CubeStreamBuilder(cube,true,dictionaryMap,cuboidsMap);
  streamBuilder.build(queue);
  logger.info("stream build finished");
}
