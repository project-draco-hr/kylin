{
  final short cuboidShardNum=cubeSeg.getCuboidShardNum(cuboid.getId());
  if (!cubeSeg.isEnableSharding()) {
    return Lists.newArrayList(halfCookedKey);
  }
 else {
    List<byte[]> ret=Lists.newArrayList();
    for (short i=0; i < cuboidShardNum; ++i) {
      short shard=ShardingHash.normalize(cubeSeg.getCuboidBaseShard(cuboid.getId()),i,cubeSeg.getTotalShards());
      byte[] cookedKey=Arrays.copyOf(halfCookedKey,halfCookedKey.length);
      BytesUtil.writeShort(shard,cookedKey,0,RowConstants.ROWKEY_SHARDID_LEN);
      ret.add(cookedKey);
    }
    return ret;
  }
}
