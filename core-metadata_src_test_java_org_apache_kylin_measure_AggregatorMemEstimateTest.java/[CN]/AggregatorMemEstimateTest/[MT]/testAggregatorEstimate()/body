{
  HLLCAggregator hllcAggregator=new HLLCAggregator(14);
  hllcAggregator.aggregate(new HyperLogLogPlusCounter(14));
  BitmapAggregator bitmapAggregator=new BitmapAggregator();
  BitmapCounter bitmapCounter=new BitmapCounter();
  for (int i=4000; i <= 100000; i+=2) {
    bitmapCounter.add(i);
  }
  bitmapAggregator.aggregate(bitmapCounter);
  ExtendedColumnMeasureType extendedColumnType=new ExtendedColumnMeasureType("EXTENDED_COLUMN",DataType.getType("extendedcolumn(100)"));
  MeasureAggregator<ByteArray> extendedColumnAggregator=extendedColumnType.newAggregator();
  extendedColumnAggregator.aggregate(new ByteArray(100));
  List<MeasureAggregator> aggregators=Lists.newArrayList(basicAggregators());
  aggregators.add(hllcAggregator);
  aggregators.add(bitmapAggregator);
  aggregators.add(extendedColumnAggregator);
  System.out.printf("%40s %10s %10s\n","Class","Estimate","Actual");
  for (  MeasureAggregator aggregator : aggregators) {
    String clzName=getAggregatorName(aggregator.getClass());
    System.out.printf("%40s %10d %10d\n",clzName,aggregator.getMemBytesEstimate(),meter.measureDeep(aggregator));
  }
}
