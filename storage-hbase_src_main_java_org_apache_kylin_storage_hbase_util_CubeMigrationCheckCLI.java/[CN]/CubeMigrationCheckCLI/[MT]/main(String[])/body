{
  OptionsHelper optionsHelper=new OptionsHelper();
  Options options=new Options();
  options.addOption(OPTION_FIX);
  options.addOption(OPTION_DST_CFG_URI);
  options.addOption(OPTION_CUBE);
  boolean ifFix=false;
  String dstCfgUri;
  String cubeName;
  logger.info("jobs args: " + Arrays.toString(args));
  try {
    optionsHelper.parseOptions(options,args);
    logger.info("options: '" + options.toString() + "'");
    logger.info("option value 'fix': '" + optionsHelper.getOptionValue(OPTION_FIX) + "'");
    ifFix=Boolean.parseBoolean(optionsHelper.getOptionValue(OPTION_FIX));
    logger.info("option value 'dstCfgUri': '" + optionsHelper.getOptionValue(OPTION_DST_CFG_URI) + "'");
    dstCfgUri=optionsHelper.getOptionValue(OPTION_DST_CFG_URI);
    logger.info("option value 'cube': '" + optionsHelper.getOptionValue(OPTION_CUBE) + "'");
    cubeName=optionsHelper.getOptionValue(OPTION_CUBE);
  }
 catch (  ParseException e) {
    optionsHelper.printUsage(CubeMigrationCheckCLI.class.getName(),options);
    throw e;
  }
  KylinConfig kylinConfig;
  if (dstCfgUri == null) {
    kylinConfig=KylinConfig.getInstanceFromEnv();
  }
 else {
    kylinConfig=KylinConfig.createInstanceFromUri(dstCfgUri);
  }
  CubeMigrationCheckCLI checkCLI=new CubeMigrationCheckCLI(kylinConfig,ifFix);
  checkCLI.execute(cubeName);
}
