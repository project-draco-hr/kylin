{
  final int n=MemoryBudgetController.getSystemAvailMB() / 2;
  final MemoryBudgetController mbc=new MemoryBudgetController(n);
  ArrayList<Consumer> mbList=new ArrayList<Consumer>();
  for (int i=0; i < n; i++) {
    mbList.add(new Consumer(mbc));
    assertEquals(mbList.size(),mbc.getTotalReservedMB());
  }
  final Consumer a=new Consumer();
  mbc.reserve(a,n);
  for (int i=0; i < n; i++) {
    assertEquals(null,mbList.get(i).data);
  }
  new Thread(){
    @Override public void run(){
      try {
        Thread.sleep(2000);
      }
 catch (      InterruptedException e) {
        e.printStackTrace();
      }
      mbc.reserve(a,0);
    }
  }
.start();
  long bWaitStart=System.currentTimeMillis();
  final Consumer b=new Consumer();
  mbc.reserveInsist(b,n);
  assertTrue(System.currentTimeMillis() - bWaitStart > 1000);
  try {
    mbc.reserve(a,1);
    fail();
  }
 catch (  NotEnoughBudgetException ex) {
  }
}
