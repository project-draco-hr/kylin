{
  CubeInstance cubeInstance=CubeManager.getInstance(context.getConfig()).getCube(CubingExecutableUtil.getCubeName(this.getParams()));
  final Output output=jobService.getOutput(getId());
  String logMsg;
  state=output.getState();
  if (state != ExecutableState.ERROR && !cubeInstance.getDescriptor().getStatusNeedNotify().contains(state.toString())) {
    logger.info("state:" + state + " no need to notify users");
    return null;
  }
switch (state) {
case ERROR:
    logMsg=output.getVerboseMsg();
  break;
case DISCARDED:
logMsg="job has been discarded";
break;
case SUCCEED:
logMsg="job has succeeded";
break;
default :
return null;
}
String content=ExecutableConstants.NOTIFY_EMAIL_TEMPLATE;
content=content.replaceAll("\\$\\{job_name\\}",getName());
content=content.replaceAll("\\$\\{result\\}",state.toString());
content=content.replaceAll("\\$\\{env_name\\}",getDeployEnvName());
content=content.replaceAll("\\$\\{project_name\\}",getProjectName());
content=content.replaceAll("\\$\\{cube_name\\}",CubingExecutableUtil.getCubeName(this.getParams()));
content=content.replaceAll("\\$\\{source_records_count\\}",String.valueOf(findSourceRecordCount()));
content=content.replaceAll("\\$\\{start_time\\}",new Date(getStartTime()).toString());
content=content.replaceAll("\\$\\{duration\\}",getDuration() / 60000 + "mins");
content=content.replaceAll("\\$\\{mr_waiting\\}",getMapReduceWaitTime() / 60000 + "mins");
content=content.replaceAll("\\$\\{last_update_time\\}",new Date(getLastModified()).toString());
content=content.replaceAll("\\$\\{submitter\\}",StringUtil.noBlank(getSubmitter(),"missing submitter"));
content=content.replaceAll("\\$\\{error_log\\}",Matcher.quoteReplacement(StringUtil.noBlank(logMsg,"no error message")));
try {
InetAddress inetAddress=InetAddress.getLocalHost();
content=content.replaceAll("\\$\\{job_engine\\}",inetAddress.getCanonicalHostName());
}
 catch (UnknownHostException e) {
logger.warn(e.getLocalizedMessage(),e);
}
String title="[" + state.toString() + "] - ["+ getDeployEnvName()+ "] - ["+ getProjectName()+ "] - "+ CubingExecutableUtil.getCubeName(this.getParams());
return Pair.of(title,content);
}
