{
  List<ProjectInstance> readableProjects=new ArrayList<ProjectInstance>();
  List<ProjectInstance> projectInstances=projectService.listAllProjects(limit,offset);
  Authentication authentication=SecurityContextHolder.getContext().getAuthentication();
  UserDetails userDetails=null;
  if (authentication == null) {
    logger.debug("authentication is null.");
    throw new InternalErrorException("Can not find authentication infomation.");
  }
  if (authentication.getPrincipal() instanceof UserDetails) {
    logger.debug("authentication.getPrincipal() is " + authentication.getPrincipal());
    userDetails=(UserDetails)authentication.getPrincipal();
  }
  if (authentication.getDetails() instanceof UserDetails) {
    logger.debug("authentication.getDetails() is " + authentication.getDetails());
    userDetails=(UserDetails)authentication.getDetails();
  }
  List<String> userAuthority=new ArrayList<>();
  for (  GrantedAuthority auth : authentication.getAuthorities()) {
    userAuthority.add(auth.getAuthority());
    if (auth.getAuthority().equals(Constant.ROLE_ADMIN))     return projectInstances;
  }
  String userName=userDetails.getUsername();
  for (  ProjectInstance projectInstance : projectInstances) {
    boolean hasProjectPermission=false;
    AclEntity ae=accessService.getAclEntity("ProjectInstance",projectInstance.getId());
    Acl projectAcl=accessService.getAcl(ae);
    if (projectAcl == null) {
      continue;
    }
    if (((PrincipalSid)projectAcl.getOwner()).getPrincipal().equals(userName)) {
      readableProjects.add(projectInstance);
      continue;
    }
    for (    AccessControlEntry ace : projectAcl.getEntries()) {
      if (ace.getSid() instanceof PrincipalSid && ((PrincipalSid)ace.getSid()).getPrincipal().equals(userName)) {
        hasProjectPermission=true;
        readableProjects.add(projectInstance);
        break;
      }
 else       if (ace.getSid() instanceof GrantedAuthoritySid) {
        String projectAuthority=((GrantedAuthoritySid)ace.getSid()).getGrantedAuthority();
        if (userAuthority.contains(projectAuthority)) {
          hasProjectPermission=true;
          readableProjects.add(projectInstance);
          break;
        }
      }
    }
    if (!hasProjectPermission) {
      List<CubeInstance> cubeInstances=cubeService.listAllCubes(projectInstance.getName());
      for (      CubeInstance cubeInstance : cubeInstances) {
        if (cubeInstance == null) {
          continue;
        }
        boolean hasCubePermission=false;
        AclEntity cubeAe=accessService.getAclEntity("CubeInstance",cubeInstance.getId());
        Acl cubeAcl=accessService.getAcl(cubeAe);
        if (cubeAcl == null) {
          continue;
        }
        if (((PrincipalSid)cubeAcl.getOwner()).getPrincipal().equals(userName)) {
          hasProjectPermission=true;
          break;
        }
        for (        AccessControlEntry cubeAce : cubeAcl.getEntries()) {
          if (cubeAce.getSid() instanceof PrincipalSid && ((PrincipalSid)cubeAce.getSid()).getPrincipal().equals(userName)) {
            hasCubePermission=true;
            break;
          }
 else           if (cubeAce.getSid() instanceof GrantedAuthoritySid) {
            String cubeAuthority=((GrantedAuthoritySid)cubeAce.getSid()).getGrantedAuthority();
            if (userAuthority.contains(cubeAuthority)) {
              hasCubePermission=true;
              break;
            }
          }
        }
        if (hasCubePermission) {
          hasProjectPermission=true;
          break;
        }
      }
      if (hasProjectPermission) {
        readableProjects.add(projectInstance);
      }
    }
  }
  return readableProjects;
}
