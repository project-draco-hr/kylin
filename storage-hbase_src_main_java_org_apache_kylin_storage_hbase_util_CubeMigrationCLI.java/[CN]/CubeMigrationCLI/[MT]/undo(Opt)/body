{
  logger.info("Undo operation: " + opt.toString());
switch (opt.type) {
case CHANGE_HTABLE_HOST:
{
      String tableName=(String)opt.params[0];
      HTableDescriptor desc=hbaseAdmin.getTableDescriptor(TableName.valueOf(tableName));
      hbaseAdmin.disableTable(tableName);
      desc.setValue(IRealizationConstants.HTableTag,srcConfig.getMetadataUrlPrefix());
      hbaseAdmin.modifyTable(tableName,desc);
      hbaseAdmin.enableTable(tableName);
      break;
    }
case COPY_FILE_IN_META:
{
    logger.info("Undo for COPY_FILE_IN_META is ignored");
    break;
  }
case COPY_DICT_OR_SNAPSHOT:
{
  logger.info("Undo for COPY_DICT_OR_SNAPSHOT is ignored");
  break;
}
case RENAME_FOLDER_IN_HDFS:
{
String srcPath=(String)opt.params[1];
String dstPath=(String)opt.params[0];
if (hdfsFS.exists(new Path(srcPath)) && !hdfsFS.exists(new Path(dstPath))) {
  renameHDFSPath(srcPath,dstPath);
  logger.info("HDFS Folder renamed from " + srcPath + " to "+ dstPath);
}
break;
}
case ADD_INTO_PROJECT:
{
logger.info("Undo for ADD_INTO_PROJECT is ignored");
break;
}
case COPY_ACL:
{
String cubeId=(String)opt.params[0];
String modelId=(String)opt.params[1];
HTableInterface destAclHtable=null;
try {
destAclHtable=HBaseConnection.get(dstConfig.getStorageUrl()).getTable(dstConfig.getMetadataUrlPrefix() + ACL_TABLE_NAME);
destAclHtable.delete(new Delete(Bytes.toBytes(cubeId)));
destAclHtable.delete(new Delete(Bytes.toBytes(modelId)));
destAclHtable.flushCommits();
}
  finally {
IOUtils.closeQuietly(destAclHtable);
}
break;
}
case PURGE_AND_DISABLE:
{
logger.info("Undo for PURGE_AND_DISABLE is not supported");
break;
}
default :
{
break;
}
}
}
