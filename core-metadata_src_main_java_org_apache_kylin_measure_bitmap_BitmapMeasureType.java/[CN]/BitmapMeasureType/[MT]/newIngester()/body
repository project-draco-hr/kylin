{
  return new MeasureIngester<BitmapCounter>(){
    BitmapCounter current=new BitmapCounter();
    @Override public BitmapCounter valueOf(    String[] values,    MeasureDesc measureDesc,    Map<TblColRef,Dictionary<String>> dictionaryMap){
      BitmapCounter bitmap=current;
      bitmap.clear();
      if (needDictionaryColumn(measureDesc.getFunction())) {
        TblColRef literalCol=measureDesc.getFunction().getParameter().getColRefs().get(0);
        Dictionary<String> dictionary=dictionaryMap.get(literalCol);
        if (values != null && values.length > 0 && values[0] != null) {
          int id=dictionary.getIdFromValue(values[0]);
          bitmap.add(id);
        }
      }
 else {
        for (        String value : values) {
          bitmap.add(value);
        }
      }
      return bitmap;
    }
    @Override public BitmapCounter reEncodeDictionary(    BitmapCounter value,    MeasureDesc measureDesc,    Map<TblColRef,Dictionary<String>> oldDicts,    Map<TblColRef,Dictionary<String>> newDicts){
      if (!needDictionaryColumn(measureDesc.getFunction())) {
        return value;
      }
      TblColRef colRef=measureDesc.getFunction().getParameter().getColRefs().get(0);
      Dictionary<String> sourceDict=oldDicts.get(colRef);
      Dictionary<String> mergedDict=newDicts.get(colRef);
      BitmapCounter retValue=new BitmapCounter();
      byte[] literal=new byte[sourceDict.getSizeOfValue()];
      Iterator<Integer> iterator=value.iterator();
      while (iterator.hasNext()) {
        int id=iterator.next();
        int newId;
        int size=sourceDict.getValueBytesFromId(id,literal,0);
        if (size < 0) {
          newId=mergedDict.nullId();
        }
 else {
          newId=mergedDict.getIdFromValueBytes(literal,0,size);
        }
        retValue.add(newId);
      }
      return retValue;
    }
  }
;
}
