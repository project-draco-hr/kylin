{
  return new Iterator<GTRecord>(){
    GTRecord next=null;
    GTRecord rec=new GTRecord(info);
    @Override public boolean hasNext(){
      if (next != null)       return true;
      try {
        Result r=scanner.next();
        if (r != null) {
          loadRecord(r);
          next=rec;
        }
      }
 catch (      IOException e) {
        throw new RuntimeException(e);
      }
      return next != null;
    }
    private void loadRecord(    Result r){
      Cell[] cells=r.rawCells();
      Cell cell=cells[0];
      if (Bytes.compareTo(CF_B,0,CF_B.length,cell.getFamilyArray(),cell.getFamilyOffset(),cell.getFamilyLength()) != 0 || Bytes.compareTo(COL_B,0,COL_B.length,cell.getQualifierArray(),cell.getQualifierOffset(),cell.getQualifierLength()) != 0)       throw new IllegalStateException();
      rec.loadCellBlock(0,ByteBuffer.wrap(cell.getRowArray(),cell.getRowOffset() + ID_LEN,cell.getRowLength() - ID_LEN));
      rec.loadCellBlock(1,ByteBuffer.wrap(cell.getValueArray(),cell.getValueOffset(),cell.getValueLength()));
    }
    @Override public GTRecord next(){
      if (hasNext() == false)       throw new NoSuchElementException();
      count++;
      next=null;
      return rec;
    }
    @Override public void remove(){
      throw new UnsupportedOperationException();
    }
  }
;
}
