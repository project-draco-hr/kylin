{
  if (filter instanceof LogicalTupleFilter) {
    if (filter.getOperator() == TupleFilter.FilterOperatorEnum.AND) {
      Range ret=Range.all();
      for (      TupleFilter child : filter.getChildren()) {
        Range childRange=extractTsConditionInternal(child,colRef);
        if (childRange != null) {
          ret=ret.intersection(childRange);
        }
      }
      return ret;
    }
 else {
      return null;
    }
  }
  if (filter instanceof CompareTupleFilter) {
    CompareTupleFilter compareTupleFilter=(CompareTupleFilter)filter;
    if (compareTupleFilter.getColumn() == null)     return null;
    if (compareTupleFilter.getColumn().equals(colRef)) {
      Object firstValue=compareTupleFilter.getFirstValue();
      long t;
switch (compareTupleFilter.getOperator()) {
case EQ:
        t=DateFormat.stringToMillis((String)firstValue);
      return Range.closed(t,t);
case LT:
    t=DateFormat.stringToMillis((String)firstValue);
  return Range.lessThan(t);
case LTE:
t=DateFormat.stringToMillis((String)firstValue);
return Range.atMost(t);
case GT:
t=DateFormat.stringToMillis((String)firstValue);
return Range.greaterThan(t);
case GTE:
t=DateFormat.stringToMillis((String)firstValue);
return Range.atLeast(t);
case NEQ:
case IN:
break;
default :
}
}
}
return null;
}
