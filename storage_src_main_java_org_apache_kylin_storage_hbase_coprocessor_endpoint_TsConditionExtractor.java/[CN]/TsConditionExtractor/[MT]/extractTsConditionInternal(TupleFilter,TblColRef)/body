{
  if (filter instanceof LogicalTupleFilter) {
    if (filter.getOperator() == TupleFilter.FilterOperatorEnum.AND) {
      Range<Long> ret=Ranges.all();
      for (      TupleFilter child : filter.getChildren()) {
        Range childRange=extractTsConditionInternal(child,colRef);
        if (childRange != null) {
          if (ret.isConnected(childRange) && !ret.intersection(childRange).isEmpty()) {
            ret=ret.intersection(childRange);
          }
 else {
            return null;
          }
        }
 else {
          return null;
        }
      }
      return ret.isEmpty() ? null : ret;
    }
 else {
      return Ranges.all();
    }
  }
  if (filter instanceof CompareTupleFilter) {
    CompareTupleFilter compareTupleFilter=(CompareTupleFilter)filter;
    if (compareTupleFilter.getColumn() == null)     return Ranges.all();
    if (compareTupleFilter.getColumn().equals(colRef)) {
      Object firstValue=compareTupleFilter.getFirstValue();
      long t;
switch (compareTupleFilter.getOperator()) {
case EQ:
        t=DateFormat.stringToMillis((String)firstValue);
      return Ranges.closed(t,t);
case LT:
    t=DateFormat.stringToMillis((String)firstValue);
  return Ranges.lessThan(t);
case LTE:
t=DateFormat.stringToMillis((String)firstValue);
return Ranges.atMost(t);
case GT:
t=DateFormat.stringToMillis((String)firstValue);
return Ranges.greaterThan(t);
case GTE:
t=DateFormat.stringToMillis((String)firstValue);
return Ranges.atLeast(t);
case NEQ:
case IN:
break;
default :
}
}
}
return Ranges.all();
}
