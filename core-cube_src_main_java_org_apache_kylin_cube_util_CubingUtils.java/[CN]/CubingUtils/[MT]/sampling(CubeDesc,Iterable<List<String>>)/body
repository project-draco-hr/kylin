{
  CubeJoinedFlatTableDesc flatDesc=new CubeJoinedFlatTableDesc(cubeDesc);
  final int rowkeyLength=cubeDesc.getRowkey().getRowKeyColumns().length;
  final List<Long> allCuboidIds=new CuboidScheduler(cubeDesc).getAllCuboidIds();
  final long baseCuboidId=Cuboid.getBaseCuboidId(cubeDesc);
  final Map<Long,Integer[]> allCuboidsBitSet=Maps.newHashMap();
  Lists.transform(allCuboidIds,new Function<Long,Integer[]>(){
    @Nullable @Override public Integer[] apply(    @Nullable Long cuboidId){
      Integer[] result=new Integer[Long.bitCount(cuboidId)];
      long mask=Long.highestOneBit(baseCuboidId);
      int position=0;
      for (int i=0; i < rowkeyLength; i++) {
        if ((mask & cuboidId) > 0) {
          result[position]=i;
          position++;
        }
        mask=mask >> 1;
      }
      return result;
    }
  }
);
  final Map<Long,HyperLogLogPlusCounter> result=Maps.newHashMapWithExpectedSize(allCuboidIds.size());
  for (  Long cuboidId : allCuboidIds) {
    result.put(cuboidId,new HyperLogLogPlusCounter(cubeDesc.getConfig().getCubeStatsHLLPrecision()));
    Integer[] cuboidBitSet=new Integer[Long.bitCount(cuboidId)];
    long mask=Long.highestOneBit(baseCuboidId);
    int position=0;
    for (int i=0; i < rowkeyLength; i++) {
      if ((mask & cuboidId) > 0) {
        cuboidBitSet[position]=i;
        position++;
      }
      mask=mask >> 1;
    }
    allCuboidsBitSet.put(cuboidId,cuboidBitSet);
  }
  HashFunction hf=Hashing.murmur3_32();
  ByteArray[] row_hashcodes=new ByteArray[rowkeyLength];
  for (int i=0; i < rowkeyLength; i++) {
    row_hashcodes[i]=new ByteArray();
  }
  for (  List<String> row : streams) {
    for (int i=0; i < rowkeyLength; i++) {
      Hasher hc=hf.newHasher();
      final String cell=row.get(flatDesc.getRowKeyColumnIndexes()[i]);
      if (cell != null) {
        row_hashcodes[i].set(hc.putString(cell).hash().asBytes());
      }
 else {
        row_hashcodes[i].set(hc.putInt(0).hash().asBytes());
      }
    }
    for (    Map.Entry<Long,HyperLogLogPlusCounter> longHyperLogLogPlusCounterEntry : result.entrySet()) {
      Long cuboidId=longHyperLogLogPlusCounterEntry.getKey();
      HyperLogLogPlusCounter counter=longHyperLogLogPlusCounterEntry.getValue();
      Hasher hc=hf.newHasher();
      final Integer[] cuboidBitSet=allCuboidsBitSet.get(cuboidId);
      for (int position=0; position < cuboidBitSet.length; position++) {
        hc.putBytes(row_hashcodes[cuboidBitSet[position]].array());
      }
      counter.add(hc.hash().asBytes());
    }
  }
  return result;
}
