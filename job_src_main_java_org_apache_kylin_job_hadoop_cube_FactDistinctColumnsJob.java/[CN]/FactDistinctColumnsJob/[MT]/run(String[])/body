{
  Options options=new Options();
  try {
    options.addOption(OPTION_JOB_NAME);
    options.addOption(OPTION_CUBE_NAME);
    options.addOption(OPTION_OUTPUT_PATH);
    options.addOption(OPTION_TABLE_NAME);
    options.addOption(OPTION_SEGMENT_NAME);
    options.addOption(OPTION_STATISTICS_ENABLED);
    options.addOption(OPTION_STATISTICS_OUTPUT);
    options.addOption(OPTION_STATISTICS_SAMPLING_MAX);
    parseOptions(options,args);
    job=Job.getInstance(getConf(),getOptionValue(OPTION_JOB_NAME));
    String cubeName=getOptionValue(OPTION_CUBE_NAME);
    Path output=new Path(getOptionValue(OPTION_OUTPUT_PATH));
    String intermediateTable=getOptionValue(OPTION_TABLE_NAME);
    ;
    String segmentName=getOptionValue(OPTION_SEGMENT_NAME);
    String statistics_enabled=getOptionValue(OPTION_STATISTICS_ENABLED);
    String statistics_output=getOptionValue(OPTION_STATISTICS_OUTPUT);
    String statistics_sampling_max=getOptionValue(OPTION_STATISTICS_SAMPLING_MAX);
    CubeManager cubeMgr=CubeManager.getInstance(KylinConfig.getInstanceFromEnv());
    CubeInstance cubeInstance=cubeMgr.getCube(cubeName);
    job.getConfiguration().set(BatchConstants.CFG_CUBE_NAME,cubeName);
    job.getConfiguration().set(BatchConstants.CFG_CUBE_SEGMENT_NAME,segmentName);
    job.getConfiguration().set(BatchConstants.CFG_STATISTICS_ENABLED,statistics_enabled);
    job.getConfiguration().set(BatchConstants.CFG_STATISTICS_OUTPUT,statistics_output);
    job.getConfiguration().set(BatchConstants.CFG_STATISTICS_SAMPLING_MAX,statistics_sampling_max);
    log.info("Starting: " + job.getJobName());
    setJobClasspath(job);
    setupMapper(intermediateTable);
    setupReducer(output);
    attachKylinPropsAndMetadata(cubeInstance,job.getConfiguration());
    return waitForCompletion(job);
  }
 catch (  Exception e) {
    logger.error("error in FactDistinctColumnsJob",e);
    printUsage(options);
    throw e;
  }
}
