{
  List<HBaseKeyRange> result=Lists.newArrayList();
  logger.info("Current cubeInstance is " + cubeInstance + " with "+ cubeInstance.getSegments().size()+ " segs in all");
  List<CubeSegment> segs=cubeInstance.getSegments(SegmentStatusEnum.READY);
  logger.info("READY segs count: " + segs.size());
  for (  CubeSegment cubeSeg : segs) {
    List<Collection<ColumnValueRange>> orAndDimRanges=translateToOrAndDimRanges(flatFilter,cubeSeg);
    if (orAndDimRanges == null) {
      continue;
    }
    List<HBaseKeyRange> scanRanges=Lists.newArrayListWithCapacity(orAndDimRanges.size());
    for (    Collection<ColumnValueRange> andDimRanges : orAndDimRanges) {
      HBaseKeyRange rowKeyRange=new HBaseKeyRange(dimensionColumns,andDimRanges,cubeSeg,cubeDesc);
      scanRanges.add(rowKeyRange);
    }
    List<HBaseKeyRange> mergedRanges=mergeOverlapRanges(scanRanges);
    mergedRanges=mergeTooManyRanges(mergedRanges);
    result.addAll(mergedRanges);
  }
  logger.info("hbasekeyrange count: " + result.size());
  dropUnhitSegments(result);
  logger.info("hbasekeyrange count after dropping unhit :" + result.size());
  return result;
}
