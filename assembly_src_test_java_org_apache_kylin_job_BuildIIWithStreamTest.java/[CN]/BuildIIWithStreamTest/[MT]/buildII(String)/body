{
  final IIDesc desc=iiManager.getII(iiName).getDescriptor();
  final String tableName=createIntermediateTable(desc,kylinConfig);
  logger.info("intermediate table name:" + tableName);
  HiveTableReader reader=new HiveTableReader("default",tableName);
  final List<TblColRef> tblColRefs=desc.listAllColumns();
  for (  TblColRef tblColRef : tblColRefs) {
    if (desc.isMetricsCol(tblColRef)) {
      logger.info("matrix:" + tblColRef.getName());
    }
 else {
      logger.info("measure:" + tblColRef.getName());
    }
  }
  final IISegment segment=createSegment(iiName);
  final HTableInterface htable=HBaseConnection.get(KylinConfig.getInstanceFromEnv().getStorageUrl()).getTable(segment.getStorageLocationIdentifier());
  String[] args=new String[]{"-iiname",iiName,"-htablename",segment.getStorageLocationIdentifier()};
  ToolRunner.run(new IICreateHTableJob(),args);
  final IIDesc iiDesc=segment.getIIDesc();
  final SliceBuilder sliceBuilder=new SliceBuilder(desc,(short)0,iiDesc.isUseLocalDictionary());
  List<String[]> sorted=getSortedRows(reader,desc.getTimestampColumn());
  int count=sorted.size();
  ArrayList<StreamingMessage> messages=Lists.newArrayList();
  for (  String[] row : sorted) {
    if (messages.size() < iiDesc.getSliceSize()) {
      messages.add(parse(row));
    }
 else {
      build(sliceBuilder,new StreamingBatch(messages,Pair.newPair(System.currentTimeMillis(),System.currentTimeMillis())),htable);
      messages=Lists.newArrayList();
      messages.add((parse(row)));
    }
  }
  if (!messages.isEmpty()) {
    build(sliceBuilder,new StreamingBatch(messages,Pair.newPair(System.currentTimeMillis(),System.currentTimeMillis())),htable);
  }
  reader.close();
  logger.info("total record count:" + count + " htable:"+ segment.getStorageLocationIdentifier());
  logger.info("stream build finished, htable name:" + segment.getStorageLocationIdentifier());
}
