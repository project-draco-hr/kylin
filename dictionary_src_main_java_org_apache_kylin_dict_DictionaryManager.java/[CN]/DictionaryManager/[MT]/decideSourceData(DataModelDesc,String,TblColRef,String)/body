{
  String srcTable;
  String srcCol;
  int srcColIdx;
  ReadableTable table;
  MetadataManager metaMgr=MetadataManager.getInstance(config);
  if (model == null) {
    srcTable=col.getTable();
    srcCol=col.getName();
    srcColIdx=col.getColumnDesc().getZeroBasedIndex();
    int nColumns=metaMgr.getTableDesc(col.getTable()).getColumnCount();
    table=new FileTable(factColumnsPath + "/" + col.getName(),nColumns);
    return new Object[]{srcTable,srcCol,srcColIdx,table};
  }
  if ("true".equals(dict) || "string".equals(dict) || "number".equals(dict)|| "any".equals(dict)) {
    if (model.isFactTable(col.getTable())) {
      TblColRef pkCol=model.findPKByFK(col,"inner");
      if (pkCol != null)       col=pkCol;
    }
    srcTable=col.getTable();
    srcCol=col.getName();
    srcColIdx=col.getColumnDesc().getZeroBasedIndex();
    if (model.isFactTable(col.getTable())) {
      table=new FileTable(factColumnsPath + "/" + col.getName(),-1);
    }
 else {
      table=TableSourceFactory.createReadableTable(metaMgr.getTableDesc(col.getTable()));
    }
  }
 else {
    String dictDataSetPath=unpackDataSet(this.config.getTempHDFSDir(),dict);
    if (dictDataSetPath == null)     throw new IllegalArgumentException("Unknown dictionary data set '" + dict + "', referred from "+ col);
    srcTable="PREDEFINED";
    srcCol=dict;
    srcColIdx=0;
    table=new FileTable(dictDataSetPath,-1);
  }
  return new Object[]{srcTable,srcCol,srcColIdx,table};
}
