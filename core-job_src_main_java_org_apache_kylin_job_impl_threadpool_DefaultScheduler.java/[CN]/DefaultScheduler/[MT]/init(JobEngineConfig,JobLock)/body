{
  this.jobLock=jobLock;
  String serverMode=jobEngineConfig.getConfig().getServerMode();
  if (!("job".equals(serverMode.toLowerCase()) || "all".equals(serverMode.toLowerCase()))) {
    logger.info("server mode: " + serverMode + ", no need to run job scheduler");
    return;
  }
  logger.info("Initializing Job Engine ....");
  if (!initialized) {
    initialized=true;
  }
 else {
    return;
  }
  this.jobEngineConfig=jobEngineConfig;
  if (jobLock.lock() == false) {
    throw new IllegalStateException("Cannot start job scheduler due to lack of job lock");
  }
  executableManager=ExecutableManager.getInstance(jobEngineConfig.getConfig());
  fetcherPool=Executors.newScheduledThreadPool(1);
  int corePoolSize=jobEngineConfig.getMaxConcurrentJobLimit();
  jobPool=new ThreadPoolExecutor(corePoolSize,corePoolSize,Long.MAX_VALUE,TimeUnit.DAYS,new SynchronousQueue<Runnable>());
  context=new DefaultContext(Maps.<String,Executable>newConcurrentMap(),jobEngineConfig.getConfig());
  executableManager.resumeAllRunningJobs();
  fetcher=new FetcherRunner();
  fetcherPool.scheduleAtFixedRate(fetcher,10,ExecutableConstants.DEFAULT_SCHEDULER_INTERVAL_SECONDS,TimeUnit.SECONDS);
  hasStarted=true;
}
