{
  CoprocessorRowType rowType=newRowType();
  CoprocessorProjector projector=new CoprocessorProjector(mask,true);
  ObserverAggregators aggregators=new ObserverAggregators(new HCol[]{c1,c2});
  CoprocessorFilter filter=CoprocessorFilter.deserialize(null);
  HashSet<String> expectedResult=new HashSet<String>();
  expectedResult.add("\\x02\\x02\\x00\\x00, f:q1, [26.0, 7]");
  expectedResult.add("\\x02\\x02\\x00\\x00, f:q2, [48.0]");
  expectedResult.add("\\x01\\x01\\x00\\x00, f:q1, [22.0, 3]");
  expectedResult.add("\\x01\\x01\\x00\\x00, f:q2, [44.0]");
  MockupRegionScanner innerScanner=new MockupRegionScanner(cellsInput);
  RegionScanner aggrScanner=new AggregationScanner(rowType,filter,projector,aggregators,innerScanner);
  ArrayList<Cell> result=Lists.newArrayList();
  boolean hasMore=true;
  while (hasMore) {
    result.clear();
    hasMore=aggrScanner.next(result);
    if (result.isEmpty())     continue;
    Cell cell=result.get(0);
    HCol hcol=null;
    if (ObserverAggregators.match(c1,cell)) {
      hcol=c1;
    }
 else     if (ObserverAggregators.match(c2,cell)) {
      hcol=c2;
    }
 else     fail();
    hcol.measureCodec.decode(ByteBuffer.wrap(cell.getValueArray(),cell.getValueOffset(),cell.getValueLength()),hcol.measureValues);
    String rowKey=toString(cell.getRowArray(),cell.getRowOffset(),cell.getRowLength(),mask);
    String col=Bytes.toString(hcol.family) + ":" + Bytes.toString(hcol.qualifier);
    String values=Arrays.toString(hcol.measureValues);
    System.out.println(rowKey);
    System.out.println(col);
    System.out.println(values);
    assertTrue(expectedResult.contains(rowKey + ", " + col+ ", "+ values));
  }
  aggrScanner.close();
}
