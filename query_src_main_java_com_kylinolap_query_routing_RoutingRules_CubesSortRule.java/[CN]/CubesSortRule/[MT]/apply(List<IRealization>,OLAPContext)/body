{
  List<Integer> items=super.findRealizationsOf(realizations,RealizationType.CUBE);
  PartialSorter.partialSort(realizations,items,new Comparator<IRealization>(){
    @Override public int compare(    IRealization o1,    IRealization o2){
      CubeInstance c1=(CubeInstance)o1;
      CubeInstance c2=(CubeInstance)o2;
      int comp=0;
      comp=c1.getCost() - c2.getCost();
      if (comp != 0) {
        return comp;
      }
      CubeDesc schema1=c1.getDescriptor();
      CubeDesc schema2=c2.getDescriptor();
      comp=schema1.listDimensionColumnsIncludingDerived().size() - schema2.listDimensionColumnsIncludingDerived().size();
      if (comp != 0)       return comp;
      comp=schema1.getMeasures().size() - schema2.getMeasures().size();
      return comp;
    }
  }
);
}
