{
  if (cube.getStatus() == RealizationStatusEnum.DESCBROKEN) {
    throw new BadRequestException("Broken cube " + cube.getName() + " can't be built");
  }
  checkCubeDescSignature(cube);
  checkNoRunningJob(cube);
  DefaultChainedExecutable job;
  if (buildType == CubeBuildTypeEnum.BUILD) {
    CubeSegment newSeg=getCubeManager().appendSegment(cube,startDate,endDate,startOffset,endOffset);
    job=EngineFactory.createBatchCubingJob(newSeg,submitter);
  }
 else   if (buildType == CubeBuildTypeEnum.MERGE) {
    CubeSegment newSeg=getCubeManager().mergeSegments(cube,startDate,endDate,startOffset,endOffset,force);
    job=EngineFactory.createBatchMergeJob(newSeg,submitter);
  }
 else   if (buildType == CubeBuildTypeEnum.REFRESH) {
    CubeSegment refreshSeg=getCubeManager().refreshSegment(cube,startDate,endDate,startOffset,endOffset);
    job=EngineFactory.createBatchCubingJob(refreshSeg,submitter);
  }
 else {
    throw new JobException("invalid build type:" + buildType);
  }
  getExecutableManager().addJob(job);
  JobInstance jobInstance=getSingleJobInstance(job);
  accessService.init(jobInstance,null);
  accessService.inherit(jobInstance,cube);
  return jobInstance;
}
