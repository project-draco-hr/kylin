{
  if (job == null) {
    return null;
  }
  Preconditions.checkState(job instanceof CubingJob,"illegal job type, id:" + job.getId());
  CubingJob cubeJob=(CubingJob)job;
  Output output=outputs.get(job.getId());
  final JobInstance result=new JobInstance();
  result.setName(job.getName());
  result.setRelatedCube(CubingExecutableUtil.getCubeName(cubeJob.getParams()));
  result.setRelatedSegment(CubingExecutableUtil.getSegmentId(cubeJob.getParams()));
  result.setLastModified(output.getLastModified());
  result.setSubmitter(cubeJob.getSubmitter());
  result.setUuid(cubeJob.getId());
  result.setType(CubeBuildTypeEnum.BUILD);
  result.setStatus(parseToJobStatus(output.getState()));
  result.setMrWaiting(AbstractExecutable.getExtraInfoAsLong(output,CubingJob.MAP_REDUCE_WAIT_TIME,0L) / 1000);
  result.setExecStartTime(AbstractExecutable.getStartTime(output));
  result.setExecEndTime(AbstractExecutable.getEndTime(output));
  result.setDuration(AbstractExecutable.getDuration(result.getExecStartTime(),result.getExecEndTime()) / 1000);
  for (int i=0; i < cubeJob.getTasks().size(); ++i) {
    AbstractExecutable task=cubeJob.getTasks().get(i);
    result.addStep(parseToJobStep(task,i,outputs.get(task.getId())));
  }
  return result;
}
