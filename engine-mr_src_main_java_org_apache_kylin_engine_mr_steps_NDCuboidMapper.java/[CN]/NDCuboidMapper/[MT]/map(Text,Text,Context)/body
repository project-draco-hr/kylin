{
  long cuboidId=rowKeySplitter.split(key.getBytes());
  Cuboid parentCuboid=Cuboid.findById(cubeDesc,cuboidId);
  Collection<Long> myChildren=cuboidScheduler.getSpanningCuboid(cuboidId);
  if (myChildren == null || myChildren.size() == 0) {
    context.getCounter(BatchConstants.MAPREDUCE_COUNTER_GROUP_NAME,"Skipped records").increment(1L);
    skipCounter++;
    if (skipCounter % BatchConstants.NORMAL_RECORD_LOG_THRESHOLD == 0) {
      logger.info("Skipped " + skipCounter + " records!");
    }
    return;
  }
  context.getCounter(BatchConstants.MAPREDUCE_COUNTER_GROUP_NAME,"Processed records").increment(1L);
  handleCounter++;
  if (handleCounter % BatchConstants.NORMAL_RECORD_LOG_THRESHOLD == 0) {
    logger.info("Handled " + handleCounter + " records!");
  }
  for (  Long child : myChildren) {
    Cuboid childCuboid=Cuboid.findById(cubeDesc,child);
    int fullKeySize=buildKey(parentCuboid,childCuboid,rowKeySplitter.getSplitBuffers());
    outputKey.set(newKeyBuf.array(),0,fullKeySize);
    context.write(outputKey,value);
  }
}
