{
  HColumnDescriptor cf=new HColumnDescriptor(cfName);
  cf.setMaxVersions(1);
  if (isMemoryHungry) {
    cf.setBlocksize(kylinConfig.getHbaseDefaultBlockSize());
  }
 else {
    cf.setBlocksize(kylinConfig.getHbaseSmallFamilyBlockSize());
  }
  String hbaseDefaultCC=kylinConfig.getHbaseDefaultCompressionCodec().toLowerCase();
switch (hbaseDefaultCC) {
case "snappy":
{
      logger.info("hbase will use snappy to compress data");
      cf.setCompressionType(Algorithm.SNAPPY);
      break;
    }
case "lzo":
{
    logger.info("hbase will use lzo to compress data");
    cf.setCompressionType(Algorithm.LZO);
    break;
  }
case "gz":
case "gzip":
{
  logger.info("hbase will use gzip to compress data");
  cf.setCompressionType(Algorithm.GZ);
  break;
}
case "lz4":
{
logger.info("hbase will use lz4 to compress data");
cf.setCompressionType(Algorithm.LZ4);
break;
}
case "none":
default :
{
logger.info("hbase will not use any compression algorithm to compress data");
cf.setCompressionType(Algorithm.NONE);
}
}
try {
String encodingStr=kylinConfig.getHbaseDefaultEncoding();
DataBlockEncoding encoding=DataBlockEncoding.valueOf(encodingStr);
cf.setDataBlockEncoding(encoding);
}
 catch (Exception e) {
logger.info("hbase will not use any encoding",e);
cf.setDataBlockEncoding(DataBlockEncoding.NONE);
}
cf.setInMemory(false);
cf.setBloomFilterType(BloomType.NONE);
return cf;
}
