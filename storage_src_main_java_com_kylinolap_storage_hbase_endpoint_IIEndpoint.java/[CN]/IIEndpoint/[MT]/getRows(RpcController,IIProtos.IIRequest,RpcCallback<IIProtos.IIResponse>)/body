{
  SRowType type=null;
  SRowProjector projector=null;
  SRowAggregators aggregators=null;
  SRowFilter filter=null;
  if (request.hasSRowType()) {
    type=SRowType.deserialize(request.getSRowType().toByteArray());
  }
  if (request.hasSRowProjector()) {
    projector=SRowProjector.deserialize(request.getSRowProjector().toByteArray());
  }
  if (request.hasSRowAggregator()) {
    aggregators=SRowAggregators.deserialize(request.getSRowAggregator().toByteArray());
  }
  if (request.hasSRowFilter()) {
    filter=SRowFilter.deserialize(request.getSRowFilter().toByteArray());
  }
  IIProtos.IIResponse response=null;
  RegionScanner innerScanner=null;
  HRegion region=null;
  try {
    ByteBuffer byteBuffer=request.getTableInfo().asReadOnlyByteBuffer();
    TableRecordInfoDigest tableInfo=TableRecordInfoDigest.deserialize(byteBuffer);
    region=env.getRegion();
    innerScanner=region.getScanner(buildScan());
    region.startRegionOperation();
synchronized (innerScanner) {
      IIProtos.IIResponse.Builder responseBuilder=IIProtos.IIResponse.newBuilder();
      IIKeyValueCodec codec=new IIKeyValueCodec(tableInfo);
      for (      Slice slice : codec.decodeKeyValue(new HbaseServerKVIterator(innerScanner))) {
        ConciseSet result=null;
        if (filter != null) {
          result=new BitMapFilterEvaluator(new SliceBitMapProvider(slice,type)).evaluate(filter.getFilter());
        }
        Iterator<TableRecordBytes> iterator=slice.iterateWithBitmap(result);
        while (iterator.hasNext()) {
          responseBuilder.addRows(ByteString.copyFrom(iterator.next().getBytes()));
        }
      }
      response=responseBuilder.build();
    }
  }
 catch (  IOException ioe) {
    ResponseConverter.setControllerException(controller,ioe);
  }
 finally {
    IOUtils.closeQuietly(innerScanner);
    if (region != null) {
      try {
        region.closeRegionOperation();
      }
 catch (      IOException e) {
        e.printStackTrace();
        throw new RuntimeException(e);
      }
    }
  }
  done.run(response);
}
