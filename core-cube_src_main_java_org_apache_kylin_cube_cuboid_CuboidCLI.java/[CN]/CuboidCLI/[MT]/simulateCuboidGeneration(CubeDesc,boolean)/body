{
  CuboidScheduler scheduler=new CuboidScheduler(cubeDesc);
  long baseCuboid=Cuboid.getBaseCuboidId(cubeDesc);
  Collection<Long> cuboidSet=new TreeSet<Long>();
  cuboidSet.add(baseCuboid);
  LinkedList<Long> cuboidQueue=new LinkedList<Long>();
  cuboidQueue.push(baseCuboid);
  while (!cuboidQueue.isEmpty()) {
    long cuboid=cuboidQueue.pop();
    Collection<Long> spnanningCuboids=scheduler.getSpanningCuboid(cuboid);
    for (    Long sc : spnanningCuboids) {
      boolean notfound=cuboidSet.add(sc);
      if (!notfound) {
        throw new IllegalStateException("Find duplicate spanning cuboid " + sc + " from cuboid "+ cuboid);
      }
      cuboidQueue.push(sc);
    }
  }
  if (validate) {
    TreeSet<Long> enumCuboids=enumCalcCuboidCount(cubeDesc);
    System.out.println(Arrays.toString(enumCuboids.toArray(new Long[enumCuboids.size()])));
    if (enumCuboids.equals(cuboidSet) == false) {
      throw new IllegalStateException("Expected cuboid set " + enumCuboids + "; but actual cuboid set "+ cuboidSet);
    }
    for (long i=0; i < baseCuboid; ++i) {
      if (cuboidSet.contains(i)) {
        if (!Cuboid.isValid(cubeDesc,i)) {
          throw new RuntimeException();
        }
        if (Cuboid.translateToValidCuboid(cubeDesc,i) != i) {
          throw new RuntimeException();
        }
      }
 else {
        if (Cuboid.isValid(cubeDesc,i)) {
          throw new RuntimeException();
        }
        long corrected=Cuboid.translateToValidCuboid(cubeDesc,i);
        if (corrected == i) {
          throw new RuntimeException();
        }
        if (!Cuboid.isValid(cubeDesc,corrected)) {
          throw new RuntimeException();
        }
        if (Cuboid.translateToValidCuboid(cubeDesc,corrected) != corrected) {
          throw new RuntimeException();
        }
      }
    }
  }
  return cuboidSet.size();
}
