{
  NavigableMap<Integer,Integer> map=new TreeMap<>();
  map.put(3,3);
  map.put(1,1);
  map.put(2,2);
  Map<Integer,Integer> subMap=RangeUtil.filter(map,Range.<Integer>all());
  Assert.assertEquals(subMap.size(),3);
  subMap=RangeUtil.filter(map,Range.atLeast(2));
  Assert.assertEquals(subMap.size(),2);
  subMap=RangeUtil.filter(map,Range.greaterThan(2));
  Assert.assertEquals(subMap.size(),1);
  subMap=RangeUtil.filter(map,Range.greaterThan(0));
  Assert.assertEquals(subMap.size(),3);
  subMap=RangeUtil.filter(map,Range.greaterThan(5));
  Assert.assertEquals(subMap.size(),0);
  subMap=RangeUtil.filter(map,Range.atMost(2));
  Assert.assertEquals(subMap.size(),2);
  subMap=RangeUtil.filter(map,Range.lessThan(2));
  Assert.assertEquals(subMap.size(),1);
  subMap=RangeUtil.filter(map,Range.lessThan(5));
  Assert.assertEquals(subMap.size(),3);
  subMap=RangeUtil.filter(map,Range.lessThan(0));
  Assert.assertEquals(subMap.size(),0);
}
