{
  String krb5ConfigPath=System.getProperty("java.security.krb5.conf");
  if (krb5ConfigPath == null) {
    krb5ConfigPath=DEFAULT_KRB5_CONFIG_LOCATION;
  }
  boolean skipPortAtKerberosDatabaseLookup=true;
  System.setProperty("java.security.krb5.conf",krb5ConfigPath);
  System.setProperty("sun.security.krb5.debug","true");
  System.setProperty("javax.security.auth.useSubjectCredsOnly","false");
  DefaultHttpClient client=new DefaultHttpClient();
  AuthSchemeRegistry authSchemeRegistry=new AuthSchemeRegistry();
  authSchemeRegistry.register(AuthPolicy.SPNEGO,new SPNegoSchemeFactory(skipPortAtKerberosDatabaseLookup));
  client.setAuthSchemes(authSchemeRegistry);
  BasicCredentialsProvider credentialsProvider=new BasicCredentialsProvider();
  Credentials useJaasCreds=new Credentials(){
    public String getPassword(){
      return null;
    }
    public Principal getUserPrincipal(){
      return null;
    }
  }
;
  credentialsProvider.setCredentials(new AuthScope(null,-1,null),useJaasCreds);
  client.setCredentialsProvider(credentialsProvider);
  String response=null;
  while (response == null) {
    if (url.startsWith("https://")) {
      registerEasyHttps();
    }
    if (url.contains("anonymous=true") == false) {
      url+=url.contains("?") ? "&" : "?";
      url+="anonymous=true";
    }
    HttpGet httpget=new HttpGet(url);
    httpget.addHeader("accept","application/json");
    try {
      HttpResponse httpResponse=client.execute(httpget);
      String redirect=null;
      org.apache.http.Header h=httpResponse.getFirstHeader("Location");
      if (h != null) {
        redirect=h.getValue();
        if (isValidURL(redirect) == false) {
          logger.info("Get invalid redirect url, skip it: " + redirect);
          Thread.sleep(1000L);
          continue;
        }
      }
 else {
        h=httpResponse.getFirstHeader("Refresh");
        if (h != null) {
          String s=h.getValue();
          int cut=s.indexOf("url=");
          if (cut >= 0) {
            redirect=s.substring(cut + 4);
            if (isValidURL(redirect) == false) {
              logger.info("Get invalid redirect url, skip it: " + redirect);
              Thread.sleep(1000L);
              continue;
            }
          }
        }
      }
      if (redirect == null) {
        response=IOUtils.toString(httpResponse.getEntity().getContent(),Charset.defaultCharset());
        logger.debug("Job " + mrJobId + " get status check result.\n");
      }
 else {
        url=redirect;
        logger.debug("Job " + mrJobId + " check redirect url "+ url+ ".\n");
      }
    }
 catch (    InterruptedException e) {
      logger.error(e.getMessage());
    }
 finally {
      httpget.releaseConnection();
    }
  }
  return response;
}
