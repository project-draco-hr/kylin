{
  String tableName=segment.getStorageLocationIdentifier();
  table=conn.getTable(tableName);
  factTableName=segment.getIIDesc().getFactTableName();
  if (rootFilter == null) {
    rootFilter=ConstantTupleFilter.TRUE;
  }
  if (groupBy == null) {
    groupBy=Sets.newHashSet();
  }
  if (measures == null) {
    measures=Lists.newArrayList();
  }
  rewriteMeasureParameters(measures,segment.getColumns());
  this.seg=segment;
  this.context=context;
  this.measures=measures;
  this.columns=segment.getColumns();
  this.columnNames=getColumnNames(columns);
  this.tupleInfo=buildTupleInfo();
  this.tableRecordInfo=new TableRecordInfo(this.seg);
  this.pushedDownRowType=CoprocessorRowType.fromTableRecordInfo(tableRecordInfo,this.columns);
  this.pushedDownFilter=CoprocessorFilter.fromFilter(new ClearTextDictionary(this.tableRecordInfo),rootFilter,FilterDecorator.FilterConstantsTreatment.AS_IT_IS);
  for (  TblColRef column : this.pushedDownFilter.getInevaluableColumns()) {
    groupBy.add(column);
  }
  this.pushedDownProjector=CoprocessorProjector.makeForEndpoint(tableRecordInfo,groupBy);
  this.pushedDownAggregators=EndpointAggregators.fromFunctions(tableRecordInfo,measures);
  int tsCol=this.tableRecordInfo.getTimestampColumn();
  this.partitionCol=this.columns.get(tsCol);
  this.tsRange=TsConditionExtractor.extractTsCondition(this.partitionCol,rootFilter);
  if (this.tsRange == null) {
    logger.info("TsRange conflict for endpoint, return empty directly");
    this.tupleIterator=ITupleIterator.EMPTY_TUPLE_ITERATOR;
  }
 else {
    logger.info("The tsRange being pushed is " + RangeUtil.formatTsRange(tsRange));
  }
  IIProtos.IIRequest endpointRequest=prepareRequest();
  Collection<List<IIProtos.IIResponse.IIRow>> shardResults=getResults(endpointRequest,table);
  this.shardCount=shardResults.size();
  this.regionResponsesIterator=shardResults.iterator();
  if (this.regionResponsesIterator.hasNext()) {
    this.currentShardLastDataTime=Long.MIN_VALUE;
    this.tupleIterator=new SingleRegionTupleIterator(this.regionResponsesIterator.next());
  }
 else {
    this.tupleIterator=ITupleIterator.EMPTY_TUPLE_ITERATOR;
  }
}
