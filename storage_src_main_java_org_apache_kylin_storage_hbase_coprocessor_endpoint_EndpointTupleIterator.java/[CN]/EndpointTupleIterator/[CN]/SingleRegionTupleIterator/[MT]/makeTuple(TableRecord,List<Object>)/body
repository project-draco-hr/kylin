{
  this.tuple=new Tuple(tupleInfo);
  List<String> columnValues=Lists.newArrayList();
  for (int i=0; i < columns.size(); ++i) {
    final TblColRef tblColRef=columns.get(i);
    columnValues.add(rowKeyColumnIO.readColumnString(tblColRef,tableRecord.getBytes(),tableRecordInfo.getDigest().offset(i),tableRecordInfo.getDigest().length(i)));
  }
  for (int i=0; i < columnNames.size(); i++) {
    TblColRef column=columns.get(i);
    if (!tuple.hasColumn(column)) {
      continue;
    }
    final String columnName=columnNames.get(i);
    if (tableRecordInfo.getDigest().isMetrics(i)) {
      tuple.setDimensionValue(columnName,tableRecord.getValueString(i));
    }
 else {
      tuple.setDimensionValue(columnName,columnValues.get(i));
    }
  }
  if (measureValues != null) {
    for (int i=0; i < measures.size(); ++i) {
      if (!measures.get(i).isDimensionAsMetric()) {
        String fieldName=measures.get(i).getRewriteFieldName();
        Object value=measureValues.get(i);
        String dataType=tuple.getDataType(fieldName);
        if (value instanceof String) {
          value=Tuple.convertOptiqCellValue((String)value,dataType);
        }
        tuple.setMeasureValue(fieldName,value);
      }
    }
  }
  return tuple;
}
