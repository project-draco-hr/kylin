{
  colAll=new ImmutableBitSet(0,nColumns);
  if (colBlocks == null) {
    colBlocks=new ImmutableBitSet[2];
    colBlocks[0]=primaryKey;
    colBlocks[1]=colAll.andNot(primaryKey);
  }
  colBlocksAll=new ImmutableBitSet(0,colBlocks.length);
  if (colPreferIndex == null)   colPreferIndex=ImmutableBitSet.EMPTY;
  for (int i=0; i < colBlocks.length; i++) {
    for (int j=i + 1; j < colBlocks.length; j++) {
      if (colBlocks[i].intersects(colBlocks[j]))       throw new IllegalStateException();
    }
  }
  ImmutableBitSet merge=ImmutableBitSet.EMPTY;
  for (int i=0; i < colBlocks.length; i++) {
    merge=merge.or(colBlocks[i]);
  }
  if (merge.equals(colAll) == false)   throw new IllegalStateException();
  if (primaryKey.equals(colBlocks[0]) == false)   throw new IllegalStateException();
  LinkedList<ImmutableBitSet> list=new LinkedList<ImmutableBitSet>(Arrays.asList(colBlocks));
  Iterator<ImmutableBitSet> it=list.iterator();
  while (it.hasNext()) {
    ImmutableBitSet cb=it.next();
    if (cb.isEmpty())     it.remove();
  }
  colBlocks=(ImmutableBitSet[])list.toArray(new ImmutableBitSet[list.size()]);
}
