{
  ProjectManager mgr=ProjectManager.getInstance(olapSchema.getConfig());
  List<ColumnDesc> tableColumns=Lists.newArrayList(mgr.listExposedColumns(olapSchema.getProjectName(),sourceTable.getIdentity()));
  List<ColumnDesc> metricColumns=Lists.newArrayList();
  List<MeasureDesc> countMeasures=mgr.listEffectiveRewriteMeasures(olapSchema.getProjectName(),sourceTable.getIdentity());
  HashSet<String> metFields=new HashSet<String>();
  for (  MeasureDesc m : countMeasures) {
    FunctionDesc func=m.getFunction();
    String fieldName=func.getRewriteFieldName();
    if (!metFields.contains(fieldName)) {
      metFields.add(fieldName);
      ColumnDesc fakeCountCol=func.newFakeRewriteColumn(sourceTable);
      metricColumns.add(fakeCountCol);
    }
  }
  HashSet<ColumnDesc> updateColumns=Sets.newHashSet();
  for (  MeasureDesc m : mgr.listEffectiveMeasures(olapSchema.getProjectName(),sourceTable.getIdentity())) {
    if (m.getFunction().isSum()) {
      FunctionDesc func=m.getFunction();
      if (func.getReturnDataType() != func.getRewriteFieldType() && func.getReturnDataType().isBigInt() && func.getRewriteFieldType().isIntegerFamily()) {
        updateColumns.add(func.getParameter().getColRefs().get(0).getColumnDesc());
      }
    }
  }
  for (  ColumnDesc upgrade : updateColumns) {
    int index=tableColumns.indexOf(upgrade);
    tableColumns.get(index).setDatatype("bigint");
  }
  return Lists.newArrayList(Iterables.concat(tableColumns,metricColumns));
}
