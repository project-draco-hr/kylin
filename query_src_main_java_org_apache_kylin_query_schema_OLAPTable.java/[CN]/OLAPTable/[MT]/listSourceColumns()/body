{
  ProjectManager mgr=ProjectManager.getInstance(olapSchema.getConfig());
  List<ColumnDesc> tableColumns=Lists.newArrayList(mgr.listExposedColumns(olapSchema.getProjectName(),sourceTable.getIdentity()));
  List<ColumnDesc> metricColumns=Lists.newArrayList();
  List<MeasureDesc> countMeasures=mgr.listEffectiveRewriteMeasures(olapSchema.getProjectName(),sourceTable.getIdentity());
  HashSet<String> metFields=new HashSet<String>();
  for (  MeasureDesc m : countMeasures) {
    FunctionDesc func=m.getFunction();
    String fieldName=func.getRewriteFieldName();
    if (!metFields.contains(fieldName)) {
      metFields.add(fieldName);
      ColumnDesc fakeCountCol=func.newFakeRewriteColumn(sourceTable);
      metricColumns.add(fakeCountCol);
    }
  }
  HashSet<ColumnDesc> updateColumns=Sets.newHashSet();
  for (  MeasureDesc m : mgr.listEffectiveMeasures(olapSchema.getProjectName(),sourceTable.getIdentity())) {
    if (m.getFunction().isSum()) {
      FunctionDesc func=m.getFunction();
      if (func.getReturnDataType() != func.getRewriteFieldType() && func.getReturnDataType().isBigInt() && func.getRewriteFieldType().isIntegerFamily()) {
        updateColumns.add(func.getParameter().getColRefs().get(0).getColumnDesc());
      }
    }
  }
  MetadataManager metadataManager=MetadataManager.getInstance(olapSchema.getConfig());
  for (  IRealization realization : mgr.listAllRealizations(olapSchema.getProjectName())) {
    if (realization.getType() == RealizationType.INVERTED_INDEX && sourceTable.getIdentity().equalsIgnoreCase(realization.getFactTable())) {
      DataModelDesc dataModelDesc=realization.getDataModelDesc();
      for (      String metricColumn : dataModelDesc.getMetrics()) {
        ColumnDesc columnDesc=metadataManager.getColumnDesc(dataModelDesc.getFactTable() + "." + metricColumn);
        if (columnDesc.getType().isIntegerFamily() && !columnDesc.getType().isBigInt())         updateColumns.add(columnDesc);
      }
    }
  }
  for (  ColumnDesc upgrade : updateColumns) {
    int index=tableColumns.indexOf(upgrade);
    if (index < 0) {
      throw new IllegalStateException("Metric column " + upgrade + " is not found in the the project's columns");
    }
    tableColumns.get(index).setUpgradedType("bigint");
    logger.info("To avoid overflow, upgraded {}'s type from {} to {}",tableColumns.get(index),tableColumns.get(index).getType(),tableColumns.get(index).getUpgradedType());
  }
  return Lists.newArrayList(Iterables.concat(tableColumns,metricColumns));
}
