{
  logger.info("Executing operation: " + opt.toString());
switch (opt.type) {
case CHANGE_HTABLE_HOST:
{
      String tableName=(String)opt.params[0];
      HTableDescriptor desc=hbaseAdmin.getTableDescriptor(TableName.valueOf(tableName));
      hbaseAdmin.disableTable(tableName);
      desc.setValue(IRealizationConstants.HTableTag,dstConfig.getMetadataUrlPrefix());
      hbaseAdmin.modifyTable(tableName,desc);
      hbaseAdmin.enableTable(tableName);
      logger.info("CHANGE_HTABLE_HOST is completed");
      break;
    }
case COPY_FILE_IN_META:
{
    String item=(String)opt.params[0];
    RawResource res=srcStore.getResource(item);
    dstStore.putResource(item,res.inputStream,res.timestamp);
    res.inputStream.close();
    logger.info("Item " + item + " is copied");
    break;
  }
case COPY_DICT_OR_SNAPSHOT:
{
  String item=(String)opt.params[0];
  if (item.toLowerCase().endsWith(".dict")) {
    DictionaryManager dstDictMgr=DictionaryManager.getInstance(dstConfig);
    DictionaryManager srcDicMgr=DictionaryManager.getInstance(srcConfig);
    DictionaryInfo dictSrc=srcDicMgr.getDictionaryInfo(item);
    long ts=dictSrc.getLastModified();
    dictSrc.setLastModified(0);
    DictionaryInfo dictSaved=dstDictMgr.trySaveNewDict(dictSrc.getDictionaryObject(),dictSrc);
    dictSrc.setLastModified(ts);
    if (dictSaved == dictSrc) {
      logger.info("Item " + item + " is copied");
    }
 else {
      String cubeName=(String)opt.params[1];
      String cubeResPath=CubeInstance.concatResourcePath(cubeName);
      Serializer<CubeInstance> cubeSerializer=new JsonSerializer<CubeInstance>(CubeInstance.class);
      CubeInstance cube=dstStore.getResource(cubeResPath,CubeInstance.class,cubeSerializer);
      for (      CubeSegment segment : cube.getSegments()) {
        for (        Map.Entry<String,String> entry : segment.getDictionaries().entrySet()) {
          if (entry.getValue().equalsIgnoreCase(item)) {
            entry.setValue(dictSaved.getResourcePath());
          }
        }
      }
      dstStore.putResource(cubeResPath,cube,cubeSerializer);
      logger.info("Item " + item + " is dup, instead "+ dictSaved.getResourcePath()+ " is reused");
    }
  }
 else   if (item.toLowerCase().endsWith(".snapshot")) {
    SnapshotManager dstSnapMgr=SnapshotManager.getInstance(dstConfig);
    SnapshotManager srcSnapMgr=SnapshotManager.getInstance(srcConfig);
    SnapshotTable snapSrc=srcSnapMgr.getSnapshotTable(item);
    long ts=snapSrc.getLastModified();
    snapSrc.setLastModified(0);
    SnapshotTable snapSaved=dstSnapMgr.trySaveNewSnapshot(snapSrc);
    snapSrc.setLastModified(ts);
    if (snapSaved == snapSrc) {
      logger.info("Item " + item + " is copied");
    }
 else {
      String cubeName=(String)opt.params[1];
      String cubeResPath=CubeInstance.concatResourcePath(cubeName);
      Serializer<CubeInstance> cubeSerializer=new JsonSerializer<CubeInstance>(CubeInstance.class);
      CubeInstance cube=dstStore.getResource(cubeResPath,CubeInstance.class,cubeSerializer);
      for (      CubeSegment segment : cube.getSegments()) {
        for (        Map.Entry<String,String> entry : segment.getSnapshots().entrySet()) {
          if (entry.getValue().equalsIgnoreCase(item)) {
            entry.setValue(snapSaved.getResourcePath());
          }
        }
      }
      dstStore.putResource(cubeResPath,cube,cubeSerializer);
      logger.info("Item " + item + " is dup, instead "+ snapSaved.getResourcePath()+ " is reused");
    }
  }
 else {
    logger.error("unknown item found: " + item);
    logger.info("ignore it");
  }
  break;
}
case RENAME_FOLDER_IN_HDFS:
{
String srcPath=(String)opt.params[0];
String dstPath=(String)opt.params[1];
hdfsFS.rename(new Path(srcPath),new Path(dstPath));
logger.info("HDFS Folder renamed from " + srcPath + " to "+ dstPath);
break;
}
case ADD_INTO_PROJECT:
{
String cubeName=(String)opt.params[0];
String projectName=(String)opt.params[1];
String projectResPath=ProjectInstance.concatResourcePath(projectName);
Serializer<ProjectInstance> projectSerializer=new JsonSerializer<ProjectInstance>(ProjectInstance.class);
ProjectInstance project=dstStore.getResource(projectResPath,ProjectInstance.class,projectSerializer);
project.removeRealization(RealizationType.CUBE,cubeName);
project.addRealizationEntry(RealizationType.CUBE,cubeName);
dstStore.putResource(projectResPath,project,projectSerializer);
logger.info("Project instance for " + projectName + " is corrected");
break;
}
case COPY_ACL:
{
String cubeId=(String)opt.params[0];
HTableInterface srcAclHtable=null;
HTableInterface destAclHtable=null;
try {
srcAclHtable=HBaseConnection.get(srcConfig.getMetadataUrl()).getTable(srcConfig.getMetadataUrlPrefix() + "_acl");
destAclHtable=HBaseConnection.get(dstConfig.getMetadataUrl()).getTable(dstConfig.getMetadataUrlPrefix() + "_acl");
Result result=srcAclHtable.get(new Get(Bytes.toBytes(cubeId)));
for (Cell cell : result.listCells()) {
Put put=new Put(Bytes.toBytes(cubeId));
put.add(CellUtil.cloneFamily(cell),CellUtil.cloneQualifier(cell),CellUtil.cloneValue(cell));
destAclHtable.put(put);
}
destAclHtable.flushCommits();
}
  finally {
IOUtils.closeQuietly(srcAclHtable);
IOUtils.closeQuietly(destAclHtable);
}
break;
}
case PURGE_AND_DISABLE:
{
String cubeName=(String)opt.params[0];
String cubeResPath=CubeInstance.concatResourcePath(cubeName);
Serializer<CubeInstance> cubeSerializer=new JsonSerializer<CubeInstance>(CubeInstance.class);
CubeInstance cube=srcStore.getResource(cubeResPath,CubeInstance.class,cubeSerializer);
cube.getSegments().clear();
cube.setStatus(RealizationStatusEnum.DISABLED);
srcStore.putResource(cubeResPath,cube,cubeSerializer);
logger.info("Cube " + cubeName + " is purged and disabled in "+ srcConfig.getMetadataUrl());
}
}
}
