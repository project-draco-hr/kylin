{
  try {
    BeanValidator.validateAccssor(ColumnMeta.class,new String[0]);
    BeanValidator.validateAccssor(TableMeta.class,new String[0]);
    BeanValidator.validateAccssor(SelectedColumnMeta.class,new String[0]);
    BeanValidator.validateAccssor(AccessRequest.class,new String[0]);
    BeanValidator.validateAccssor(CubeRequest.class,new String[0]);
    BeanValidator.validateAccssor(JobListRequest.class,new String[0]);
    BeanValidator.validateAccssor(SQLRequest.class,new String[0]);
    BeanValidator.validateAccssor(AccessEntryResponse.class,new String[0]);
    BeanValidator.validateAccssor(SQLResponse.class,new String[0]);
  }
 catch (  IntrospectionException e) {
  }
  new SQLResponse(null,null,null,0,true,null);
  SelectedColumnMeta coulmnMeta=new SelectedColumnMeta(false,false,false,false,0,false,0,null,null,null,null,null,0,0,0,null,false,false,false);
  Assert.assertTrue(!coulmnMeta.isAutoIncrement());
  Assert.assertTrue(!coulmnMeta.isCaseSensitive());
  Assert.assertTrue(!coulmnMeta.isSearchable());
  Assert.assertTrue(!coulmnMeta.isCurrency());
  Assert.assertTrue(coulmnMeta.getIsNullable() == 0);
  Assert.assertTrue(!coulmnMeta.isSigned());
  Assert.assertEquals(Constant.ACCESS_HAS_ROLE_ADMIN,"hasRole('ROLE_ADMIN')");
  Assert.assertEquals(Constant.ACCESS_POST_FILTER_READ,"hasRole('ROLE_ADMIN') or hasPermission(filterObject, 'READ') or hasPermission(filterObject, 'MANAGEMENT') " + "or hasPermission(filterObject, 'OPERATION') or hasPermission(filterObject, 'ADMINISTRATION')");
  Assert.assertEquals(Constant.FakeCatalogName,"defaultCatalog");
  Assert.assertEquals(Constant.FakeSchemaName,"defaultSchema");
  Assert.assertEquals(Constant.IDENTITY_ROLE,"role");
  Assert.assertEquals(Constant.IDENTITY_USER,"user");
}
