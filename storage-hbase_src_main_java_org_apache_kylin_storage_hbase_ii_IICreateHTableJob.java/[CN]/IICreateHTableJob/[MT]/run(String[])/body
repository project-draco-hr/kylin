{
  Options options=new Options();
  HBaseAdmin admin=null;
  try {
    options.addOption(OPTION_II_NAME);
    options.addOption(OPTION_HTABLE_NAME);
    parseOptions(options,args);
    String tableName=getOptionValue(OPTION_HTABLE_NAME);
    String iiName=getOptionValue(OPTION_II_NAME);
    KylinConfig config=KylinConfig.getInstanceFromEnv();
    IIManager iiManager=IIManager.getInstance(config);
    IIInstance ii=iiManager.getII(iiName);
    int sharding=ii.getDescriptor().getSharding();
    Configuration conf=HBaseConfiguration.create(getConf());
    admin=new HBaseAdmin(conf);
    if (admin.tableExists(tableName)) {
      if (admin.isTableEnabled(tableName)) {
        logger.info("Table " + tableName + " already exists and is enabled, no need to create.");
        return 0;
      }
 else {
        logger.error("Table " + tableName + " is disabled, couldn't append data");
        return 1;
      }
    }
    HTableDescriptor tableDesc=new HTableDescriptor(TableName.valueOf(tableName));
    HColumnDescriptor cf=new HColumnDescriptor(IIDesc.HBASE_FAMILY);
    cf.setMaxVersions(1);
    String hbaseDefaultCC=config.getHbaseDefaultCompressionCodec().toLowerCase();
switch (hbaseDefaultCC) {
case "snappy":
{
        logger.info("hbase will use snappy to compress data");
        cf.setCompressionType(Compression.Algorithm.SNAPPY);
        break;
      }
case "lzo":
{
      logger.info("hbase will use lzo to compress data");
      cf.setCompressionType(Compression.Algorithm.LZO);
      break;
    }
case "gz":
case "gzip":
{
    logger.info("hbase will use gzip to compress data");
    cf.setCompressionType(Compression.Algorithm.GZ);
    break;
  }
case "lz4":
{
  logger.info("hbase will use lz4 to compress data");
  cf.setCompressionType(Compression.Algorithm.LZ4);
  break;
}
default :
{
logger.info("hbase will not user any compression codec to compress data");
}
}
cf.setDataBlockEncoding(DataBlockEncoding.FAST_DIFF);
tableDesc.addFamily(cf);
tableDesc.setValue(IRealizationConstants.HTableTag,config.getMetadataUrlPrefix());
tableDesc.setValue(IRealizationConstants.HTableCreationTime,String.valueOf(System.currentTimeMillis()));
tableDesc.setValue(HTableDescriptor.SPLIT_POLICY,DisabledRegionSplitPolicy.class.getName());
if (User.isHBaseSecurityEnabled(conf)) {
tableDesc.addCoprocessor("org.apache.hadoop.hbase.security.access.SecureBulkLoadEndpoint");
}
IIDeployCoprocessorCLI.deployCoprocessor(tableDesc);
byte[][] splitKeys=getSplits(sharding);
if (splitKeys.length == 0) splitKeys=null;
admin.createTable(tableDesc,splitKeys);
if (splitKeys != null) {
for (int i=0; i < splitKeys.length; i++) {
logger.info("split key " + i + ": "+ BytesUtil.toHex(splitKeys[i]));
}
}
logger.info("create hbase table " + tableName + " done.");
return 0;
}
 catch (Exception e) {
printUsage(options);
throw e;
}
 finally {
if (admin != null) admin.close();
}
}
