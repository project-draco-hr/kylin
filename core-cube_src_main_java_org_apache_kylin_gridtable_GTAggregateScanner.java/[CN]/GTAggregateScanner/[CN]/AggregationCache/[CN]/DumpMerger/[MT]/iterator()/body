{
  return new Iterator<Pair<byte[],MeasureAggregator[]>>(){
    @Override public boolean hasNext(){
      return !minHeap.isEmpty();
    }
    private void internalAggregate(){
      Pair<byte[],Integer> peekEntry=minHeap.poll();
      resultAggrs.aggregate(dumpCurrentValues.get(peekEntry.getValue()));
      enqueueFromDump(peekEntry.getValue());
    }
    @Override public Pair<byte[],MeasureAggregator[]> next(){
      resultAggrs.reset();
      byte[] peekKey=minHeap.peek().getKey();
      internalAggregate();
      while (!minHeap.isEmpty() && bytesComparator.compare(peekKey,minHeap.peek().getKey()) == 0) {
        internalAggregate();
      }
      return new Pair(peekKey,resultMeasureAggregators);
    }
    @Override public void remove(){
      throw new UnsupportedOperationException();
    }
  }
;
}
