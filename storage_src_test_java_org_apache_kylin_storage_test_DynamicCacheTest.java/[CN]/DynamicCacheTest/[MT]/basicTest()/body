{
  final StorageContext context=new StorageContext();
  final List<TblColRef> groups=StorageMockUtils.buildGroups();
  final TblColRef partitionCol=groups.get(0);
  final List<FunctionDesc> aggregations=StorageMockUtils.buildAggregations();
  final TupleInfo tupleInfo=StorageMockUtils.newTupleInfo(groups,aggregations);
  SQLDigest sqlDigest=new SQLDigest("default.test_kylin_fact",null,null,Lists.<TblColRef>newArrayList(),groups,Lists.newArrayList(partitionCol),Lists.<TblColRef>newArrayList(),aggregations);
  ITuple aTuple=new TsOnlyTuple(partitionCol,"2011-02-01");
  ITuple bTuple=new TsOnlyTuple(partitionCol,"2012-02-01");
  final List<ITuple> allTuples=Lists.newArrayList(aTuple,bTuple);
  final AtomicInteger underlyingSEHitCount=new AtomicInteger(0);
  final List<Integer> returnedRowPerSearch=Lists.newArrayList();
  CacheFledgedDynamicStorageEngine dynamicCache=new CacheFledgedDynamicStorageEngine(new ICachableStorageQuery(){
    @Override public ITupleIterator search(    StorageContext context,    SQLDigest sqlDigest,    TupleInfo returnTupleInfo){
      Range<Long> tsRagneInQuery=TsConditionExtractor.extractTsCondition(partitionCol,sqlDigest.filter);
      List<ITuple> ret=Lists.newArrayList();
      for (      ITuple tuple : allTuples) {
        if (tsRagneInQuery.contains(Tuple.getTs(tuple,partitionCol))) {
          ret.add(tuple);
        }
      }
      underlyingSEHitCount.incrementAndGet();
      returnedRowPerSearch.add(ret.size());
      return new SimpleTupleIterator(ret.iterator());
    }
    @Override public boolean isDynamic(){
      return true;
    }
    @Override public Range<Long> getVolatilePeriod(){
      return Ranges.greaterThan(DateFormat.stringToMillis("2011-02-01"));
    }
    @Override public String getStorageUUID(){
      return "111ca32a-a33e-4b69-12aa-0bb8b1f8c191";
    }
  }
,partitionCol);
  sqlDigest.filter=StorageMockUtils.buildTs2010Filter(groups.get(0));
  ITupleIterator firstIterator=dynamicCache.search(context,sqlDigest,tupleInfo);
  IdentityHashMap<ITuple,Void> firstResults=new IdentityHashMap<>();
  while (firstIterator.hasNext()) {
    firstResults.put(firstIterator.next(),null);
  }
  firstIterator.close();
  sqlDigest.filter=StorageMockUtils.buildTs2011Filter(groups.get(0));
  ITupleIterator secondIterator=dynamicCache.search(context,sqlDigest,tupleInfo);
  IdentityHashMap<ITuple,Void> secondResults=new IdentityHashMap<>();
  while (secondIterator.hasNext()) {
    secondResults.put(secondIterator.next(),null);
  }
  secondIterator.close();
  Assert.assertEquals(2,firstResults.size());
  IdentityUtils.collectionReferenceEquals(firstResults.keySet(),secondResults.keySet());
  Assert.assertEquals(2,underlyingSEHitCount.get());
  Assert.assertEquals(new Integer(2),returnedRowPerSearch.get(0));
  Assert.assertEquals(new Integer(1),returnedRowPerSearch.get(1));
}
