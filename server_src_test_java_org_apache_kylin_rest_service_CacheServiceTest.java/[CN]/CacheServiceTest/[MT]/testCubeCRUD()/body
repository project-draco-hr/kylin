{
  final Broadcaster broadcaster=Broadcaster.getInstance();
  broadcaster.getCounterAndClear();
  getStore().deleteResource("/cube/a_whole_new_cube.json");
  final String cubeName="a_whole_new_cube";
  final CubeManager cubeManager=getCubeManager(configA);
  final CubeManager cubeManagerB=getCubeManager(configB);
  final ProjectManager projectManager=getProjectManager(configA);
  final ProjectManager projectManagerB=getProjectManager(configB);
  final CubeDescManager cubeDescManager=getCubeDescManager(configA);
  final CubeDescManager cubeDescManagerB=getCubeDescManager(configB);
  final CubeDesc cubeDesc=getCubeDescManager(configA).getCubeDesc("test_kylin_cube_with_slr_desc");
  assertTrue(cubeManager.getCube(cubeName) == null);
  assertTrue(cubeManagerB.getCube(cubeName) == null);
  assertTrue(!containsRealization(projectManager.listAllRealizations(ProjectInstance.DEFAULT_PROJECT_NAME),RealizationType.CUBE,cubeName));
  assertTrue(!containsRealization(projectManagerB.listAllRealizations(ProjectInstance.DEFAULT_PROJECT_NAME),RealizationType.CUBE,cubeName));
  cubeManager.createCube(cubeName,ProjectInstance.DEFAULT_PROJECT_NAME,cubeDesc,null);
  assertEquals(2,broadcaster.getCounterAndClear());
  waitForCounterAndClear(2);
  assertNotNull(cubeManager.getCube(cubeName));
  assertNotNull(cubeManagerB.getCube(cubeName));
  assertTrue(containsRealization(projectManager.listAllRealizations(ProjectInstance.DEFAULT_PROJECT_NAME),RealizationType.CUBE,cubeName));
  assertTrue(containsRealization(projectManagerB.listAllRealizations(ProjectInstance.DEFAULT_PROJECT_NAME),RealizationType.CUBE,cubeName));
  CubeInstance cube=cubeManager.getCube(cubeName);
  assertEquals(0,cube.getSegments().size());
  assertEquals(0,cubeManagerB.getCube(cubeName).getSegments().size());
  CubeSegment segment=new CubeSegment();
  segment.setName("test_segment");
  cube=cubeManager.updateCube(cube,Lists.newArrayList(segment),null,null,null,true);
  assertEquals(2,broadcaster.getCounterAndClear());
  waitForCounterAndClear(2);
  assertEquals(1,cubeManagerB.getCube(cubeName).getSegments().size());
  assertEquals(segment.getName(),cubeManagerB.getCube(cubeName).getSegments().get(0).getName());
  cubeManager.dropCube(cubeName,false);
  assertEquals(2,broadcaster.getCounterAndClear());
  waitForCounterAndClear(2);
  assertTrue(cubeManager.getCube(cubeName) == null);
  assertTrue(!containsRealization(projectManager.listAllRealizations(ProjectInstance.DEFAULT_PROJECT_NAME),RealizationType.CUBE,cubeName));
  assertTrue(cubeManagerB.getCube(cubeName) == null);
  assertTrue(!containsRealization(projectManagerB.listAllRealizations(ProjectInstance.DEFAULT_PROJECT_NAME),RealizationType.CUBE,cubeName));
  final String cubeDescName="test_cube_desc";
  cubeDesc.setName(cubeDescName);
  cubeDesc.setLastModified(0);
  assertTrue(cubeDescManager.getCubeDesc(cubeDescName) == null);
  assertTrue(cubeDescManagerB.getCubeDesc(cubeDescName) == null);
  cubeDescManager.createCubeDesc(cubeDesc);
  assertEquals(1,broadcaster.getCounterAndClear());
  waitForCounterAndClear(1);
  assertNotNull(cubeDescManager.getCubeDesc(cubeDescName));
  assertNotNull(cubeDescManagerB.getCubeDesc(cubeDescName));
  cubeDesc.setNotifyList(Arrays.asList("test@email","test@email","test@email"));
  cubeDescManager.updateCubeDesc(cubeDesc);
  assertEquals(1,broadcaster.getCounterAndClear());
  waitForCounterAndClear(1);
  assertEquals(cubeDesc.getNotifyList(),cubeDescManagerB.getCubeDesc(cubeDescName).getNotifyList());
  cubeDescManager.removeCubeDesc(cubeDesc);
  assertEquals(1,broadcaster.getCounterAndClear());
  waitForCounterAndClear(1);
  assertTrue(cubeDescManager.getCubeDesc(cubeDescName) == null);
  assertTrue(cubeDescManagerB.getCubeDesc(cubeDescName) == null);
  getStore().deleteResource("/cube/a_whole_new_cube.json");
}
