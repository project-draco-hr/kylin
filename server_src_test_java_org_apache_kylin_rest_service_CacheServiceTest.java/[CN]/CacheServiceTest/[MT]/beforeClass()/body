{
  createTestMetadata(LOCALMETA_TEST_DATA);
  configA=KylinConfig.getInstanceFromEnv();
  configB=KylinConfig.getKylinConfigFromInputStream(KylinConfig.getKylinPropertiesAsInputSteam());
  configB.setMetadataUrl("../examples/test_metadata");
  server=new Server(7070);
  ServletContextHandler context=new ServletContextHandler(ServletContextHandler.SESSIONS);
  context.setContextPath("/");
  server.setHandler(context);
  context.addServlet(new ServletHolder(new BroadcasterReceiveServlet(new BroadcasterReceiveServlet.BroadcasterHandler(){
    @Override public void handle(    String type,    String name,    String event){
      final CacheService cacheService=new CacheService(){
        @Override public KylinConfig getConfig(){
          return configB;
        }
      }
;
      cacheService.setCubeService(new CubeService(){
        @Override public KylinConfig getConfig(){
          return configB;
        }
      }
);
      Broadcaster.TYPE wipeType=Broadcaster.TYPE.getType(type);
      Broadcaster.EVENT wipeEvent=Broadcaster.EVENT.getEvent(event);
      final String log="wipe cache type: " + wipeType + " event:"+ wipeEvent+ " name:"+ name;
      logger.info(log);
      counter.incrementAndGet();
switch (wipeEvent) {
case CREATE:
case UPDATE:
        cacheService.rebuildCache(wipeType,name);
      break;
case DROP:
    cacheService.removeCache(wipeType,name);
  break;
default :
throw new RuntimeException("invalid type:" + wipeEvent);
}
}
}
)),"/");
server.start();
List<GrantedAuthority> authorities=new ArrayList<GrantedAuthority>();
User user=new User("ADMIN","ADMIN",authorities);
Authentication authentication=new TestingAuthenticationToken(user,"ADMIN","ROLE_ADMIN");
SecurityContextHolder.getContext().setAuthentication(authentication);
}
