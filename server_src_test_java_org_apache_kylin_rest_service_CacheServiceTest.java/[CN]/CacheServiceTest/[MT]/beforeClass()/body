{
  staticCreateTestMetadata();
  configA=KylinConfig.getInstanceFromEnv();
  configA.setProperty("kylin.rest.servers","localhost:7070");
  configB=KylinConfig.getKylinConfigFromInputStream(KylinConfig.getKylinPropertiesAsInputSteam());
  configB.setProperty("kylin.rest.servers","localhost:7070");
  configB.setMetadataUrl("../examples/test_metadata");
  server=new Server(7070);
  ServletContextHandler context=new ServletContextHandler(ServletContextHandler.SESSIONS);
  context.setContextPath("/");
  server.setHandler(context);
  final CacheService serviceA=new CacheService(){
    @Override public KylinConfig getConfig(){
      return configA;
    }
  }
;
  final CacheService serviceB=new CacheService(){
    @Override public KylinConfig getConfig(){
      return configB;
    }
  }
;
  final CubeService cubeServiceA=new CubeService(){
    @Override public KylinConfig getConfig(){
      return configA;
    }
  }
;
  final CubeService cubeServiceB=new CubeService(){
    @Override public KylinConfig getConfig(){
      return configB;
    }
  }
;
  serviceA.setCubeService(cubeServiceA);
  serviceA.initCubeChangeListener();
  serviceB.setCubeService(cubeServiceB);
  serviceB.initCubeChangeListener();
  context.addServlet(new ServletHolder(new BroadcasterReceiveServlet(new BroadcasterReceiveServlet.BroadcasterHandler(){
    @Override public void handle(    String type,    String name,    String event){
      Broadcaster.TYPE wipeType=Broadcaster.TYPE.getType(type);
      Broadcaster.EVENT wipeEvent=Broadcaster.EVENT.getEvent(event);
      final String log="wipe cache type: " + wipeType + " event:"+ wipeEvent+ " name:"+ name;
      logger.info(log);
      try {
switch (wipeEvent) {
case CREATE:
case UPDATE:
          serviceA.rebuildCache(wipeType,name);
        serviceB.rebuildCache(wipeType,name);
      break;
case DROP:
    serviceA.removeCache(wipeType,name);
  serviceB.removeCache(wipeType,name);
break;
default :
throw new RuntimeException("invalid type:" + wipeEvent);
}
}
  finally {
counter.incrementAndGet();
}
}
}
)),"/");
server.start();
}
