{
  logger.info("Job Fetcher is running...");
  Map<String,Executable> runningJobs=context.getRunningJobs();
  if (runningJobs.size() >= jobEngineConfig.getMaxConcurrentJobLimit()) {
    logger.warn("There are too many jobs running, Job Fetch will wait until next schedule time");
    return;
  }
  for (  final String id : executableManager.getAllJobIds()) {
    if (runningJobs.containsKey(id)) {
      logger.info("Job id:" + id + " is already running");
      continue;
    }
    final Output output=executableManager.getOutput(id);
    if ((output.getState() != ExecutableState.READY)) {
      logger.info("Job id:" + id + " not runnable");
      continue;
    }
    AbstractExecutable executable=executableManager.getJob(id);
    String jobDesc=executable.toString();
    logger.info(jobDesc + " prepare to schedule");
    try {
      context.addRunningJob(executable);
      jobPool.execute(new JobRunner(executable));
      logger.info(jobDesc + " scheduled");
    }
 catch (    Exception ex) {
      context.removeRunningJob(executable);
      logger.warn(jobDesc + " fail to schedule",ex);
    }
  }
  logger.info("Job Fetcher finish running");
}
