{
  ITupleIterator iterator1=searchRealization(hybridInstance.getHistoryRealizationInstance(),context,sqlDigest);
  long boundary=hybridInstance.getHistoryRealizationInstance().getDateRangeEnd();
  FastDateFormat format=FastDateFormat.getInstance("yyyy-MM-dd");
  String boundaryDate=format.format(boundary);
  Collection<TblColRef> filterCols=sqlDigest.filterColumns;
  String modelName=hybridInstance.getModelName();
  MetadataManager metaMgr=getMetadataManager();
  DataModelDesc modelDesc=metaMgr.getDataModelDesc(modelName);
  if (modelDesc.getPartitionDesc() == null || modelDesc.getPartitionDesc().getPartitionDateColumnRef() == null)   return iterator1;
  String partitionColFull=modelDesc.getPartitionDesc().getPartitionDateColumn();
  String partitionTable=partitionColFull.substring(0,partitionColFull.lastIndexOf("."));
  String partitionCol=partitionColFull.substring(partitionColFull.lastIndexOf(".") + 1);
  TableDesc factTbl=metaMgr.getTableDesc(partitionTable);
  ColumnDesc columnDesc=factTbl.findColumnByName(partitionCol);
  TblColRef partitionColRef=new TblColRef(columnDesc);
  CompareTupleFilter compareTupleFilter=new CompareTupleFilter(TupleFilter.FilterOperatorEnum.GTE);
  ColumnTupleFilter columnTupleFilter=new ColumnTupleFilter(partitionColRef);
  ConstantTupleFilter constantTupleFilter=new ConstantTupleFilter(boundaryDate);
  compareTupleFilter.addChild(columnTupleFilter);
  compareTupleFilter.addChild(constantTupleFilter);
  if (sqlDigest.filter == null) {
    sqlDigest.filter=compareTupleFilter;
  }
 else {
    LogicalTupleFilter logicalTupleFilter=new LogicalTupleFilter(TupleFilter.FilterOperatorEnum.AND);
    logicalTupleFilter.addChild(sqlDigest.filter);
    logicalTupleFilter.addChild(compareTupleFilter);
    sqlDigest.filter=logicalTupleFilter;
  }
  boolean addFilterColumn=false, addAllColumn=false;
  if (!sqlDigest.filterColumns.contains(partitionColRef)) {
    sqlDigest.filterColumns.add(partitionColRef);
    addFilterColumn=true;
  }
  if (!sqlDigest.allColumns.contains(partitionColRef)) {
    sqlDigest.allColumns.add(partitionColRef);
    addAllColumn=true;
  }
  ITupleIterator iterator2=searchRealization(hybridInstance.getRealTimeRealizationInstance(),context,sqlDigest);
  sqlDigest.filter=sqlDigest.filter.getChildren().get(0);
  if (addFilterColumn)   sqlDigest.filterColumns.remove(partitionColRef);
  if (addAllColumn)   sqlDigest.allColumns.remove(partitionColRef);
  return new HybridTupleIterator(new ITupleIterator[]{iterator1,iterator2});
}
