{
  final StorageContext context=new StorageContext();
  final List<TblColRef> groups=StorageMockUtils.buildGroups();
  final List<FunctionDesc> aggregations=StorageMockUtils.buildAggregations();
  final TupleFilter filter=StorageMockUtils.buildFilter1(groups.get(0));
  final SQLDigest sqlDigest=new SQLDigest("default.test_kylin_fact",filter,null,Collections.<TblColRef>emptySet(),groups,Collections.<TblColRef>emptySet(),Collections.<TblColRef>emptySet(),aggregations);
  final TupleInfo tupleInfo=StorageMockUtils.newTupleInfo(groups,aggregations);
  final List<ITuple> ret=Lists.newArrayList();
  ret.add(new Tuple(tupleInfo));
  ret.add(new Tuple(tupleInfo));
  ret.add(new Tuple(tupleInfo));
  final AtomicInteger underlyingSEHitCount=new AtomicInteger(0);
  CacheFledgedStaticStorageEngine cacheFledgedStaticStorageEngine=new CacheFledgedStaticStorageEngine(new IStorageEngine(){
    @Override public ITupleIterator search(    StorageContext context,    SQLDigest sqlDigest,    TupleInfo returnTupleInfo){
      underlyingSEHitCount.incrementAndGet();
      return new SimpleTupleIterator(ret.iterator());
    }
    @Override public boolean isDynamic(){
      return false;
    }
    @Override public Range<Long> getVolatilePeriod(){
      return null;
    }
  }
);
  ITupleIterator firstIterator=cacheFledgedStaticStorageEngine.search(context,sqlDigest,tupleInfo);
  IdentityHashMap<ITuple,Void> firstResults=new IdentityHashMap<>();
  while (firstIterator.hasNext()) {
    firstResults.put(firstIterator.next(),null);
  }
  firstIterator.close();
  ITupleIterator secondIterator=cacheFledgedStaticStorageEngine.search(context,sqlDigest,tupleInfo);
  IdentityHashMap<ITuple,Void> secondResults=new IdentityHashMap<>();
  while (secondIterator.hasNext()) {
    secondResults.put(secondIterator.next(),null);
  }
  secondIterator.close();
  ITupleIterator thirdIterator=cacheFledgedStaticStorageEngine.search(context,sqlDigest,tupleInfo);
  IdentityHashMap<ITuple,Void> thirdResults=new IdentityHashMap<>();
  while (thirdIterator.hasNext()) {
    thirdResults.put(thirdIterator.next(),null);
  }
  thirdIterator.close();
  Assert.assertEquals(3,firstResults.size());
  IdentityUtils.collectionReferenceEquals(firstResults.keySet(),secondResults.keySet());
  IdentityUtils.collectionReferenceEquals(thirdResults.keySet(),secondResults.keySet());
  Assert.assertEquals(1,underlyingSEHitCount.get());
}
