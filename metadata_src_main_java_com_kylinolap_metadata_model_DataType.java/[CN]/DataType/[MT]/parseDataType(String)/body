{
  datatype=datatype.trim().toLowerCase();
  datatype=replaceLegacy(datatype);
  Matcher m=TYPE_PATTERN.matcher(datatype);
  if (m.matches() == false)   throw new IllegalArgumentException("bad data type -- " + datatype + ", does not match "+ TYPE_PATTERN);
  name=replaceLegacy(m.group(1));
  precision=-1;
  scale=-1;
  String leftover=m.group(2);
  if (leftover != null) {
    String[] parts=leftover.split("\\s*,\\s*");
    for (int i=0; i < parts.length; i++) {
      int n;
      try {
        n=Integer.parseInt(parts[i]);
      }
 catch (      NumberFormatException e) {
        throw new IllegalArgumentException("bad data type -- " + datatype + ", precision/scale not numeric");
      }
      if (i == 0)       precision=n;
 else       if (i == 1)       scale=n;
 else       throw new IllegalArgumentException("bad data type -- " + datatype + ", too many precision/scale parts");
    }
  }
  if ((name.equals("char") || name.equals("varchar")) && precision == -1) {
    precision=256;
  }
  if ((name.equals("decimal") || name.equals("numeric")) && precision == -1) {
    precision=19;
    scale=4;
  }
  if (isHLLC() && HLLC_PRECISIONS.contains(precision) == false)   throw new IllegalArgumentException("HLLC precision must be one of " + HLLC_PRECISIONS);
}
