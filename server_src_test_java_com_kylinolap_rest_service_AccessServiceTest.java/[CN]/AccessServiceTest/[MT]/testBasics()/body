{
  Sid adminSid=accessService.getSid("ADMIN",true);
  Assert.assertNotNull(adminSid);
  Assert.assertNotNull(AclPermissionFactory.getPermissions());
  AclEntity ae=new MockAclEntity("test-domain-object");
  accessService.clean(ae,true);
  Acl acl=accessService.getAcl(ae);
  Assert.assertNull(acl);
  acl=accessService.init(ae,AclPermission.ADMINISTRATION);
  Assert.assertTrue(((PrincipalSid)acl.getOwner()).getPrincipal().equals("ADMIN"));
  Assert.assertTrue(accessService.generateAceResponses(acl).size() == 1);
  Sid modeler=accessService.getSid("MODELER",true);
  acl=accessService.grant(ae,AclPermission.ADMINISTRATION,modeler);
  Assert.assertTrue(accessService.generateAceResponses(acl).size() == 2);
  Long modelerEntryId=null;
  for (  AccessControlEntry ace : acl.getEntries()) {
    PrincipalSid sid=(PrincipalSid)ace.getSid();
    if (sid.getPrincipal().equals("MODELER")) {
      modelerEntryId=(Long)ace.getId();
      Assert.assertTrue(ace.getPermission() == AclPermission.ADMINISTRATION);
    }
  }
  acl=accessService.update(ae,modelerEntryId,AclPermission.READ);
  Assert.assertTrue(accessService.generateAceResponses(acl).size() == 2);
  for (  AccessControlEntry ace : acl.getEntries()) {
    PrincipalSid sid=(PrincipalSid)ace.getSid();
    if (sid.getPrincipal().equals("MODELER")) {
      modelerEntryId=(Long)ace.getId();
      Assert.assertTrue(ace.getPermission() == AclPermission.READ);
    }
  }
  AclEntity attachedEntity=new MockAclEntity("attached-domain-object");
  accessService.inherit(attachedEntity,ae);
  acl=accessService.revoke(ae,modelerEntryId);
  Assert.assertTrue(accessService.generateAceResponses(acl).size() == 1);
  accessService.clean(ae,true);
  acl=accessService.getAcl(ae);
  Assert.assertNull(acl);
}
