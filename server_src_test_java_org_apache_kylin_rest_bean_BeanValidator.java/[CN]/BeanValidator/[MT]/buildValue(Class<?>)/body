{
  final Constructor<?>[] ctrs=clazz.getConstructors();
  for (  Constructor<?> ctr : ctrs) {
    if (ctr.getParameterTypes().length == 0) {
      return ctr.newInstance();
    }
  }
  if (clazz.isArray()) {
    return Array.newInstance(clazz.getComponentType(),1);
  }
 else   if (List.class.isAssignableFrom(clazz)) {
    return Collections.emptyList();
  }
 else   if (Set.class.isAssignableFrom(clazz)) {
    return Collections.emptySet();
  }
 else   if (Map.class.isAssignableFrom(clazz)) {
    return Collections.emptyMap();
  }
 else   if (clazz == String.class) {
    return "TEST";
  }
 else   if (clazz == boolean.class || clazz == Boolean.class) {
    return true;
  }
 else   if (clazz == short.class || clazz == Short.class) {
    return (short)1;
  }
 else   if (clazz == int.class || clazz == Integer.class) {
    return 1;
  }
 else   if (clazz == long.class || clazz == Long.class) {
    return 1L;
  }
 else   if (clazz == double.class || clazz == Double.class) {
    return 1.0D;
  }
 else   if (clazz == float.class || clazz == Float.class) {
    return 1.0F;
  }
 else   if (clazz == char.class || clazz == Character.class) {
    return 'T';
  }
 else   if (clazz.isEnum()) {
    return clazz.getEnumConstants()[0];
  }
 else   if (clazz.isInterface()) {
    return Proxy.newProxyInstance(clazz.getClassLoader(),new java.lang.Class[]{clazz},new java.lang.reflect.InvocationHandler(){
      @Override public Object invoke(      Object proxy,      Method method,      Object[] args) throws Throwable {
        if (Object.class.getMethod("equals",Object.class).equals(method)) {
          return proxy == args[0];
        }
        if (Object.class.getMethod("hashCode",Object.class).equals(method)) {
          return Integer.valueOf(System.identityHashCode(proxy));
        }
        if (Object.class.getMethod("toString",Object.class).equals(method)) {
          return "Bean " + getMockedType(proxy);
        }
        return null;
      }
    }
);
  }
 else {
    System.err.println("Unable to build an instance of class " + clazz.getName() + ", please add some code to the "+ BeanValidator.class.getName()+ " class to do this.");
    return null;
  }
}
