{
  this.allColumns=allColumns;
  String[] properties=null;
  if (!StringUtils.isEmpty(propertiesStr)) {
    properties=propertiesStr.split(";");
    for (    String prop : properties) {
      try {
        String[] parts=prop.split("=");
        if (parts.length == 2) {
switch (parts[0]) {
case "tsColName":
            this.tsColName=parts[1];
          break;
case "tsParser":
        this.tsParser=parts[1];
      break;
default :
    break;
}
}
}
 catch (Exception e) {
logger.error("Failed to parse property " + prop);
}
}
}
logger.info("TimedJsonStreamParser with tsColName {}",tsColName);
if (!StringUtils.isEmpty(tsParser)) {
try {
Class clazz=Class.forName(tsParser);
Constructor constructor=clazz.getConstructor(String[].class);
streamTimeParser=(AbstractTimeParser)constructor.newInstance((Object)properties);
}
 catch (Exception e) {
throw new IllegalStateException("Invalid StreamingConfig, tsParser " + tsParser + ", parserProperties "+ propertiesStr+ ".",e);
}
}
 else {
throw new IllegalStateException("Invalid StreamingConfig, tsParser " + tsParser + ", parserProperties "+ propertiesStr+ ".");
}
mapper=new ObjectMapper();
mapper.disable(DeserializationFeature.FAIL_ON_UNKNOWN_PROPERTIES);
mapper.disable(DeserializationFeature.FAIL_ON_INVALID_SUBTYPE);
mapper.enable(DeserializationFeature.USE_JAVA_ARRAY_FOR_JSON_ARRAY);
}
