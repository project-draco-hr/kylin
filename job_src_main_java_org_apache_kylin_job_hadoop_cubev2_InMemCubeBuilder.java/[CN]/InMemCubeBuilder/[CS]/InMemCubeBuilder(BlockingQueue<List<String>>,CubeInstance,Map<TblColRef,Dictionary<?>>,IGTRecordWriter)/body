{
  if (dictionaryMap == null || dictionaryMap.isEmpty()) {
    throw new IllegalArgumentException();
  }
  this.queue=queue;
  this.desc=cube.getDescriptor();
  this.cuboidScheduler=new CuboidScheduler(desc);
  this.dictionaryMap=dictionaryMap;
  this.gtRecordWriter=gtRecordWriter;
  this.baseCuboidId=Cuboid.getBaseCuboidId(desc);
  this.intermediateTableDesc=new CubeJoinedFlatTableDesc(desc,null);
  this.measureCodec=new MeasureCodec(desc.getMeasures());
  Map<String,Integer> measureIndexMap=Maps.newHashMap();
  List<String> metricsAggrFuncsList=Lists.newArrayList();
  measureCount=desc.getMeasures().size();
  List<MeasureDesc> measureDescsList=Lists.newArrayList();
  hbaseMeasureRefIndex=new int[measureCount];
  int measureRef=0;
  for (  HBaseColumnFamilyDesc familyDesc : desc.getHbaseMapping().getColumnFamily()) {
    for (    HBaseColumnDesc hbaseColDesc : familyDesc.getColumns()) {
      for (      MeasureDesc measure : hbaseColDesc.getMeasures()) {
        for (int j=0; j < measureCount; j++) {
          if (desc.getMeasures().get(j).equals(measure)) {
            measureDescsList.add(measure);
            hbaseMeasureRefIndex[measureRef]=j;
            break;
          }
        }
        measureRef++;
      }
    }
  }
  for (int i=0; i < measureCount; i++) {
    MeasureDesc measureDesc=measureDescsList.get(i);
    metricsAggrFuncsList.add(measureDesc.getFunction().getExpression());
    measureIndexMap.put(measureDesc.getName(),i);
  }
  this.metricsAggrFuncs=metricsAggrFuncsList.toArray(new String[metricsAggrFuncsList.size()]);
  this.dependentMeasures=Maps.newHashMap();
  for (int i=0; i < measureCount; i++) {
    String depMsrRef=measureDescsList.get(i).getDependentMeasureRef();
    if (depMsrRef != null) {
      int index=measureIndexMap.get(depMsrRef);
      dependentMeasures.put(i,index);
    }
  }
  this.measureDescs=desc.getMeasures().toArray(new MeasureDesc[measureCount]);
}
