{
  if (dictionaryMap == null || dictionaryMap.isEmpty()) {
    throw new IllegalArgumentException();
  }
  this.queue=queue;
  this.desc=cube.getDescriptor();
  this.cuboidScheduler=new CuboidScheduler(desc);
  this.dictionaryMap=dictionaryMap;
  this.gtRecordWriter=gtRecordWriter;
  this.baseCuboidId=Cuboid.getBaseCuboidId(desc);
  this.intermediateTableDesc=new CubeJoinedFlatTableDesc(desc,null);
  this.measureCodec=new MeasureCodec(desc.getMeasures());
  Map<String,Integer> measureIndexMap=Maps.newHashMap();
  List<String> metricsAggrFuncsList=Lists.newArrayList();
  final int measureCount=desc.getMeasures().size();
  for (int i=0; i < measureCount; i++) {
    MeasureDesc measureDesc=desc.getMeasures().get(i);
    metricsAggrFuncsList.add(measureDesc.getFunction().getExpression());
    measureIndexMap.put(desc.getMeasures().get(i).getName(),i);
  }
  this.metricsAggrFuncs=metricsAggrFuncsList.toArray(new String[metricsAggrFuncsList.size()]);
  this.dependentMeasures=Maps.newHashMap();
  for (int i=0; i < measureCount; i++) {
    String depMsrRef=desc.getMeasures().get(i).getDependentMeasureRef();
    if (depMsrRef != null) {
      int index=measureIndexMap.get(depMsrRef);
      dependentMeasures.put(i,index);
    }
  }
}
