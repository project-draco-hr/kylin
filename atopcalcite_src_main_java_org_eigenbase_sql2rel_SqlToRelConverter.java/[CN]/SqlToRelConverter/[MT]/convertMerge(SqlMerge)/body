{
  RelOptTable targetTable=getTargetTable(call);
  List<String> targetColumnNameList=new ArrayList<String>();
  SqlUpdate updateCall=call.getUpdateCall();
  if (updateCall != null) {
    for (    SqlNode targetColumn : updateCall.getTargetColumnList()) {
      SqlIdentifier id=(SqlIdentifier)targetColumn;
      String name=id.getSimple();
      targetColumnNameList.add(name);
    }
  }
  RelNode mergeSourceRel=convertSelect(call.getSourceSelect());
  SqlInsert insertCall=call.getInsertCall();
  int nLevel1Exprs=0;
  List<RexNode> level1InsertExprs=null;
  List<RexNode> level2InsertExprs=null;
  if (insertCall != null) {
    RelNode insertRel=convertInsert(insertCall);
    level1InsertExprs=((ProjectRel)insertRel.getInput(0)).getProjects();
    if (insertRel.getInput(0).getInput(0) instanceof ProjectRel) {
      level2InsertExprs=((ProjectRel)insertRel.getInput(0).getInput(0)).getProjects();
    }
    nLevel1Exprs=level1InsertExprs.size();
  }
  JoinRel joinRel=(JoinRel)mergeSourceRel.getInput(0);
  int nSourceFields=joinRel.getLeft().getRowType().getFieldCount();
  List<RexNode> projects=new ArrayList<RexNode>();
  for (int level1Idx=0; level1Idx < nLevel1Exprs; level1Idx++) {
    if ((level2InsertExprs != null) && (level1InsertExprs.get(level1Idx) instanceof RexInputRef)) {
      int level2Idx=((RexInputRef)level1InsertExprs.get(level1Idx)).getIndex();
      projects.add(level2InsertExprs.get(level2Idx));
    }
 else {
      projects.add(level1InsertExprs.get(level1Idx));
    }
  }
  if (updateCall != null) {
    final ProjectRel project=(ProjectRel)mergeSourceRel;
    projects.addAll(Util.skip(project.getProjects(),nSourceFields));
  }
  RelNode massagedRel=RelOptUtil.createProject(joinRel,projects,null,true);
  return new TableModificationRel(cluster,targetTable,catalogReader,massagedRel,TableModificationRel.Operation.MERGE,targetColumnNameList,false);
}
