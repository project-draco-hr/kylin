{
  final SqlKind kind=node.getKind();
switch (kind) {
case EXISTS:
case SELECT:
case MULTISET_QUERY_CONSTRUCTOR:
case MULTISET_VALUE_CONSTRUCTOR:
case CURSOR:
case SCALAR_QUERY:
    if (!registerOnlyScalarSubqueries || (kind == SqlKind.SCALAR_QUERY)) {
      bb.registerSubquery(node);
    }
  return;
default :
if (node instanceof SqlCall) {
  if (kind == SqlKind.OR || kind == SqlKind.NOT) {
    bb.subqueryNeedsOuterJoin=true;
  }
  for (  SqlNode operand : ((SqlCall)node).getOperandList()) {
    if (operand != null) {
      findSubqueries(bb,operand,kind == SqlKind.IN || registerOnlyScalarSubqueries);
    }
  }
}
 else if (node instanceof SqlNodeList) {
  final SqlNodeList nodes=(SqlNodeList)node;
  for (int i=0; i < nodes.size(); i++) {
    SqlNode child=nodes.get(i);
    findSubqueries(bb,child,kind == SqlKind.IN || registerOnlyScalarSubqueries);
  }
}
if (kind == SqlKind.IN) {
bb.registerSubquery(node);
}
}
}
