{
  final IIInstance ii=iiManager.getII(iiName);
  final IIDesc desc=ii.getDescriptor();
  final List<TblColRef> tblColRefs=desc.listAllColumns();
  final IISegment segment=ii.getFirstSegment();
  for (  TblColRef tblColRef : tblColRefs) {
    if (desc.isMetricsCol(tblColRef)) {
      logger.info("matrix:" + tblColRef.getName());
    }
 else {
      logger.info("measure:" + tblColRef.getName());
    }
  }
  LinkedBlockingDeque<StreamMessage> queue=new LinkedBlockingDeque<StreamMessage>();
  String[] args=new String[]{"-iiname",iiName,"-htablename",segment.getStorageLocationIdentifier()};
  ToolRunner.run(new IICreateHTableJob(),args);
  ExecutorService executorService=Executors.newSingleThreadExecutor();
  final IIStreamBuilder streamBuilder=new IIStreamBuilder(queue,iiName,segment.getStorageLocationIdentifier(),segment.getIIDesc(),0,desc.isUseLocalDictionary());
  streamBuilder.setStreamParser(new JsonStreamParser(segment.getIIDesc().listAllColumns()));
  BufferedReader br=new BufferedReader(new InputStreamReader(new FileInputStream("/Users/qianzhou/Projects/Kylin/eagle_5m.data")));
  String line;
  int count=0;
  while ((line=br.readLine()) != null) {
    queue.put(new StreamMessage(System.currentTimeMillis(),line.getBytes()));
    count++;
  }
  br.close();
  logger.info("total record count:" + count + " htable:"+ segment.getStorageLocationIdentifier());
  queue.put(StreamMessage.EOF);
  final Future<?> future=executorService.submit(streamBuilder);
  try {
    future.get();
  }
 catch (  Exception e) {
    logger.error("stream build failed",e);
    fail("stream build failed");
  }
  logger.info("stream build finished, htable name:" + segment.getStorageLocationIdentifier());
}
