{
  String type=jobPO.getType();
  try {
    Class<? extends AbstractExecutable> clazz=(Class<? extends AbstractExecutable>)Class.forName(type);
    Constructor<? extends AbstractExecutable> constructor=clazz.getConstructor();
    AbstractExecutable result=constructor.newInstance();
    result.setId(jobPO.getUuid());
    result.setExtra(jobPO.getExtra());
    List<JobPO> tasks=jobPO.getTasks();
    if (tasks != null && !tasks.isEmpty()) {
      Preconditions.checkArgument(result instanceof DefaultChainedExecutable);
      for (      JobPO subTask : tasks) {
        ((DefaultChainedExecutable)result).addTask(parseTo(subTask,jobDao.getJobOutput(subTask.getUuid())));
      }
    }
    if (jobOutput != null) {
      result.setStatus(ExecutableStatus.valueOf(jobOutput.getStatus()));
      result.setOutput(jobOutput.getContent());
    }
    return result;
  }
 catch (  ReflectiveOperationException e) {
    throw new IllegalArgumentException("cannot parse this job:" + jobPO.getId(),e);
  }
catch (  PersistentException e) {
    throw new IllegalArgumentException("cannot parse this job:" + jobPO.getId(),e);
  }
}
