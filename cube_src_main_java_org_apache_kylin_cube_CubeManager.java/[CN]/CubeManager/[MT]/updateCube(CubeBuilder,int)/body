{
  if (cubeBuilder == null || cubeBuilder.getCubeInstance() == null)   throw new IllegalStateException();
  CubeInstance cube=cubeBuilder.getCubeInstance();
  logger.info("Updating cube instance '" + cube.getName() + "'");
  if (cubeBuilder.getToAddSegs() != null)   cube.getSegments().addAll(Arrays.asList(cubeBuilder.getToAddSegs()));
  List<String> toRemoveResources=Lists.newArrayList();
  if (cubeBuilder.getToRemoveSegs() != null) {
    Iterator<CubeSegment> iterator=cube.getSegments().iterator();
    while (iterator.hasNext()) {
      CubeSegment currentSeg=iterator.next();
      for (      CubeSegment toRemoveSeg : cubeBuilder.getToRemoveSegs()) {
        if (currentSeg.getUuid().equals(toRemoveSeg.getUuid())) {
          iterator.remove();
          toRemoveResources.add(toRemoveSeg.getStatisticsResourcePath());
        }
      }
    }
  }
  if (cubeBuilder.getToUpdateSegs() != null) {
    for (    CubeSegment segment : cubeBuilder.getToUpdateSegs()) {
      for (int i=0; i < cube.getSegments().size(); i++) {
        if (cube.getSegments().get(i).getUuid().equals(segment.getUuid())) {
          cube.getSegments().set(i,segment);
        }
      }
    }
  }
  Collections.sort(cube.getSegments());
  if (!validateReadySegments(cube)) {
    throw new IllegalStateException("Has invalid Ready segments in cube " + cube.getName());
  }
  if (cubeBuilder.getStatus() != null) {
    cube.setStatus(cubeBuilder.getStatus());
  }
  if (cubeBuilder.getOwner() != null) {
    cube.setOwner(cubeBuilder.getOwner());
  }
  if (cubeBuilder.getCost() > 0) {
    cube.setCost(cubeBuilder.getCost());
  }
  try {
    getStore().putResource(cube.getResourcePath(),cube,CUBE_SERIALIZER);
  }
 catch (  IllegalStateException ise) {
    logger.warn("Write conflict to update cube " + cube.getName() + " at try "+ retry+ ", will retry...");
    if (retry >= 7) {
      logger.error("Retried 7 times till got error, abandoning...",ise);
      throw ise;
    }
    cube=reloadCubeLocal(cube.getName());
    cubeBuilder.setCubeInstance(cube);
    retry++;
    cube=updateCube(cubeBuilder,retry);
  }
  if (toRemoveResources.size() > 0) {
    for (    String resource : toRemoveResources) {
      try {
        getStore().deleteResource(resource);
      }
 catch (      IOException ioe) {
        logger.error("Failed to delete resource " + toRemoveResources.toString());
      }
    }
  }
  cubeMap.put(cube.getName(),cube);
  ProjectManager.getInstance(KylinConfig.getInstanceFromEnv()).clearL2Cache();
  return cube;
}
