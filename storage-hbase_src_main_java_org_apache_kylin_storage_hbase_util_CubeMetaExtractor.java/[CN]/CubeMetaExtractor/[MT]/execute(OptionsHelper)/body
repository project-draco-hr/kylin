{
  boolean includeSegments=optionsHelper.hasOption(OPTION_INCLUDE_SEGMENTS) ? Boolean.valueOf(optionsHelper.getOptionValue(OPTION_INCLUDE_SEGMENTS)) : true;
  boolean includeJobs=optionsHelper.hasOption(OPTION_INCLUDE_JOB) ? Boolean.valueOf(optionsHelper.getOptionValue(OPTION_INCLUDE_JOB)) : true;
  String dest=null;
  if (optionsHelper.hasOption(OPTION_DEST)) {
    dest=optionsHelper.getOptionValue(OPTION_DEST);
  }
  if (!includeSegments) {
    throw new RuntimeException("Does not support skip segments for now");
  }
  kylinConfig=KylinConfig.getInstanceFromEnv();
  metadataManager=MetadataManager.getInstance(kylinConfig);
  projectManager=ProjectManager.getInstance(kylinConfig);
  hybridManager=HybridManager.getInstance(kylinConfig);
  cubeManager=CubeManager.getInstance(kylinConfig);
  cubeDescManager=CubeDescManager.getInstance(kylinConfig);
  iiManager=IIManager.getInstance(kylinConfig);
  iiDescManager=IIDescManager.getInstance(kylinConfig);
  executableDao=ExecutableDao.getInstance(kylinConfig);
  realizationRegistry=RealizationRegistry.getInstance(kylinConfig);
  List<String> requiredResources=Lists.newArrayList();
  List<String> optionalResources=Lists.newArrayList();
  if (optionsHelper.hasOption(OPTION_PROJECT)) {
    ProjectInstance projectInstance=projectManager.getProject(optionsHelper.getOptionValue(OPTION_PROJECT));
    if (projectInstance == null) {
      throw new IllegalArgumentException("Project " + optionsHelper.getOptionValue(OPTION_PROJECT) + " does not exist");
    }
    addRequired(requiredResources,ProjectInstance.concatResourcePath(projectInstance.getName()));
    List<RealizationEntry> realizationEntries=projectInstance.getRealizationEntries();
    for (    RealizationEntry realizationEntry : realizationEntries) {
      retrieveResourcePath(getRealization(realizationEntry),includeSegments,includeJobs,requiredResources,optionalResources);
    }
  }
 else   if (optionsHelper.hasOption(OPTION_CUBE)) {
    String cubeName=optionsHelper.getOptionValue(OPTION_CUBE);
    IRealization realization;
    if ((realization=cubeManager.getRealization(cubeName)) != null) {
      retrieveResourcePath(realization,includeSegments,includeJobs,requiredResources,optionalResources);
    }
 else {
      throw new IllegalArgumentException("No cube found with name of " + cubeName);
    }
  }
 else   if (optionsHelper.hasOption(OPTION_HYBRID)) {
    String hybridName=optionsHelper.getOptionValue(OPTION_HYBRID);
    IRealization realization;
    if ((realization=hybridManager.getRealization(hybridName)) != null) {
      retrieveResourcePath(realization,includeSegments,includeJobs,requiredResources,optionalResources);
    }
 else {
      throw new IllegalArgumentException("No hybrid found with name of" + hybridName);
    }
  }
  executeExtraction(requiredResources,optionalResources,dest);
}
