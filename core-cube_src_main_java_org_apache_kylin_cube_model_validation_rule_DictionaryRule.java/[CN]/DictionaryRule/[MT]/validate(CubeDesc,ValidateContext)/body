{
  List<DictionaryDesc> dictDescs=cubeDesc.getDictionaries();
  if (dictDescs == null || dictDescs.isEmpty()) {
    return;
  }
  HashMap<TblColRef,String> colToBuilderMap=new HashMap<>();
  HashMap<TblColRef,TblColRef> colToReuseColMap=new HashMap<>();
  for (  DictionaryDesc dictDesc : dictDescs) {
    TblColRef dictCol=dictDesc.getColumnRef();
    if (dictCol == null) {
      context.addResult(ResultLevel.ERROR,"Some column in dictionaries not found");
      return;
    }
    String builder=dictDesc.getBuilderClass();
    TblColRef reuseCol=dictDesc.getResuseColumnRef();
    if (reuseCol == null) {
      if (builder == null || builder.isEmpty()) {
        context.addResult(ResultLevel.ERROR,"Column " + dictCol + " cannot have builder and reuse column both empty");
        return;
      }
      String oldBuilder=colToBuilderMap.put(dictCol,builder);
      if (oldBuilder != null && !oldBuilder.equals(builder)) {
        context.addResult(ResultLevel.ERROR,"Column " + dictCol + " has inconsistent builders "+ builder+ " and "+ oldBuilder);
        return;
      }
    }
 else {
      if (builder != null && !builder.isEmpty()) {
        context.addResult(ResultLevel.ERROR,"Column " + dictCol + " cannot have builder and reuse column both");
        return;
      }
      TblColRef oldReuseCol=colToReuseColMap.put(dictCol,reuseCol);
      if (oldReuseCol != null && !reuseCol.equals(oldReuseCol)) {
        context.addResult(ResultLevel.ERROR,"Column " + dictCol + " reuse inconsistent column "+ reuseCol+ " and "+ oldReuseCol);
        return;
      }
    }
  }
}
