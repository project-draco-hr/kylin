{
  final CubeInstance cube=cubeManager.getCube(CubingExecutableUtil.getCubeName(this.getParams()));
  CubeSegment mergedSegment=cube.getSegmentById(CubingExecutableUtil.getSegmentId(this.getParams()));
  if (mergedSegment == null) {
    return new ExecuteResult(ExecuteResult.State.FAILED,"there is no segment with id:" + CubingExecutableUtil.getSegmentId(this.getParams()));
  }
  CubingJob cubingJob=(CubingJob)executableManager.getJob(CubingExecutableUtil.getCubingJobId(this.getParams()));
  long cubeSizeBytes=cubingJob.findCubeSizeBytes();
  List<String> mergingSegmentIds=CubingExecutableUtil.getMergingSegmentIds(this.getParams());
  if (mergingSegmentIds.isEmpty()) {
    return new ExecuteResult(ExecuteResult.State.FAILED,"there are no merging segments");
  }
  long sourceCount=0L;
  long sourceSize=0L;
  for (  String id : mergingSegmentIds) {
    CubeSegment segment=cube.getSegmentById(id);
    sourceCount+=segment.getInputRecords();
    sourceSize+=segment.getInputRecordsSize();
  }
  mergedSegment.setSizeKB(cubeSizeBytes / 1024);
  mergedSegment.setInputRecords(sourceCount);
  mergedSegment.setInputRecordsSize(sourceSize);
  mergedSegment.setLastBuildJobID(CubingExecutableUtil.getCubingJobId(this.getParams()));
  mergedSegment.setLastBuildTime(System.currentTimeMillis());
  try {
    cubeManager.promoteNewlyBuiltSegments(cube,mergedSegment);
    return new ExecuteResult(ExecuteResult.State.SUCCEED);
  }
 catch (  IOException e) {
    logger.error("fail to update cube after merge",e);
    return new ExecuteResult(ExecuteResult.State.ERROR,e.getLocalizedMessage());
  }
}
