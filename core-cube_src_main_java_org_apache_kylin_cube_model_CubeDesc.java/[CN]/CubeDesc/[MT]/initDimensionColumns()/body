{
  for (  DimensionDesc dim : dimensions) {
    JoinDesc join=dim.getJoin();
    ArrayList<TblColRef> dimCols=Lists.newArrayList();
    String colStr=dim.getColumn();
    if ((colStr == null && dim.isDerived()) || ("{FK}".equalsIgnoreCase(colStr))) {
      for (      TblColRef col : join.getForeignKeyColumns()) {
        dimCols.add(initDimensionColRef(col));
      }
    }
 else {
      checkState(!StringUtils.isEmpty(colStr),"Dimension column must not be blank: %s",dim);
      dimCols.add(initDimensionColRef(dim,colStr));
    }
    TblColRef[] dimColArray=dimCols.toArray(new TblColRef[dimCols.size()]);
    dim.setColumnRefs(dimColArray);
    if (dim.isDerived()) {
      String[] derived=dim.getDerived();
      String[][] split=splitDerivedColumnAndExtra(derived);
      String[] derivedNames=split[0];
      String[] derivedExtra=split[1];
      TblColRef[] derivedCols=new TblColRef[derivedNames.length];
      for (int i=0; i < derivedNames.length; i++) {
        derivedCols[i]=initDimensionColRef(dim,derivedNames[i]);
      }
      initDerivedMap(dimColArray,DeriveType.LOOKUP,dim,derivedCols,derivedExtra);
    }
    if (join != null) {
      TblColRef[] fk=join.getForeignKeyColumns();
      TblColRef[] pk=join.getPrimaryKeyColumns();
      allColumns.addAll(Arrays.asList(fk));
      allColumns.addAll(Arrays.asList(pk));
      for (int i=0; i < fk.length; i++) {
        int find=ArrayUtils.indexOf(dimColArray,fk[i]);
        if (find >= 0) {
          TblColRef derivedCol=initDimensionColRef(pk[i]);
          initDerivedMap(new TblColRef[]{dimColArray[find]},DeriveType.PK_FK,dim,new TblColRef[]{derivedCol},null);
        }
      }
    }
  }
}
