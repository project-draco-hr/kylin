{
  CoprocessorRowType type;
  CoprocessorProjector projector;
  EndpointAggregators aggregators;
  CoprocessorFilter filter;
  type=CoprocessorRowType.deserialize(request.getType().toByteArray());
  projector=CoprocessorProjector.deserialize(request.getProjector().toByteArray());
  aggregators=EndpointAggregators.deserialize(request.getAggregator().toByteArray());
  filter=CoprocessorFilter.deserialize(request.getFilter().toByteArray());
  TableRecordInfoDigest tableRecordInfoDigest=aggregators.getTableRecordInfoDigest();
  IIProtos.IIResponse response=null;
  RegionScanner innerScanner=null;
  HRegion region=null;
  try {
    region=env.getRegion();
    innerScanner=region.getScanner(buildScan());
    region.startRegionOperation();
synchronized (innerScanner) {
      IIKeyValueCodec codec=new IIKeyValueCodec();
      Iterable<Slice> slices=codec.decodeKeyValue(new HbaseServerKVIterator(innerScanner));
      if (aggregators.isEmpty()) {
        response=getNonAggregatedResponse(slices,tableRecordInfoDigest,filter,type);
      }
 else {
        response=getAggregatedResponse(slices,tableRecordInfoDigest,filter,type,projector,aggregators);
      }
    }
  }
 catch (  IOException ioe) {
    System.out.println(ioe.toString());
    ResponseConverter.setControllerException(controller,ioe);
  }
 finally {
    IOUtils.closeQuietly(innerScanner);
    if (region != null) {
      try {
        region.closeRegionOperation();
      }
 catch (      IOException e) {
        e.printStackTrace();
        throw new RuntimeException(e);
      }
    }
  }
  done.run(response);
}
