{
  EndpointAggregationCache aggCache=new EndpointAggregationCache(aggregators);
  IIProtos.IIResponse.Builder responseBuilder=IIProtos.IIResponse.newBuilder();
  ClearTextDictionary clearTextDictionary=new ClearTextDictionary(recordInfo,type);
  RowKeyColumnIO rowKeyColumnIO=new RowKeyColumnIO(clearTextDictionary);
  byte[] recordBuffer=new byte[recordInfo.getByteFormLen()];
  final byte[] buffer=new byte[CoprocessorConstants.METRIC_SERIALIZE_BUFFER_SIZE];
  int iteratedSliceCount=0;
  long latestSliceTs=Long.MIN_VALUE;
  for (  Slice slice : slices) {
    latestSliceTs=slice.getTimestamp();
    iteratedSliceCount++;
    final Dictionary<?>[] localDictionaries=slice.getLocalDictionaries();
    CoprocessorFilter newFilter;
    final boolean emptyDictionary=Array.isEmpty(localDictionaries);
    logger.info("empty dictionary:" + emptyDictionary);
    if (emptyDictionary) {
      newFilter=filter;
    }
 else {
      for (      Dictionary<?> localDictionary : localDictionaries) {
        if (localDictionary instanceof TrieDictionary) {
          ((TrieDictionary)localDictionary).enableIdToValueBytesCache();
        }
      }
      newFilter=CoprocessorFilter.fromFilter(new LocalDictionary(localDictionaries,type,slice.getInfo()),filter.getFilter(),FilterDecorator.FilterConstantsTreatment.REPLACE_WITH_LOCAL_DICT);
    }
    ConciseSet result=null;
    if (filter != null) {
      result=new BitMapFilterEvaluator(new SliceBitMapProvider(slice,type)).evaluate(newFilter.getFilter());
    }
    Iterator<RawTableRecord> iterator=slice.iterateWithBitmap(result);
    while (iterator.hasNext()) {
      final RawTableRecord rawTableRecord=iterator.next();
      decodeWithDictionary(recordBuffer,rawTableRecord,localDictionaries,recordInfo,rowKeyColumnIO,type);
      AggrKey aggKey=projector.getAggrKey(recordBuffer);
      MeasureAggregator[] bufs=aggCache.getBuffer(aggKey);
      aggregators.aggregate(bufs,recordBuffer);
      aggCache.checkMemoryUsage();
    }
  }
  logger.info("Iterated Slices count: " + iteratedSliceCount);
  for (  Map.Entry<AggrKey,MeasureAggregator[]> entry : aggCache.getAllEntries()) {
    AggrKey aggrKey=entry.getKey();
    IIProtos.IIResponse.IIRow.Builder rowBuilder=IIProtos.IIResponse.IIRow.newBuilder().setColumns(ByteString.copyFrom(aggrKey.get(),aggrKey.offset(),aggrKey.length()));
    int length=aggregators.serializeMetricValues(entry.getValue(),buffer);
    rowBuilder.setMeasures(ByteString.copyFrom(buffer,0,length));
    responseBuilder.addRows(rowBuilder.build());
  }
  responseBuilder.setLatestDataTime(latestSliceTs);
  return responseBuilder.build();
}
