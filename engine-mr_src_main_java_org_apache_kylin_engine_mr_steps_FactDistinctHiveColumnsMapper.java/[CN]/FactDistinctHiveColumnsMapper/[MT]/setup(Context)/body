{
  super.setup(context);
  keyBuffer=ByteBuffer.allocate(4096);
  collectStatistics=Boolean.parseBoolean(context.getConfiguration().get(BatchConstants.CFG_STATISTICS_ENABLED));
  if (collectStatistics) {
    samplingPercentage=Integer.parseInt(context.getConfiguration().get(BatchConstants.CFG_STATISTICS_SAMPLING_PERCENT));
    cuboidScheduler=new CuboidScheduler(cubeDesc);
    nRowKey=cubeDesc.getRowkey().getRowKeyColumns().length;
    List<Long> cuboidIdList=Lists.newArrayList();
    List<Integer[]> allCuboidsBitSetList=Lists.newArrayList();
    addCuboidBitSet(baseCuboidId,allCuboidsBitSetList,cuboidIdList);
    allCuboidsBitSet=allCuboidsBitSetList.toArray(new Integer[cuboidIdList.size()][]);
    cuboidIds=cuboidIdList.toArray(new Long[cuboidIdList.size()]);
    allCuboidsHLL=new HyperLogLogPlusCounter[cuboidIds.length];
    for (int i=0; i < cuboidIds.length; i++) {
      allCuboidsHLL[i]=new HyperLogLogPlusCounter(cubeDesc.getConfig().getCubeStatsHLLPrecision());
    }
    hf=Hashing.murmur3_32();
    row_hashcodes=new ByteArray[nRowKey];
    for (int i=0; i < nRowKey; i++) {
      row_hashcodes[i]=new ByteArray();
    }
    TblColRef partitionColRef=cubeDesc.getModel().getPartitionDesc().getPartitionDateColumnRef();
    if (partitionColRef != null) {
      partitionColumnIndex=intermediateTableDesc.getColumnIndex(partitionColRef);
    }
    if (partitionColumnIndex < 0) {
      needFetchPartitionCol=false;
    }
 else {
      for (      int x : dictionaryColumnIndex) {
        if (x == partitionColumnIndex) {
          needFetchPartitionCol=false;
          break;
        }
      }
    }
  }
}
