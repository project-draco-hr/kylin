{
  if (key.get() >= 0) {
    TblColRef col=columnList.get((int)key.get());
    HashSet<ByteArray> set=new HashSet<ByteArray>();
    int count=0;
    for (    Text textValue : values) {
      ByteArray value=new ByteArray(Bytes.copy(textValue.getBytes(),0,textValue.getLength()));
      set.add(value);
      count++;
      if (count % 10000 == 0 && MemoryBudgetController.getSystemAvailMB() < 100) {
        outputDistinctValues(col,set,context);
        set.clear();
      }
    }
    if (set.isEmpty() == false) {
      outputDistinctValues(col,set,context);
    }
  }
 else {
    long cuboidId=0 - key.get();
    for (    Text value : values) {
      HyperLogLogPlusCounter hll=new HyperLogLogPlusCounter(14);
      ByteArray byteArray=new ByteArray(value.getBytes());
      hll.readRegisters(byteArray.asBuffer());
      totalRowsBeforeMerge+=hll.getCountEstimate();
      if (cuboidId == baseCuboidId) {
        baseCuboidRowCountInMappers.add(hll.getCountEstimate());
      }
      if (cuboidHLLMap.get(cuboidId) != null) {
        cuboidHLLMap.get(cuboidId).merge(hll);
      }
 else {
        cuboidHLLMap.put(cuboidId,hll);
      }
    }
  }
}
