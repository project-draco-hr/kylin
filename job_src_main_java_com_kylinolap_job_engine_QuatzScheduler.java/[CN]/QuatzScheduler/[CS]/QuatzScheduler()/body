{
  this.globalJobListener=new JobFlowListener(JobConstants.GLOBAL_LISTENER_NAME);
  StdSchedulerFactory sf=new StdSchedulerFactory();
  Properties schedulerProperties=new Properties();
  int numberOfProcessors=Runtime.getRuntime().availableProcessors();
  schedulerProperties.setProperty("org.quartz.threadPool.threadCount",String.valueOf(numberOfProcessors));
  schedulerProperties.setProperty("org.quartz.scheduler.skipUpdateCheck","true");
  try {
    sf.initialize(schedulerProperties);
    this.scheduler=sf.getScheduler();
    this.scheduler.getListenerManager().addJobListener(this.globalJobListener,GroupMatcher.jobGroupEquals(JobConstants.CUBE_JOB_GROUP_NAME));
    this.scheduler.getContext().put(JobConstants.PROP_JOB_RUNTIME_FLOWS,new ConcurrentHashMap<String,JobFlow>());
    this.scheduler.standby();
  }
 catch (  SchedulerException e) {
    throw new JobException(e);
  }
}
