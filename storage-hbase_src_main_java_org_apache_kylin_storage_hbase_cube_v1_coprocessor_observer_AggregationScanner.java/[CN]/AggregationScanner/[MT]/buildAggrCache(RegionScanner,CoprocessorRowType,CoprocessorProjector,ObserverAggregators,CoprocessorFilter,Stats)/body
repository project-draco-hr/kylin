{
  ObserverAggregationCache aggCache=new ObserverAggregationCache(aggregators);
  ObserverTuple tuple=new ObserverTuple(type);
  boolean hasMore=true;
  List<Cell> results=new ArrayList<Cell>();
  byte meaninglessByte=0;
  while (hasMore) {
    results.clear();
    hasMore=innerScanner.nextRaw(results);
    if (results.isEmpty())     continue;
    if (stats != null)     stats.countInputRow(results);
    Cell cell=results.get(0);
    tuple.setUnderlying(cell.getRowArray(),cell.getRowOffset(),cell.getRowLength());
    if (behavior == CoprocessorBehavior.SCAN) {
      int endIndex=cell.getRowOffset() + cell.getRowLength();
      for (int i=cell.getRowOffset(); i < endIndex; ++i) {
        meaninglessByte+=cell.getRowArray()[i];
      }
    }
 else {
      if (behavior.ordinal() >= CoprocessorBehavior.SCAN_FILTER.ordinal()) {
        if (filter != null && filter.evaluate(tuple) == false)         continue;
        if (behavior.ordinal() >= CoprocessorBehavior.SCAN_FILTER_AGGR.ordinal()) {
          AggrKey aggKey=projector.getAggrKey(results);
          MeasureAggregator[] bufs=aggCache.getBuffer(aggKey);
          aggregators.aggregate(bufs,results);
          if (behavior.ordinal() >= CoprocessorBehavior.SCAN_FILTER_AGGR_CHECKMEM.ordinal()) {
            aggCache.checkMemoryUsage();
          }
        }
      }
    }
  }
  if (behavior == CoprocessorBehavior.SCAN) {
    System.out.println("meaningless byte is now " + meaninglessByte);
  }
  return aggCache;
}
