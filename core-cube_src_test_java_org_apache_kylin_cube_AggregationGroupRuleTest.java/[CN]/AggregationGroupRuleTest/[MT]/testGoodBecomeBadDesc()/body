{
  AggregationGroupRule rule=new AggregationGroupRule(){
    @Override protected int getMaxCombinations(    CubeDesc cubeDesc){
      return 2;
    }
  }
;
  for (  File f : new File(LocalFileMetadataTestCase.LOCALMETA_TEST_DATA + "/cube_desc/").listFiles()) {
    System.out.println(f.getName());
    CubeDesc desc=JsonUtil.readValue(new FileInputStream(f),CubeDesc.class);
    ValidateContext vContext=new ValidateContext();
    rule.validate(desc,vContext);
    vContext.print(System.out);
    assertTrue(vContext.getResults().length > 0);
    assertEquals("Aggregation group 0 has too many combinations, use 'mandatory'/'hierarchy'/'joint' to optimize; or update 'kylin.cube.aggrgroup.max.combination' to a bigger value.",(vContext.getResults()[0].getMessage()));
  }
}
