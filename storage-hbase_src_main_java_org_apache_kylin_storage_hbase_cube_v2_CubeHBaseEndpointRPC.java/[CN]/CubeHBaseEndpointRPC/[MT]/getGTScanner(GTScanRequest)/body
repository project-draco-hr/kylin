{
  try {
    final ImmutableBitSet selectedColBlocks=scanRequest.getSelectedColBlocks().set(0);
    HConnection hbaseConn=HBaseConnection.get(cubeSeg.getCubeInstance().getConfig().getStorageUrl());
    final HTableInterface hbaseTable=hbaseConn.getTable(cubeSeg.getStorageLocationIdentifier());
    final List<Pair<byte[],byte[]>> hbaseColumns=makeHBaseColumns(selectedColBlocks);
    RawScan rawScan=prepareRawScan(scanRequest.getPkStart(),scanRequest.getPkEnd(),hbaseColumns);
    byte[] scanRequestBytes=KryoUtils.serialize(scanRequest);
    byte[] rawScanBytes=KryoUtils.serialize(rawScan);
    CubeVisitProtos.CubeVisitRequest.Builder builder=CubeVisitProtos.CubeVisitRequest.newBuilder();
    builder.setGtScanRequest(ByteString.copyFrom(scanRequestBytes)).setHbaseRawScan(ByteString.copyFrom(rawScanBytes));
    Collection<CubeVisitProtos.CubeVisitResponse> results=getResults(builder.build(),hbaseTable,rawScan.startKey,rawScan.endKey);
    final Collection<byte[]> rowBlocks=Collections2.transform(results,new Function<CubeVisitProtos.CubeVisitResponse,byte[]>(){
      @Nullable @Override public byte[] apply(      CubeVisitProtos.CubeVisitResponse input){
        try {
          return CompressionUtils.decompress(input.getCompressedRows().toByteArray());
        }
 catch (        IOException|DataFormatException e) {
          throw new RuntimeException(e);
        }
      }
    }
);
    return new EndpintResultsAsGTScanner(fullGTInfo,rowBlocks.iterator());
  }
 catch (  Throwable throwable) {
    throwable.printStackTrace();
  }
  return null;
}
