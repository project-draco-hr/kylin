{
  final String toggle=BackdoorToggles.getCoprocessorBehavior() == null ? CoprocessorBehavior.SCAN_FILTER_AGGR_CHECKMEM.toString() : BackdoorToggles.getCoprocessorBehavior();
  logger.debug("New scanner for current segment {} will use {} as endpoint's behavior",cubeSeg,toggle);
  Pair<Short,Short> shardNumAndBaseShard=getShardNumAndBaseShard();
  short shardNum=shardNumAndBaseShard.getFirst();
  short cuboidBaseShard=shardNumAndBaseShard.getSecond();
  int totalShards=cubeSeg.getTotalShards(cuboid.getId());
  ByteString scanRequestByteString=null;
  ByteString rawScanByteString=null;
  final ImmutableBitSet selectedColBlocks=scanRequest.getSelectedColBlocks().set(0);
  final HConnection conn=HBaseConnection.get(cubeSeg.getCubeInstance().getConfig().getStorageUrl());
  final List<IntList> hbaseColumnsToGTIntList=Lists.newArrayList();
  List<List<Integer>> hbaseColumnsToGT=getHBaseColumnsGTMapping(selectedColBlocks);
  for (  List<Integer> list : hbaseColumnsToGT) {
    hbaseColumnsToGTIntList.add(IntList.newBuilder().addAllInts(list).build());
  }
  List<RawScan> rawScans=preparedHBaseScans(scanRequest.getGTScanRanges(),selectedColBlocks);
  int rawScanBufferSize=BytesSerializer.SERIALIZE_BUFFER_SIZE;
  while (true) {
    try {
      ByteBuffer rawScanBuffer=ByteBuffer.allocate(rawScanBufferSize);
      BytesUtil.writeVInt(rawScans.size(),rawScanBuffer);
      for (      RawScan rs : rawScans) {
        RawScan.serializer.serialize(rs,rawScanBuffer);
      }
      rawScanBuffer.flip();
      rawScanByteString=HBaseZeroCopyByteString.wrap(rawScanBuffer.array(),rawScanBuffer.position(),rawScanBuffer.limit());
      break;
    }
 catch (    BufferOverflowException boe) {
      logger.info("Buffer size {} cannot hold the raw scans, resizing to 4 times",rawScanBufferSize);
      rawScanBufferSize*=4;
    }
  }
  scanRequest.setGTScanRanges(Lists.<GTScanRange>newArrayList());
  int scanRequestBufferSize=BytesSerializer.SERIALIZE_BUFFER_SIZE;
  while (true) {
    try {
      ByteBuffer buffer=ByteBuffer.allocate(scanRequestBufferSize);
      GTScanRequest.serializer.serialize(scanRequest,buffer);
      buffer.flip();
      scanRequestByteString=HBaseZeroCopyByteString.wrap(buffer.array(),buffer.position(),buffer.limit());
      break;
    }
 catch (    BufferOverflowException boe) {
      logger.info("Buffer size {} cannot hold the scan request, resizing to 4 times",scanRequestBufferSize);
      scanRequestBufferSize*=4;
    }
  }
  logger.debug("Serialized scanRequestBytes {} bytes, rawScanBytesString {} bytes",scanRequestByteString.size(),rawScanByteString.size());
  logger.info("The scan {} for segment {} is as below with {} separate raw scans, shard part of start/end key is set to 0",Integer.toHexString(System.identityHashCode(scanRequest)),cubeSeg,rawScans.size());
  for (  RawScan rs : rawScans) {
    logScan(rs,cubeSeg.getStorageLocationIdentifier());
  }
  logger.debug("Submitting rpc to {} shards starting from shard {}, scan range count {}",shardNum,cuboidBaseShard,rawScans.size());
  final AtomicLong totalScannedCount=new AtomicLong(0);
  final ExpectedSizeIterator epResultItr=new ExpectedSizeIterator(shardNum);
  final KylinConfig kylinConfig=KylinConfig.getInstanceFromEnv();
  final boolean compressionResult=kylinConfig.getCompressionResult();
  final CubeVisitProtos.CubeVisitRequest.Builder builder=CubeVisitProtos.CubeVisitRequest.newBuilder();
  builder.setGtScanRequest(scanRequestByteString).setHbaseRawScan(rawScanByteString);
  for (  IntList intList : hbaseColumnsToGTIntList) {
    builder.addHbaseColumnsToGT(intList);
  }
  builder.setRowkeyPreambleSize(cubeSeg.getRowKeyPreambleSize());
  builder.setBehavior(toggle);
  builder.setStartTime(System.currentTimeMillis());
  builder.setTimeout(epResultItr.getRpcTimeout());
  builder.setKylinProperties(kylinConfig.getConfigAsString());
  for (  final Pair<byte[],byte[]> epRange : getEPKeyRanges(cuboidBaseShard,shardNum,totalShards)) {
    executorService.submit(new Runnable(){
      @Override public void run(){
        final String logHeader="<sub-thread for GTScanRequest " + Integer.toHexString(System.identityHashCode(scanRequest)) + "> ";
        final boolean[] abnormalFinish=new boolean[1];
        try {
          HTableInterface table=conn.getTable(cubeSeg.getStorageLocationIdentifier(),HBaseConnection.getCoprocessorPool());
          final CubeVisitRequest request=builder.build();
          final byte[] startKey=epRange.getFirst();
          final byte[] endKey=epRange.getSecond();
          table.coprocessorService(CubeVisitService.class,startKey,endKey,new Batch.Call<CubeVisitService,CubeVisitResponse>(){
            public CubeVisitResponse call(            CubeVisitService rowsService) throws IOException {
              ServerRpcController controller=new ServerRpcController();
              BlockingRpcCallback<CubeVisitResponse> rpcCallback=new BlockingRpcCallback<>();
              rowsService.visitCube(controller,request,rpcCallback);
              CubeVisitResponse response=rpcCallback.get();
              if (controller.failedOnException()) {
                throw controller.getFailedOn();
              }
              return response;
            }
          }
,new Batch.Callback<CubeVisitResponse>(){
            @Override public void update(            byte[] region,            byte[] row,            CubeVisitResponse result){
              if (region == null)               return;
              totalScannedCount.addAndGet(result.getStats().getScannedRowCount());
              logger.info(logHeader + getStatsString(region,result));
              if (result.getStats().getNormalComplete() != 1) {
                abnormalFinish[0]=true;
                return;
              }
              try {
                if (compressionResult) {
                  epResultItr.append(CompressionUtils.decompress(HBaseZeroCopyByteString.zeroCopyGetBytes(result.getCompressedRows())));
                }
 else {
                  epResultItr.append(HBaseZeroCopyByteString.zeroCopyGetBytes(result.getCompressedRows()));
                }
              }
 catch (              IOException|DataFormatException e) {
                throw new RuntimeException(logHeader + "Error when decompressing",e);
              }
            }
          }
);
        }
 catch (        Throwable ex) {
          logger.error(logHeader + "Error when visiting cubes by endpoint",ex);
          epResultItr.notifyCoprocException(ex);
          return;
        }
        if (abnormalFinish[0]) {
          Throwable ex=new RuntimeException(logHeader + "The coprocessor thread stopped itself due to scan timeout or scan threshold(check region server log), failing current query...");
          logger.error(logHeader + "Error when visiting cubes by endpoint",ex);
          epResultItr.notifyCoprocException(ex);
          return;
        }
      }
    }
);
  }
  return new GTBlobScatter(fullGTInfo,epResultItr,scanRequest.getColumns(),totalScannedCount.get(),scanRequest.getStoragePushDownLimit());
}
