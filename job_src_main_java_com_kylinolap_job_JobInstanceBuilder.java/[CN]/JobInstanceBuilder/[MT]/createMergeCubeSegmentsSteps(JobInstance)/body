{
  if (cube.getMergingSegments() == null || cube.getMergingSegments().size() < 2) {
    throw new IllegalArgumentException("Merging segments count should be more than 2");
  }
  String[] cuboidPaths=new String[cube.getMergingSegments().size()];
  for (int i=0; i < cube.getMergingSegments().size(); i++) {
    CubeSegment seg=cube.getMergingSegments().get(i);
    cuboidPaths[i]=JobInstance.getJobWorkingDir(seg.getLastBuildJobID(),engineConfig.getHdfsWorkingDirectory()) + "/" + jobInstance.getRelatedCube()+ "/cuboid/*";
  }
  String formattedPath=formatPaths(cuboidPaths);
  jobInstance.clearSteps();
  int stepSeqNum=0;
  addMergeCuboidDataStep(jobInstance,stepSeqNum,formattedPath);
  stepSeqNum++;
  addRangeRowkeyDistributionStep(jobInstance,stepSeqNum,jobWorkingDir + "/" + cubeName+ "/merged_cuboid");
  stepSeqNum++;
  addCreateHTableStep(jobInstance,stepSeqNum);
  stepSeqNum++;
  addConvertCuboidToHfileStep(jobInstance,stepSeqNum,jobWorkingDir + "/" + cubeName+ "/merged_cuboid");
  stepSeqNum++;
  addBulkLoadStep(jobInstance,stepSeqNum);
  stepSeqNum++;
  try {
    log.debug(JsonUtil.writeValueAsIndentString(jobInstance));
  }
 catch (  Exception e) {
    log.error(e.getMessage());
  }
}
