{
  jobInstance.clearSteps();
  int stepSeqNum=0;
  int groupRowkeyColumnsCount=cube.getDescriptor().getRowkey().getNCuboidBuildLevels();
  int totalRowkeyColumnsCount=cube.getDescriptor().getRowkey().getRowKeyColumns().length;
  String[] cuboidOutputTempPath=getCuboidOutputPaths(cubeName,totalRowkeyColumnsCount,groupRowkeyColumnsCount);
  if (this.engineConfig.isFlatTableByHive()) {
    addIntermediateHiveTableStep(jobInstance,stepSeqNum,cuboidOutputTempPath);
    stepSeqNum++;
  }
  addFactDistinctColumnsStep(jobInstance,stepSeqNum,cuboidOutputTempPath);
  stepSeqNum++;
  addBuildDictionaryStep(jobInstance,stepSeqNum);
  stepSeqNum++;
  addBaseCuboidStep(jobInstance,stepSeqNum,cuboidOutputTempPath);
  stepSeqNum++;
  for (int i=1; i <= groupRowkeyColumnsCount; i++) {
    int dimNum=totalRowkeyColumnsCount - i;
    addNDimensionCuboidStep(jobInstance,stepSeqNum,cuboidOutputTempPath,dimNum,totalRowkeyColumnsCount);
    stepSeqNum++;
  }
  addRangeRowkeyDistributionStep(jobInstance,stepSeqNum,jobWorkingDir + "/" + cubeName+ "/cuboid/*");
  stepSeqNum++;
  addCreateHTableStep(jobInstance,stepSeqNum);
  stepSeqNum++;
  addConvertCuboidToHfileStep(jobInstance,stepSeqNum,jobWorkingDir + "/" + cubeName+ "/cuboid/*");
  stepSeqNum++;
  addBulkLoadStep(jobInstance,stepSeqNum);
  stepSeqNum++;
  try {
    log.debug(JsonUtil.writeValueAsIndentString(jobInstance));
  }
 catch (  Exception e) {
    log.error(e.getMessage());
  }
}
