{
  if (!cube.needAutoMerge()) {
    logger.debug("Cube " + cube.getName() + " doesn't need auto merge");
    return null;
  }
  if (cube.getBuildingSegments().size() > 0) {
    logger.debug("Cube " + cube.getName() + " has bulding segment, will not trigger merge at this moment");
    return null;
  }
  List<CubeSegment> readySegments=Lists.newArrayList(cube.getSegment(SegmentStatusEnum.READY));
  if (readySegments.size() == 0) {
    logger.debug("Cube " + cube.getName() + " has no ready segment to merge");
    return null;
  }
  long[] timeRanges=cube.getDescriptor().getAutoMergeTimeRanges();
  Arrays.sort(timeRanges);
  CubeSegment newSeg=null;
  for (int i=timeRanges.length - 1; i >= 0; i--) {
    long toMergeRange=timeRanges[i];
    long currentRange=0;
    long lastEndTime=0;
    List<CubeSegment> toMergeSegments=Lists.newArrayList();
    for (    CubeSegment segment : readySegments) {
      long thisSegmentRange=segment.getDateRangeEnd() - segment.getDateRangeStart();
      if (thisSegmentRange >= toMergeRange) {
        toMergeSegments.clear();
        currentRange=0;
        lastEndTime=segment.getDateRangeEnd();
        continue;
      }
      if (segment.getDateRangeStart() != lastEndTime && toMergeSegments.isEmpty() == false) {
        toMergeSegments.clear();
        currentRange=0;
      }
      currentRange+=thisSegmentRange;
      if (currentRange < toMergeRange) {
        toMergeSegments.add(segment);
        lastEndTime=segment.getDateRangeEnd();
      }
 else {
        toMergeSegments.add(segment);
        newSeg=newSegment(cube,toMergeSegments.get(0).getDateRangeStart(),segment.getDateRangeEnd());
        return newSeg;
      }
    }
  }
  return null;
}
