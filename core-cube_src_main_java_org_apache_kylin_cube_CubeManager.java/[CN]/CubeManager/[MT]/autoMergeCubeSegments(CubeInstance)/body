{
  if (!cube.needAutoMerge()) {
    logger.debug("Cube " + cube.getName() + " doesn't need auto merge");
    return null;
  }
  List<CubeSegment> buildingSegs=cube.getBuildingSegments();
  if (buildingSegs.size() > 0) {
    logger.debug("Cube " + cube.getName() + " has "+ buildingSegs.size()+ " building segments");
  }
  List<CubeSegment> readySegs=cube.getSegments(SegmentStatusEnum.READY);
  List<CubeSegment> mergingSegs=Lists.newArrayList();
  if (buildingSegs.size() > 0) {
    for (    CubeSegment building : buildingSegs) {
      for (      CubeSegment ready : readySegs) {
        if (ready.getSourceOffsetStart() >= building.getSourceOffsetStart() && ready.getSourceOffsetEnd() <= building.getSourceOffsetEnd()) {
          mergingSegs.add(ready);
        }
      }
    }
  }
  readySegs.removeAll(mergingSegs);
  long[] timeRanges=cube.getDescriptor().getAutoMergeTimeRanges();
  Arrays.sort(timeRanges);
  for (int i=timeRanges.length - 1; i >= 0; i--) {
    long toMergeRange=timeRanges[i];
    for (int s=0; s < readySegs.size(); s++) {
      CubeSegment seg=readySegs.get(s);
      Pair<CubeSegment,CubeSegment> p=findMergeOffsetsByDateRange(readySegs.subList(s,readySegs.size()),seg.getDateRangeStart(),seg.getDateRangeStart() + toMergeRange,toMergeRange);
      if (p != null && p.getSecond().getDateRangeEnd() - p.getFirst().getDateRangeStart() >= toMergeRange)       return Pair.newPair(p.getFirst().getSourceOffsetStart(),p.getSecond().getSourceOffsetEnd());
    }
  }
  return null;
}
