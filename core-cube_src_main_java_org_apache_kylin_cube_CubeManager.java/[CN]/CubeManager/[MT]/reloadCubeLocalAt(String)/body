{
  ResourceStore store=getStore();
  CubeInstance cube;
  try {
    cube=store.getResource(path,CubeInstance.class,CUBE_SERIALIZER);
    checkNotNull(cube,"cube (at %s) not found",path);
    String cubeName=cube.getName();
    checkState(StringUtils.isNotBlank(cubeName),"cube (at %s) name must not be blank",path);
    CubeDesc cubeDesc=CubeDescManager.getInstance(config).getCubeDesc(cube.getDescName());
    checkNotNull(cubeDesc,"cube descriptor '%s' (for cube '%s') not found",cube.getDescName(),cubeName);
    if (!cubeDesc.getError().isEmpty()) {
      cube.setStatus(RealizationStatusEnum.DESCBROKEN);
      logger.warn("cube descriptor {} (for cube '{}') is broken",cubeDesc.getResourcePath(),cubeName);
    }
 else     if (cube.getStatus() == RealizationStatusEnum.DESCBROKEN) {
      cube.setStatus(RealizationStatusEnum.DISABLED);
      logger.info("cube {} changed from DESCBROKEN to DISABLED",cubeName);
    }
    cube.setConfig((KylinConfigExt)cubeDesc.getConfig());
    cubeMap.putLocal(cubeName,cube);
    for (    CubeSegment segment : cube.getSegments()) {
      usedStorageLocation.put(cubeName.toUpperCase(),segment.getStorageLocationIdentifier());
    }
    logger.info("Reloaded cube {} being {} having {} segments",cubeName,cube,cube.getSegments().size());
    return cube;
  }
 catch (  Exception e) {
    logger.error("Error during load cube instance, skipping : " + path,e);
    return null;
  }
}
