{
  List<CubeSegment> tobe=calculateToBeSegments(cube);
  for (  CubeSegment seg : newSegments) {
    if (tobe.contains(seg) == false)     throw new IllegalStateException("For cube " + cube + ", segment "+ seg+ " is expected but not in the tobe "+ tobe);
    if (StringUtils.isBlank(seg.getStorageLocationIdentifier()))     throw new IllegalStateException("For cube " + cube + ", segment "+ seg+ " missing StorageLocationIdentifier");
    if (StringUtils.isBlank(seg.getLastBuildJobID()))     throw new IllegalStateException("For cube " + cube + ", segment "+ seg+ " missing LastBuildJobID");
    seg.setStatus(SegmentStatusEnum.READY);
  }
  for (  CubeSegment seg : tobe) {
    if (isReady(seg) == false)     throw new IllegalStateException("For cube " + cube + ", segment "+ seg+ " should be READY but is not");
  }
  List<CubeSegment> toRemoveSegs=Lists.newArrayList();
  for (  CubeSegment segment : cube.getSegments()) {
    if (!tobe.contains(segment))     toRemoveSegs.add(segment);
  }
  logger.info("Promoting cube " + cube + ", new segments "+ Arrays.toString(newSegments)+ ", to remove segments "+ toRemoveSegs);
  CubeUpdate cubeBuilder=new CubeUpdate(cube);
  cubeBuilder.setToRemoveSegs(toRemoveSegs.toArray(new CubeSegment[toRemoveSegs.size()])).setToUpdateSegs(newSegments).setStatus(RealizationStatusEnum.READY);
  updateCube(cubeBuilder);
}
