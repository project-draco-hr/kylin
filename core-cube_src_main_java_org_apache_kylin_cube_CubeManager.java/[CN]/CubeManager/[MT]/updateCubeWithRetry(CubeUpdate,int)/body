{
  if (update == null || update.getCubeInstance() == null)   throw new IllegalStateException();
  CubeInstance cube=update.getCubeInstance();
  logger.info("Updating cube instance '" + cube.getName() + "'");
  List<CubeSegment> newSegs=Lists.newArrayList(cube.getSegments());
  if (update.getToAddSegs() != null)   newSegs.addAll(Arrays.asList(update.getToAddSegs()));
  List<String> toRemoveResources=Lists.newArrayList();
  if (update.getToRemoveSegs() != null) {
    Iterator<CubeSegment> iterator=newSegs.iterator();
    while (iterator.hasNext()) {
      CubeSegment currentSeg=iterator.next();
      boolean found=false;
      for (      CubeSegment toRemoveSeg : update.getToRemoveSegs()) {
        if (currentSeg.getUuid().equals(toRemoveSeg.getUuid())) {
          iterator.remove();
          toRemoveResources.add(toRemoveSeg.getStatisticsResourcePath());
          found=true;
        }
      }
      if (found == false) {
        logger.error("Segment '" + currentSeg.getName() + "' doesn't exist for remove.");
      }
    }
  }
  if (update.getToUpdateSegs() != null) {
    for (    CubeSegment segment : update.getToUpdateSegs()) {
      boolean found=false;
      for (int i=0; i < newSegs.size(); i++) {
        if (newSegs.get(i).getUuid().equals(segment.getUuid())) {
          newSegs.set(i,segment);
          found=true;
          break;
        }
      }
      if (found == false) {
        logger.error("Segment '" + segment.getName() + "' doesn't exist for update.");
      }
    }
  }
  Collections.sort(newSegs);
  CubeValidator.validate(newSegs);
  cube.setSegments(newSegs);
  if (update.getStatus() != null) {
    cube.setStatus(update.getStatus());
  }
  if (update.getOwner() != null) {
    cube.setOwner(update.getOwner());
  }
  if (update.getCost() > 0) {
    cube.setCost(update.getCost());
  }
  try {
    getStore().putResource(cube.getResourcePath(),cube,CUBE_SERIALIZER);
  }
 catch (  IllegalStateException ise) {
    logger.warn("Write conflict to update cube " + cube.getName() + " at try "+ retry+ ", will retry...");
    if (retry >= 7) {
      logger.error("Retried 7 times till got error, abandoning...",ise);
      throw ise;
    }
    cube=reloadCubeLocal(cube.getName());
    update.setCubeInstance(cube);
    retry++;
    cube=updateCubeWithRetry(update,retry);
  }
  if (toRemoveResources.size() > 0) {
    for (    String resource : toRemoveResources) {
      try {
        getStore().deleteResource(resource);
      }
 catch (      IOException ioe) {
        logger.error("Failed to delete resource " + toRemoveResources.toString());
      }
    }
  }
  cubeMap.put(cube.getName(),cube);
  ProjectManager.getInstance(cube.getConfig()).clearL2Cache();
  return cube;
}
