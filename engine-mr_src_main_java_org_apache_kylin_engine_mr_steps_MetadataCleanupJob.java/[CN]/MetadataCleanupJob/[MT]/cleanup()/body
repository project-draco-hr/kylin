{
  CubeManager cubeManager=CubeManager.getInstance(config);
  List<String> toDeleteResource=Lists.newArrayList();
  for (  String resourceRoot : new String[]{ResourceStore.SNAPSHOT_RESOURCE_ROOT,ResourceStore.CUBE_STATISTICS_ROOT}) {
    NavigableSet<String> snapshotTables=getStore().listResources(resourceRoot);
    if (snapshotTables != null) {
      for (      String snapshotTable : snapshotTables) {
        NavigableSet<String> snapshotNames=getStore().listResources(snapshotTable);
        if (snapshotNames != null)         for (        String snapshot : snapshotNames) {
          if (isOlderThanThreshold(getStore().getResourceTimestamp(snapshot)))           toDeleteResource.add(snapshot);
        }
      }
    }
  }
  NavigableSet<String> dictTables=getStore().listResources(ResourceStore.DICT_RESOURCE_ROOT);
  for (  String table : dictTables) {
    NavigableSet<String> tableColNames=getStore().listResources(table);
    if (tableColNames != null)     for (    String tableCol : tableColNames) {
      NavigableSet<String> dictionaries=getStore().listResources(tableCol);
      if (dictionaries != null)       for (      String dict : dictionaries)       if (isOlderThanThreshold(getStore().getResourceTimestamp(dict)))       toDeleteResource.add(dict);
    }
  }
  Set<String> activeResourceList=Sets.newHashSet();
  for (  org.apache.kylin.cube.CubeInstance cube : cubeManager.listAllCubes()) {
    for (    org.apache.kylin.cube.CubeSegment segment : cube.getSegments()) {
      activeResourceList.addAll(segment.getSnapshotPaths());
      activeResourceList.addAll(segment.getDictionaryPaths());
      activeResourceList.add(segment.getStatisticsResourcePath());
    }
  }
  toDeleteResource.removeAll(activeResourceList);
  ExecutableDao executableDao=ExecutableDao.getInstance(KylinConfig.getInstanceFromEnv());
  List<ExecutablePO> allExecutable=executableDao.getJobs();
  for (  ExecutablePO executable : allExecutable) {
    long lastModified=executable.getLastModified();
    ExecutableOutputPO output=executableDao.getJobOutput(executable.getUuid());
    if (System.currentTimeMillis() - lastModified > TIME_THREADSHOLD_FOR_JOB && (ExecutableState.SUCCEED.toString().equals(output.getStatus()) || ExecutableState.DISCARDED.toString().equals(output.getStatus()))) {
      toDeleteResource.add(ResourceStore.EXECUTE_RESOURCE_ROOT + "/" + executable.getUuid());
      toDeleteResource.add(ResourceStore.EXECUTE_OUTPUT_RESOURCE_ROOT + "/" + executable.getUuid());
      for (      ExecutablePO task : executable.getTasks()) {
        toDeleteResource.add(ResourceStore.EXECUTE_RESOURCE_ROOT + "/" + task.getUuid());
        toDeleteResource.add(ResourceStore.EXECUTE_OUTPUT_RESOURCE_ROOT + "/" + task.getUuid());
      }
    }
  }
  if (toDeleteResource.size() > 0) {
    logger.info("The following resources have no reference or is too old, will be cleaned from metadata store: \n");
    for (    String s : toDeleteResource) {
      logger.info(s);
      if (delete == true) {
        getStore().deleteResource(s);
      }
    }
  }
 else {
    logger.info("No resource to be cleaned up from metadata store;");
  }
}
