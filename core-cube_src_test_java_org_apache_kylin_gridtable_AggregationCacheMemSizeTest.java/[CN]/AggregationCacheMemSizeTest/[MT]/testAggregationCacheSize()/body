{
  final SortedMap<byte[],Object> map=new TreeMap<byte[],Object>(new Comparator<byte[]>(){
    @Override public int compare(    byte[] o1,    byte[] o2){
      return Bytes.compareTo(o1,o2);
    }
  }
);
  final Random rand=new Random();
  long bytesBefore=memLeft();
  byte[] key=null;
  MeasureAggregator<?>[] aggrs=null;
  for (int i=0; i < NUM_OF_OBJS; i++) {
    key=new byte[10];
    rand.nextBytes(key);
    aggrs=new MeasureAggregator[4];
    aggrs[0]=newBigDecimalAggr();
    aggrs[1]=newLongAggr();
    aggrs[2]=newDoubleAggr();
    aggrs[3]=newDoubleAggr();
    map.put(key,aggrs);
  }
  long bytesAfter=memLeft();
  long mapActualSize=bytesBefore - bytesAfter;
  long mapExpectSize=GTAggregateScanner.estimateSizeOfAggrCache(key,aggrs,map.size());
  System.out.println("Actual cache size: " + mapActualSize);
  System.out.println("Expect cache size: " + mapExpectSize);
}
