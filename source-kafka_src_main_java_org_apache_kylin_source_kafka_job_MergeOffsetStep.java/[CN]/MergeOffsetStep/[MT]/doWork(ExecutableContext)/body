{
  final CubeManager cubeManager=CubeManager.getInstance(context.getConfig());
  final CubeInstance cube=cubeManager.getCube(CubingExecutableUtil.getCubeName(this.getParams()));
  final CubeSegment segment=cube.getSegmentById(CubingExecutableUtil.getSegmentId(this.getParams()));
  List<CubeSegment> mergingSegs=cube.getMergingSegments(segment);
  Collections.sort(mergingSegs);
  final CubeSegment first=mergingSegs.get(0);
  final CubeSegment last=mergingSegs.get(mergingSegs.size() - 1);
  segment.setSourceOffsetStart(first.getSourceOffsetStart());
  segment.setSourcePartitionOffsetStart(first.getSourcePartitionOffsetStart());
  segment.setSourceOffsetEnd(last.getSourceOffsetEnd());
  segment.setSourcePartitionOffsetEnd(last.getSourcePartitionOffsetEnd());
  long dateRangeStart=CubeManager.minDateRangeStart(mergingSegs);
  long dateRangeEnd=CubeManager.maxDateRangeEnd(mergingSegs);
  segment.setDateRangeStart(dateRangeStart);
  segment.setDateRangeEnd(dateRangeEnd);
  CubeUpdate cubeBuilder=new CubeUpdate(cube);
  cubeBuilder.setToUpdateSegs(segment);
  try {
    cubeManager.updateCube(cubeBuilder);
    return new ExecuteResult(ExecuteResult.State.SUCCEED,"succeed");
  }
 catch (  IOException e) {
    logger.error("fail to update cube segment offset",e);
    return new ExecuteResult(ExecuteResult.State.ERROR,e.getLocalizedMessage());
  }
}
