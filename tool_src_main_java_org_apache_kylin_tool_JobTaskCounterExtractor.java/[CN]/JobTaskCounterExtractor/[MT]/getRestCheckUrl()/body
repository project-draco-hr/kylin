{
  KylinConfig config=KylinConfig.getInstanceFromEnv();
  final String yarnStatusCheckUrl=config.getYarnStatusCheckUrl();
  Pattern pattern=Pattern.compile("(http://)(.*):.*");
  if (yarnStatusCheckUrl != null) {
    Matcher m=pattern.matcher(yarnStatusCheckUrl);
    m.matches();
    yarnUrl=m.group(1) + m.group(2) + ":19888";
    return yarnUrl;
  }
 else {
    logger.info("kylin.job.yarn.app.rest.check.status.url" + " is not set read from hadoop configuration");
  }
  Configuration conf=HadoopUtil.getCurrentConfiguration();
  String rmWebHost=HAUtil.getConfValueForRMInstance(YarnConfiguration.RM_WEBAPP_ADDRESS,YarnConfiguration.DEFAULT_RM_WEBAPP_ADDRESS,conf);
  if (HAUtil.isHAEnabled(conf)) {
    YarnConfiguration yarnConf=new YarnConfiguration(conf);
    String active=RMHAUtils.findActiveRMHAId(yarnConf);
    rmWebHost=HAUtil.getConfValueForRMInstance(HAUtil.addSuffix(YarnConfiguration.RM_WEBAPP_ADDRESS,active),YarnConfiguration.DEFAULT_RM_WEBAPP_ADDRESS,yarnConf);
  }
  if (StringUtils.isEmpty(rmWebHost)) {
    return null;
  }
  if (rmWebHost.startsWith("http://") || rmWebHost.startsWith("https://")) {
  }
 else {
    rmWebHost="http://" + rmWebHost;
  }
  Matcher m=pattern.matcher(rmWebHost);
  m.matches();
  return m.group(1) + m.group(2) + ":19888";
}
