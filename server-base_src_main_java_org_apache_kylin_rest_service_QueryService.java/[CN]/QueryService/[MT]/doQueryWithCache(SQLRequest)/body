{
  try {
    BackdoorToggles.setToggles(sqlRequest.getBackdoorToggles());
    String sql=sqlRequest.getSql();
    String project=sqlRequest.getProject();
    logger.info("Using project: " + project);
    logger.info("The original query:  " + sql);
    KylinConfig kylinConfig=KylinConfig.getInstanceFromEnv();
    String serverMode=kylinConfig.getServerMode();
    if (!(Constant.SERVER_MODE_QUERY.equals(serverMode.toLowerCase()) || Constant.SERVER_MODE_ALL.equals(serverMode.toLowerCase()))) {
      throw new InternalErrorException("Query is not allowed in " + serverMode + " mode.");
    }
    if (!sql.toLowerCase().contains("select")) {
      logger.debug("Directly return exception as not supported");
      throw new InternalErrorException("Not Supported SQL.");
    }
    long startTime=System.currentTimeMillis();
    SQLResponse sqlResponse=null;
    boolean queryCacheEnabled=kylinConfig.isQueryCacheEnabled() && !BackdoorToggles.getDisableCache();
    if (queryCacheEnabled) {
      sqlResponse=searchQueryInCache(sqlRequest);
    }
    try {
      if (null == sqlResponse) {
        sqlResponse=query(sqlRequest);
        long durationThreshold=kylinConfig.getQueryDurationCacheThreshold();
        long scancountThreshold=kylinConfig.getQueryScanCountCacheThreshold();
        sqlResponse.setDuration(System.currentTimeMillis() - startTime);
        logger.info("Stats of SQL response: isException: {}, duration: {}, total scan count {}",String.valueOf(sqlResponse.getIsException()),String.valueOf(sqlResponse.getDuration()),String.valueOf(sqlResponse.getTotalScanCount()));
        if (queryCacheEnabled && !sqlResponse.getIsException() && (sqlResponse.getDuration() > durationThreshold || sqlResponse.getTotalScanCount() > scancountThreshold)) {
          cacheManager.getCache(SUCCESS_QUERY_CACHE).put(new Element(sqlRequest,sqlResponse));
        }
      }
 else {
        sqlResponse.setDuration(System.currentTimeMillis() - startTime);
      }
      checkQueryAuth(sqlResponse);
    }
 catch (    Throwable e) {
      logger.error("Exception when execute sql",e);
      String errMsg=QueryUtil.makeErrorMsgUserFriendly(e);
      sqlResponse=new SQLResponse(null,null,0,true,errMsg);
      if (queryCacheEnabled && e instanceof ScanOutOfLimitException) {
        Cache exceptionCache=cacheManager.getCache(EXCEPTION_QUERY_CACHE);
        exceptionCache.put(new Element(sqlRequest,sqlResponse));
      }
    }
    logQuery(sqlRequest,sqlResponse);
    QueryMetricsFacade.updateMetrics(sqlRequest,sqlResponse);
    if (sqlResponse.getIsException())     throw new InternalErrorException(sqlResponse.getExceptionMessage());
    return sqlResponse;
  }
  finally {
    BackdoorToggles.cleanToggles();
  }
}
