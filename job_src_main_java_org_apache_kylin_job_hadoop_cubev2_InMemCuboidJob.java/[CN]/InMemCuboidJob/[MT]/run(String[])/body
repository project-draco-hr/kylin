{
  Options options=new Options();
  try {
    options.addOption(OPTION_JOB_NAME);
    options.addOption(OPTION_CUBE_NAME);
    options.addOption(OPTION_SEGMENT_NAME);
    options.addOption(OPTION_INPUT_PATH);
    options.addOption(OPTION_OUTPUT_PATH);
    options.addOption(OPTION_NCUBOID_LEVEL);
    options.addOption(OPTION_INPUT_FORMAT);
    options.addOption(OPTION_TABLE_NAME);
    parseOptions(options,args);
    Path input=new Path(getOptionValue(OPTION_INPUT_PATH));
    Path output=new Path(getOptionValue(OPTION_OUTPUT_PATH));
    String cubeName=getOptionValue(OPTION_CUBE_NAME).toUpperCase();
    int nCuboidLevel=Integer.parseInt(getOptionValue(OPTION_NCUBOID_LEVEL));
    String segmentName=getOptionValue(OPTION_SEGMENT_NAME);
    String intermediateTable=getOptionValue(OPTION_TABLE_NAME);
    KylinConfig config=KylinConfig.getInstanceFromEnv();
    CubeManager cubeMgr=CubeManager.getInstance(config);
    CubeInstance cube=cubeMgr.getCube(cubeName);
    job=Job.getInstance(getConf(),getOptionValue(OPTION_JOB_NAME));
    logger.info("Starting: " + job.getJobName());
    FileInputFormat.setInputPaths(job,input);
    setJobClasspath(job);
    String[] dbTableNames=HadoopUtil.parseHiveTableName(intermediateTable);
    HCatInputFormat.setInput(job,dbTableNames[0],dbTableNames[1]);
    job.setInputFormatClass(HCatInputFormat.class);
    job.setMapperClass(InMemCuboidMapper.class);
    job.setMapOutputKeyClass(Text.class);
    job.setMapOutputValueClass(Text.class);
    job.setReducerClass(CuboidReducer.class);
    job.setOutputFormatClass(SequenceFileOutputFormat.class);
    job.setOutputKeyClass(Text.class);
    job.setOutputValueClass(Text.class);
    FileOutputFormat.setOutputPath(job,output);
    job.getConfiguration().set(BatchConstants.CFG_CUBE_NAME,cubeName);
    job.getConfiguration().set(BatchConstants.CFG_CUBE_SEGMENT_NAME,segmentName);
    attachKylinPropsAndMetadata(cube,job.getConfiguration());
    setReduceTaskNum(job,config,cubeName,nCuboidLevel);
    this.deletePath(job.getConfiguration(),output);
    return waitForCompletion(job);
  }
 catch (  Exception e) {
    logger.error("error in CuboidJob",e);
    printUsage(options);
    throw e;
  }
}
