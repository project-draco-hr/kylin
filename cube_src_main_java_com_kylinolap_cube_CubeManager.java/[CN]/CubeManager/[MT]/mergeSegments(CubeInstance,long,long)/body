{
  if (cubeInstance.getBuildingSegments().size() > 0) {
    throw new RuntimeException("There is already an allocating segment!");
  }
  if (cubeInstance.getDescriptor().getCubePartitionDesc().getPartitionDateColumn() == null) {
    throw new CubeIntegrityException("there is no partition date, only full build is supported");
  }
  List<CubeSegment> readySegments=cubeInstance.getSegment(SegmentStatusEnum.READY);
  if (readySegments.isEmpty()) {
    throw new CubeIntegrityException("there are no segments in ready state");
  }
  long start=Long.MAX_VALUE;
  long end=Long.MIN_VALUE;
  for (  CubeSegment readySegment : readySegments) {
    if (hasOverlap(startDate,endDate,readySegment.getDateRangeStart(),readySegment.getDateRangeEnd())) {
      if (start > readySegment.getDateRangeStart()) {
        start=readySegment.getDateRangeStart();
      }
      if (end < readySegment.getDateRangeEnd()) {
        end=readySegment.getDateRangeEnd();
      }
    }
  }
  CubeSegment newSegment=buildSegment(cubeInstance,start,end);
  validateNewSegments(cubeInstance,CubeBuildTypeEnum.MERGE,newSegment);
  cubeInstance.getSegments().add(newSegment);
  Collections.sort(cubeInstance.getSegments());
  this.updateCube(cubeInstance);
  return newSegment;
}
