{
  Options options=new Options();
  try {
    options.addOption(OPTION_INPUT_PATH);
    options.addOption(OPTION_OUTPUT_PATH);
    options.addOption(OPTION_JOB_NAME);
    options.addOption(OPTION_KEY_CLASS);
    options.addOption(OPTION_REGION_MB);
    parseOptions(options,args);
    String jobName=getOptionValue(OPTION_JOB_NAME);
    job=Job.getInstance(getConf(),jobName);
    job.setJarByClass(this.getClass());
    addInputDirs(getOptionValue(OPTION_INPUT_PATH),job);
    Path output=new Path(getOptionValue(OPTION_OUTPUT_PATH));
    FileOutputFormat.setOutputPath(job,output);
    String keyClass=getOptionValue(OPTION_KEY_CLASS);
    Class<?> keyClz=Class.forName(keyClass);
    int regionMB=Integer.parseInt(getOptionValue(OPTION_REGION_MB));
    job.setInputFormatClass(SequenceFileInputFormat.class);
    job.setMapperClass(RandomKeyDistributionMapper.class);
    job.setMapOutputKeyClass(keyClz);
    job.setMapOutputValueClass(NullWritable.class);
    job.setReducerClass(RandomKeyDistributionReducer.class);
    job.setOutputFormatClass(SequenceFileOutputFormat.class);
    job.setOutputKeyClass(keyClz);
    job.setOutputValueClass(NullWritable.class);
    job.setNumReduceTasks(1);
    this.deletePath(job.getConfiguration(),output);
    double totalMapInputMB=this.getTotalMapInputMB();
    int regionCount=Math.max(1,(int)(totalMapInputMB / regionMB));
    int mapSampleNumber=1000;
    System.out.println("Total Map Input MB: " + totalMapInputMB);
    System.out.println("Region Count: " + regionCount);
    job.getConfiguration().set(BatchConstants.MAPPER_SAMPLE_NUMBER,String.valueOf(mapSampleNumber));
    job.getConfiguration().set(BatchConstants.REGION_NUMBER,String.valueOf(regionCount));
    return waitForCompletion(job);
  }
 catch (  Exception e) {
    printUsage(options);
    throw e;
  }
}
