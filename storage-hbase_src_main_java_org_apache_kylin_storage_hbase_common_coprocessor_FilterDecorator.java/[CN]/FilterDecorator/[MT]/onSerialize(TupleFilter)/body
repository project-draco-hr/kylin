{
  if (filter == null)   return null;
  TupleFilterFunctionTransformer translator=new TupleFilterFunctionTransformer(dimEncMap);
  filter=translator.transform(filter);
  if (!filter.isEvaluable()) {
    TupleFilter.collectColumns(filter,inevaluableColumns);
    return ConstantTupleFilter.TRUE;
  }
  if (!(filter instanceof CompareTupleFilter))   return filter;
  if (!TupleFilter.isEvaluableRecursively(filter)) {
    TupleFilter.collectColumns(filter,inevaluableColumns);
    return ConstantTupleFilter.TRUE;
  }
  if (filterConstantsTreatment == FilterConstantsTreatment.AS_IT_IS) {
    return filter;
  }
 else {
    CompareTupleFilter compareFilter=(CompareTupleFilter)filter;
    TblColRef col=compareFilter.getColumn();
    if (col == null) {
      return filter;
    }
    Collection<String> constValues=(Collection<String>)compareFilter.getValues();
    if (constValues == null || constValues.isEmpty()) {
      return filter;
    }
    CompareTupleFilter newCompareFilter=new CompareTupleFilter(compareFilter.getOperator());
    newCompareFilter.addChild(new ColumnTupleFilter(col));
    if (filterConstantsTreatment == FilterConstantsTreatment.REPLACE_WITH_GLOBAL_DICT) {
      return replaceConstantsWithGlobalDict(compareFilter,newCompareFilter);
    }
 else     if (filterConstantsTreatment == FilterConstantsTreatment.REPLACE_WITH_LOCAL_DICT) {
      return replaceConstantsWithLocalDict(compareFilter,newCompareFilter);
    }
 else {
      throw new RuntimeException("should not reach here");
    }
  }
}
