{
  Pair<ByteArrayWritable,Object[]> pair=storageInputFormat.parseMapperInput(inKey,inValue);
  ByteArrayWritable key=pair.getFirst();
  Object[] value=pair.getSecond();
  Preconditions.checkState(key.offset() == 0);
  long cuboidID=rowKeySplitter.split(key.array());
  Cuboid cuboid=Cuboid.findById(cubeDesc,cuboidID);
  RowKeyEncoder rowkeyEncoder=rowKeyEncoderProvider.getRowkeyEncoder(cuboid);
  SplittedBytes[] splittedByteses=rowKeySplitter.getSplitBuffers();
  int bufOffset=0;
  int bodySplitOffset=rowKeySplitter.getBodySplitOffset();
  for (int i=0; i < cuboid.getColumns().size(); ++i) {
    int useSplit=i + bodySplitOffset;
    TblColRef col=cuboid.getColumns().get(i);
    if (this.checkNeedMerging(col)) {
      DictionaryManager dictMgr=DictionaryManager.getInstance(config);
      Dictionary<?> sourceDict=dictMgr.getDictionary(sourceCubeSegment.getDictResPath(col));
      Dictionary<?> mergedDict=dictMgr.getDictionary(mergedCubeSegment.getDictResPath(col));
      while (sourceDict.getSizeOfValue() > newKeyBodyBuf.length - bufOffset || mergedDict.getSizeOfValue() > newKeyBodyBuf.length - bufOffset || mergedDict.getSizeOfId() > newKeyBodyBuf.length - bufOffset) {
        byte[] oldBuf=newKeyBodyBuf;
        newKeyBodyBuf=new byte[2 * newKeyBodyBuf.length];
        System.arraycopy(oldBuf,0,newKeyBodyBuf,0,oldBuf.length);
      }
      int idInSourceDict=BytesUtil.readUnsigned(splittedByteses[useSplit].value,0,splittedByteses[useSplit].length);
      int size=sourceDict.getValueBytesFromId(idInSourceDict,newKeyBodyBuf,bufOffset);
      int idInMergedDict;
      if (size < 0) {
        idInMergedDict=mergedDict.nullId();
      }
 else {
        idInMergedDict=mergedDict.getIdFromValueBytes(newKeyBodyBuf,bufOffset,size);
      }
      BytesUtil.writeUnsigned(idInMergedDict,newKeyBodyBuf,bufOffset,mergedDict.getSizeOfId());
      bufOffset+=mergedDict.getSizeOfId();
    }
 else {
      while (splittedByteses[useSplit].length > newKeyBodyBuf.length - bufOffset) {
        byte[] oldBuf=newKeyBodyBuf;
        newKeyBodyBuf=new byte[2 * newKeyBodyBuf.length];
        System.arraycopy(oldBuf,0,newKeyBodyBuf,0,oldBuf.length);
      }
      System.arraycopy(splittedByteses[useSplit].value,0,newKeyBodyBuf,bufOffset,splittedByteses[useSplit].length);
      bufOffset+=splittedByteses[useSplit].length;
    }
  }
  int fullKeySize=rowkeyEncoder.getBytesLength();
  while (newKeyBuf.array().length < fullKeySize) {
    newKeyBuf.set(new byte[newKeyBuf.length() * 2]);
  }
  newKeyBuf.set(0,fullKeySize);
  rowkeyEncoder.encode(new ByteArray(newKeyBodyBuf,0,bufOffset),newKeyBuf);
  outputKey.set(newKeyBuf.array(),0,fullKeySize);
  if (dictMeasures.size() > 0) {
    reEncodeMeasure(value);
  }
  valueBuf.clear();
  codec.encode(value,valueBuf);
  outputValue.set(valueBuf.array(),0,valueBuf.position());
  context.write(outputKey,outputValue);
}
