{
  logger.info("MR_V2 new job to MERGE segment " + seg);
  final CubeSegment cubeSegment=seg;
  final CubingJob result=CubingJob.createMergeJob(cubeSegment,submitter,config);
  final String jobId=result.getId();
  final List<CubeSegment> mergingSegments=cubeSegment.getCubeInstance().getMergingSegments(cubeSegment);
  Preconditions.checkState(mergingSegments.size() > 1,"there should be more than 2 segments to merge, target segment " + cubeSegment);
  final List<String> mergingSegmentIds=Lists.newArrayList();
  for (  CubeSegment merging : mergingSegments) {
    mergingSegmentIds.add(merging.getUuid());
  }
  inputSide.addStepPhase1_MergeDictionary(result);
  result.addTask(createMergeDictionaryStep(mergingSegmentIds));
  result.addTask(createMergeStatisticsStep(cubeSegment,mergingSegmentIds,getStatisticsPath(jobId)));
  outputSide.addStepPhase1_MergeDictionary(result);
  outputSide.addStepPhase2_BuildCube(seg,mergingSegments,result);
  result.addTask(createUpdateCubeInfoAfterMergeStep(mergingSegmentIds,jobId));
  outputSide.addStepPhase3_Cleanup(result);
  return result;
}
