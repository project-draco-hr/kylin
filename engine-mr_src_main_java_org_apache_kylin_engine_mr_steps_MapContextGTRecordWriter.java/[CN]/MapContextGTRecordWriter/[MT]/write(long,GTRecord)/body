{
  if (lastCuboidId == null || !lastCuboidId.equals(cuboidId)) {
    if (lastCuboidId != null) {
      logger.info("Cuboid " + lastCuboidId + " has "+ cuboidRowCount+ " rows");
      cuboidRowCount=0;
    }
    initVariables(cuboidId);
    lastCuboidId=cuboidId;
  }
  cuboidRowCount++;
  int header=RowConstants.ROWKEY_HEADER_LEN;
  int offSet=header;
  for (int x=0; x < dimensions; x++) {
    System.arraycopy(record.get(x).array(),record.get(x).offset(),keyBuf,offSet,record.get(x).length());
    offSet+=record.get(x).length();
  }
  short cuboidShardNum=cubeSegment.getCuboidShardNum(cuboidId);
  short shardOffset=ShardingHash.getShard(keyBuf,header,offSet - header,cuboidShardNum);
  short cuboidShardBase=cubeSegment.getCuboidBaseShard(cuboidId);
  short finalShard=ShardingHash.normalize(cuboidShardBase,shardOffset,cubeSegment.getTotalShards());
  BytesUtil.writeShort(finalShard,keyBuf,0,RowConstants.ROWKEY_SHARDID_LEN);
  valueBuf.clear();
  record.exportColumns(measureColumnsIndex,valueBuf);
  outputKey.set(keyBuf,0,offSet);
  outputValue.set(valueBuf.array(),0,valueBuf.position());
  try {
    mapContext.write(outputKey,outputValue);
  }
 catch (  InterruptedException e) {
    throw new RuntimeException(e);
  }
}
