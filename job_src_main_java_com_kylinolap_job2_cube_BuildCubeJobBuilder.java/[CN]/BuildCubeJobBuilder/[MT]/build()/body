{
  final int groupRowkeyColumnsCount=segment.getCubeDesc().getRowkey().getNCuboidBuildLevels();
  final int totalRowkeyColumnsCount=segment.getCubeDesc().getRowkey().getRowKeyColumns().length;
  SimpleDateFormat format=new SimpleDateFormat("z yyyy-MM-dd HH:mm:ss");
  format.setTimeZone(TimeZone.getTimeZone(jobEngineConfig.getTimeZone()));
  BuildCubeJob result=new BuildCubeJob();
  result.setCubeName(getCubeName());
  result.setSegmentId(segment.getUuid());
  result.setName(getCubeName() + " - " + segment.getName()+ " - BUILD - "+ format.format(new Date(System.currentTimeMillis())));
  result.setSubmitter(null);
  final String jobId=result.getId();
  final CubeJoinedFlatTableDesc intermediateTableDesc=new CubeJoinedFlatTableDesc(segment.getCubeDesc(),this.segment);
  final String intermediateHiveTableName=getIntermediateHiveTableName(intermediateTableDesc,jobId);
  final String factDistinctColumnsPath=getFactDistinctColumnsPath(jobId);
  final String cuboidRootPath=getJobWorkingDir(jobId) + "/" + getCubeName()+ "/cuboid/";
  final String cuboidPath=cuboidRootPath + "*";
  final String[] cuboidOutputTempPath=getCuboidOutputPaths(cuboidRootPath,totalRowkeyColumnsCount,groupRowkeyColumnsCount);
  final ShellExecutable intermediateHiveTableStep=createIntermediateHiveTableStep(intermediateTableDesc,jobId);
  result.addTask(intermediateHiveTableStep);
  result.addTask(createFactDistinctColumnsStep(intermediateHiveTableName,jobId));
  result.addTask(createBuildDictionaryStep(factDistinctColumnsPath));
  final MapReduceExecutable baseCuboidStep=createBaseCuboidStep(intermediateHiveTableName,cuboidOutputTempPath);
  result.addTask(baseCuboidStep);
  for (int i=1; i <= groupRowkeyColumnsCount; i++) {
    int dimNum=totalRowkeyColumnsCount - i;
    result.addTask(createNDimensionCuboidStep(cuboidOutputTempPath,dimNum,totalRowkeyColumnsCount));
  }
  result.addTask(createRangeRowkeyDistributionStep(cuboidPath));
  result.addTask(createCreateHTableStep());
  final MapReduceExecutable convertCuboidToHfileStep=createConvertCuboidToHfileStep(cuboidPath,jobId);
  result.addTask(convertCuboidToHfileStep);
  result.addTask(createBulkLoadStep(jobId));
  result.addTask(createUpdateCubeInfoStep(intermediateHiveTableStep.getId(),baseCuboidStep.getId(),convertCuboidToHfileStep.getId()));
  return result;
}
