{
  final int groupRowkeyColumnsCount=segment.getCubeDesc().getRowkey().getNCuboidBuildLevels();
  final int totalRowkeyColumnsCount=segment.getCubeDesc().getRowkey().getRowKeyColumns().length;
  BuildCubeJob result=new BuildCubeJob();
  final String jobId=result.getId();
  final CubeJoinedFlatTableDesc intermediateTableDesc=new CubeJoinedFlatTableDesc(segment.getCubeDesc(),this.segment);
  final String intermediateHiveTableName=getIntermediateHiveTableName(intermediateTableDesc,jobId);
  final String factDistinctColumnsPath=getFactDistinctColumnsPath(jobId);
  final String cuboidRootPath=getJobWorkingDir(jobId) + "/" + getCubeName()+ "/cuboid/";
  final String cuboidPath=cuboidRootPath + "*";
  final String[] cuboidOutputTempPath=getCuboidOutputPaths(cuboidRootPath,totalRowkeyColumnsCount,groupRowkeyColumnsCount);
  result.addTask(createIntermediateHiveTableStep(intermediateTableDesc,jobId));
  result.addTask(createFactDistinctColumnsStep(intermediateHiveTableName,jobId));
  result.addTask(createBuildDictionaryStep(factDistinctColumnsPath));
  result.addTask(createBaseCuboidStep(intermediateHiveTableName,cuboidOutputTempPath));
  for (int i=1; i <= groupRowkeyColumnsCount; i++) {
    int dimNum=totalRowkeyColumnsCount - i;
    result.addTask(createNDimensionCuboidStep(cuboidOutputTempPath,dimNum,totalRowkeyColumnsCount));
  }
  result.addTask(createRangeRowkeyDistributionStep(cuboidPath));
  result.addTask(createCreateHTableStep());
  result.addTask(createConvertCuboidToHfileStep(cuboidPath,jobId));
  result.addTask(createBulkLoadStep(jobId));
  return result;
}
