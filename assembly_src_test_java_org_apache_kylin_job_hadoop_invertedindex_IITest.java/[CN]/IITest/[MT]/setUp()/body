{
  this.createTestMetadata();
  this.ii=IIManager.getInstance(getTestConfig()).getII(iiName);
  this.iiDesc=ii.getDescriptor();
  List<MessageAndOffset> messages=Lists.transform(Arrays.asList(inputData),new Function<String,MessageAndOffset>(){
    @Nullable @Override public MessageAndOffset apply(    String input){
      return new MessageAndOffset(new Message(input.getBytes()),System.currentTimeMillis());
    }
  }
);
  final StreamingParser parser=StringStreamingParser.instance;
  final List<StreamingMessage> streamingMessages=Lists.transform(messages,new Function<MessageAndOffset,StreamingMessage>(){
    @Nullable @Override public StreamingMessage apply(    @Nullable MessageAndOffset input){
      return parser.parse(input);
    }
  }
);
  StreamingBatch batch=new StreamingBatch(streamingMessages,Pair.newPair(0L,System.currentTimeMillis()));
  iiRows=Lists.newArrayList();
  final Slice slice=new SliceBuilder(iiDesc,(short)0).buildSlice((batch));
  IIKeyValueCodec codec=new IIKeyValueCodec(slice.getInfo());
  for (  IIRow iiRow : codec.encodeKeyValue(slice)) {
    iiRows.add(iiRow);
  }
}
