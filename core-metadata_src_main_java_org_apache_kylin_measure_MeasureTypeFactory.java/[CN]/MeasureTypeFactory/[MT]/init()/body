{
  if (!factories.isEmpty()) {
    return;
  }
  List<MeasureTypeFactory<?>> factoryInsts=Lists.newArrayList();
  factoryInsts.add(new HLLCMeasureType.Factory());
  factoryInsts.add(new BitmapMeasureType.Factory());
  factoryInsts.add(new TopNMeasureType.Factory());
  factoryInsts.add(new RawMeasureType.Factory());
  factoryInsts.add(new ExtendedColumnMeasureType.Factory());
  logger.info("Checking custom measure types from kylin config");
  try {
    Map<String,String> customMeasureTypes=KylinConfig.getInstanceFromEnv().getCubeCustomMeasureTypes();
    for (    String customFactory : customMeasureTypes.values()) {
      try {
        logger.info("Checking custom measure types from kylin config: " + customFactory);
        factoryInsts.add((MeasureTypeFactory<?>)Class.forName(customFactory).newInstance());
      }
 catch (      Exception e) {
        throw new IllegalArgumentException("Unrecognized MeasureTypeFactory classname: " + customFactory,e);
      }
    }
  }
 catch (  KylinConfigCannotInitException e) {
    logger.warn("Will not add custome MeasureTypeFactory as KYLIN_CONF nor KYLIN_HOME is set");
  }
  for (  MeasureTypeFactory<?> factory : factoryInsts) {
    String funcName=factory.getAggrFunctionName();
    if (funcName.equals(funcName.toUpperCase()) == false)     throw new IllegalArgumentException("Aggregation function name '" + funcName + "' must be in upper case");
    String dataTypeName=factory.getAggrDataTypeName();
    if (dataTypeName.equals(dataTypeName.toLowerCase()) == false)     throw new IllegalArgumentException("Aggregation data type name '" + dataTypeName + "' must be in lower case");
    Class<? extends DataTypeSerializer<?>> serializer=factory.getAggrDataTypeSerializer();
    logger.info("registering " + funcName + "("+ dataTypeName+ "), "+ factory.getClass());
    DataType.register(dataTypeName);
    DataTypeSerializer.register(dataTypeName,serializer);
    registerUDAF(factory);
    List<MeasureTypeFactory<?>> list=factories.get(funcName);
    if (list == null)     factories.put(funcName,list=Lists.newArrayListWithCapacity(2));
    list.add(factory);
  }
  defaultFactory.add(new BasicMeasureType.Factory());
}
