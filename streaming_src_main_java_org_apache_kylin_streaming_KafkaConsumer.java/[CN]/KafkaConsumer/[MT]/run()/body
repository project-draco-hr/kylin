{
  try {
    Broker leadBroker=getLeadBroker();
    int consumeMsgCount=0;
    int fetchRound=0;
    while (isRunning) {
      int consumeMsgCountAtBeginning=consumeMsgCount;
      fetchRound++;
      if (leadBroker == null) {
        leadBroker=getLeadBroker();
      }
      if (leadBroker == null) {
        logger.warn("cannot find lead broker");
        continue;
      }
      logger.info("fetching topic {} partition id {} offset {} leader {}",new String[]{topic,String.valueOf(partitionId),String.valueOf(offset),leadBroker.toString()});
      final FetchResponse fetchResponse=KafkaRequester.fetchResponse(topic,partitionId,offset,leadBroker,streamingConfig);
      if (fetchResponse.errorCode(topic,partitionId) != 0) {
        logger.warn("fetch response offset:" + offset + " errorCode:"+ fetchResponse.errorCode(topic,partitionId));
        Thread.sleep(30000);
        continue;
      }
      for (      MessageAndOffset messageAndOffset : fetchResponse.messageSet(topic,partitionId)) {
        try {
          consume(messageAndOffset.offset(),messageAndOffset.message().payload());
        }
 catch (        Exception e) {
          logger.error("error put streamQueue",e);
          break;
        }
        offset++;
        consumeMsgCount++;
      }
      logger.info("Number of messages consumed: " + consumeMsgCount + " offset is: "+ offset+ " total fetch round: "+ fetchRound);
      if (consumeMsgCount == consumeMsgCountAtBeginning) {
        Thread.sleep(30000);
      }
    }
    for (int i=0; i < streamQueue.length; ++i) {
      streamQueue[i].put(StreamMessage.EOF);
    }
  }
 catch (  Exception e) {
    logger.error("consumer has encountered an error",e);
  }
}
