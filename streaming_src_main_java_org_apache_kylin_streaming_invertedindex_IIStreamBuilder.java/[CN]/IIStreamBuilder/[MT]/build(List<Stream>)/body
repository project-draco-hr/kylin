{
  logger.info("stream build start, size:" + streamsToBuild.size());
  Stopwatch stopwatch=new Stopwatch().start();
  List<List<String>> table=Lists.transform(streamsToBuild,new Function<Stream,List<String>>(){
    @Nullable @Override public List<String> apply(    @Nullable Stream input){
      return parseStream(input,desc);
    }
  }
);
  final Map<TblColRef,Dictionary<?>> dictionaryMap=buildDictionary(table,desc);
  Map<TblColRef,FixedLenMeasureCodec<?>> measureCodecMap=Maps.newHashMap();
  int index=0;
  for (  TblColRef tblColRef : desc.listAllColumns()) {
    ColumnDesc col=tblColRef.getColumn();
    if (desc.isMetricsCol(index++)) {
      measureCodecMap.put(tblColRef,FixedLenMeasureCodec.get(col.getType()));
    }
  }
  TableRecordInfo tableRecordInfo=new TableRecordInfo(desc,dictionaryMap,measureCodecMap);
  SliceBuilder sliceBuilder=new SliceBuilder(tableRecordInfo,(short)partitionId);
  final Slice slice=buildSlice(table,sliceBuilder,tableRecordInfo);
  loadToHBase(hTable,slice,new IIKeyValueCodec(tableRecordInfo.getDigest()),desc.listAllColumns(),dictionaryMap);
  submitOffset();
  stopwatch.stop();
  logger.info("stream build finished, size:" + streamsToBuild.size() + " elapsed time:"+ stopwatch.elapsedTime(TimeUnit.MILLISECONDS)+ TimeUnit.MILLISECONDS);
}
