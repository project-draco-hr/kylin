{
  logger.info("stream build start, size:" + streamsToBuild.size());
  Stopwatch stopwatch=new Stopwatch().start();
  List<List<String>> table=Lists.transform(streamsToBuild,new Function<Stream,List<String>>(){
    @Nullable @Override public List<String> apply(    @Nullable Stream input){
      return parseStream(input,desc);
    }
  }
);
  final Map<Integer,Dictionary<?>> dictionaryMap=buildDictionary(table,desc);
  TableRecordInfo tableRecordInfo=new TableRecordInfo(desc,dictionaryMap);
  SliceBuilder sliceBuilder=new SliceBuilder(tableRecordInfo,(short)partitionId);
  final Slice slice=buildSlice(table,sliceBuilder,tableRecordInfo,dictionaryMap);
  loadToHBase(hTable,slice,new IIKeyValueCodec(tableRecordInfo.getDigest()));
  submitOffset();
  stopwatch.stop();
  logger.info("stream build finished, size:" + streamsToBuild.size() + " elapsed time:"+ stopwatch.elapsedTime(TimeUnit.MILLISECONDS)+ TimeUnit.MILLISECONDS);
}
