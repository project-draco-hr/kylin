{
  logger.info("Deal with realization {} of type {}",realization.getName(),realization.getType());
  if (realization instanceof CubeInstance) {
    CubeInstance cube=(CubeInstance)realization;
    String descName=cube.getDescName();
    CubeDesc cubeDesc=cubeDescManager.getCubeDesc(descName);
    String modelName=cubeDesc.getModelName();
    DataModelDesc modelDesc=metadataManager.getDataModelDesc(modelName);
    dealWithStreaming(cube);
    for (    String tableName : modelDesc.getAllTables()) {
      addRequired(TableDesc.concatResourcePath(tableName));
      addOptional(TableDesc.concatExdResourcePath(tableName));
    }
    addRequired(DataModelDesc.concatResourcePath(modelDesc.getName()));
    addRequired(CubeDesc.concatResourcePath(cubeDesc.getName()));
    if (includeSegments) {
      addRequired(CubeInstance.concatResourcePath(cube.getName()));
      for (      CubeSegment segment : cube.getSegments(SegmentStatusEnum.READY)) {
        addRequired(CubeSegment.getStatisticsResourcePath(cube.getName(),segment.getUuid()));
        if (includeSegmentDetails) {
          for (          String dictPat : segment.getDictionaryPaths()) {
            addRequired(dictPat);
          }
          for (          String snapshotPath : segment.getSnapshotPaths()) {
            addRequired(snapshotPath);
          }
        }
        if (includeJobs) {
          String lastJobId=segment.getLastBuildJobID();
          if (StringUtils.isEmpty(lastJobId)) {
            throw new RuntimeException("No job exist for segment :" + segment);
          }
 else {
            try {
              if (onlyJobOutput) {
                ExecutablePO executablePO=executableDao.getJob(lastJobId);
                addRequired(ResourceStore.EXECUTE_OUTPUT_RESOURCE_ROOT + "/" + lastJobId);
              }
 else {
                ExecutablePO executablePO=executableDao.getJob(lastJobId);
                addRequired(ResourceStore.EXECUTE_RESOURCE_ROOT + "/" + lastJobId);
                addRequired(ResourceStore.EXECUTE_OUTPUT_RESOURCE_ROOT + "/" + lastJobId);
                for (                ExecutablePO task : executablePO.getTasks()) {
                  addRequired(ResourceStore.EXECUTE_RESOURCE_ROOT + "/" + task.getUuid());
                  addRequired(ResourceStore.EXECUTE_OUTPUT_RESOURCE_ROOT + "/" + task.getUuid());
                }
              }
            }
 catch (            PersistentException e) {
              throw new RuntimeException("PersistentException",e);
            }
          }
        }
      }
    }
 else {
      if (includeJobs) {
        logger.warn("It's useless to set includeJobs to true when includeSegments is set to false");
      }
      cubesToTrimAndSave.add(cube);
    }
  }
 else   if (realization instanceof HybridInstance) {
    HybridInstance hybridInstance=(HybridInstance)realization;
    addRequired(HybridInstance.concatResourcePath(hybridInstance.getName()));
    for (    IRealization iRealization : hybridInstance.getRealizations()) {
      if (iRealization.getType() != RealizationType.CUBE) {
        throw new RuntimeException("Hybrid " + iRealization.getName() + " contains non cube child "+ iRealization.getName()+ " with type "+ iRealization.getType());
      }
      retrieveResourcePath(iRealization);
    }
  }
 else {
    logger.warn("Unknown realization type: " + realization.getType());
  }
}
