{
  includeSegments=optionsHelper.hasOption(OPTION_INCLUDE_SEGMENTS) ? Boolean.valueOf(optionsHelper.getOptionValue(OPTION_INCLUDE_SEGMENTS)) : true;
  includeJobs=optionsHelper.hasOption(OPTION_INCLUDE_JOB) ? Boolean.valueOf(optionsHelper.getOptionValue(OPTION_INCLUDE_JOB)) : false;
  includeSegmentDetails=optionsHelper.hasOption(OPTION_INCLUDE_SEGMENT_DETAILS) ? Boolean.valueOf(optionsHelper.getOptionValue(OPTION_INCLUDE_SEGMENT_DETAILS)) : false;
  onlyJobOutput=optionsHelper.hasOption(OPTION_INCLUDE_ONLY_JOB_OUTPUT) ? Boolean.valueOf(optionsHelper.getOptionValue(OPTION_INCLUDE_ONLY_JOB_OUTPUT)) : true;
  kylinConfig=KylinConfig.getInstanceFromEnv();
  metadataManager=MetadataManager.getInstance(kylinConfig);
  projectManager=ProjectManager.getInstance(kylinConfig);
  hybridManager=HybridManager.getInstance(kylinConfig);
  cubeManager=CubeManager.getInstance(kylinConfig);
  cubeDescManager=CubeDescManager.getInstance(kylinConfig);
  executableDao=ExecutableDao.getInstance(kylinConfig);
  realizationRegistry=RealizationRegistry.getInstance(kylinConfig);
  badQueryHistoryManager=BadQueryHistoryManager.getInstance(kylinConfig);
  if (optionsHelper.hasOption(OPTION_PROJECT)) {
    String projectNames=optionsHelper.getOptionValue(OPTION_PROJECT);
    for (    String projectName : projectNames.split(",")) {
      ProjectInstance projectInstance=projectManager.getProject(projectName);
      if (projectInstance == null) {
        throw new IllegalArgumentException("Project " + projectName + " does not exist");
      }
      addRequired(projectInstance.getResourcePath());
      List<RealizationEntry> realizationEntries=projectInstance.getRealizationEntries();
      for (      RealizationEntry realizationEntry : realizationEntries) {
        retrieveResourcePath(getRealization(realizationEntry));
      }
      List<DataModelDesc> modelDescs=metadataManager.getModels(projectName);
      for (      DataModelDesc modelDesc : modelDescs) {
        addRequired(DataModelDesc.concatResourcePath(modelDesc.getName()));
      }
      addOptional(badQueryHistoryManager.getBadQueriesForProject(projectName).getResourcePath());
    }
  }
 else   if (optionsHelper.hasOption(OPTION_CUBE)) {
    String cubeNames=optionsHelper.getOptionValue(OPTION_CUBE);
    for (    String cubeName : cubeNames.split(",")) {
      IRealization realization=cubeManager.getRealization(cubeName);
      if (realization == null) {
        throw new IllegalArgumentException("No cube found with name of " + cubeName);
      }
 else {
        retrieveResourcePath(realization);
      }
    }
  }
 else   if (optionsHelper.hasOption(OPTION_HYBRID)) {
    String hybridNames=optionsHelper.getOptionValue(OPTION_HYBRID);
    for (    String hybridName : hybridNames.split(",")) {
      IRealization realization=hybridManager.getRealization(hybridName);
      if (realization != null) {
        retrieveResourcePath(realization);
      }
 else {
        throw new IllegalArgumentException("No hybrid found with name of" + hybridName);
      }
    }
  }
  executeExtraction(exportDir.getAbsolutePath());
}
