{
  String func=funcDesc.getExpression();
  DataType rtype=funcDesc.getReturnDataType();
  if (funcDesc.isCount()) {
    if (rtype.isIntegerFamily() == false) {
      context.addResult(ResultLevel.ERROR,"Return type for function " + func + " must be one of "+ DataType.INTEGER_FAMILY);
    }
  }
 else   if (funcDesc.isCountDistinct()) {
    if (rtype.isHLLC() == false && funcDesc.isHolisticCountDistinct() == false) {
      context.addResult(ResultLevel.ERROR,"Return type for function " + func + " must be hllc(10), hllc(12) etc.");
    }
  }
 else   if (funcDesc.isMax() || funcDesc.isMin() || funcDesc.isSum()) {
    if (rtype.isNumberFamily() == false) {
      context.addResult(ResultLevel.ERROR,"Return type for function " + func + " must be one of "+ DataType.NUMBER_FAMILY);
    }
  }
 else   if (funcDesc.isTopN()) {
    if (rtype.isTopN() == false) {
      context.addResult(ResultLevel.ERROR,"Return type for function " + func + " must be one of topn");
    }
  }
 else {
    if (StringUtils.equalsIgnoreCase(KylinConfig.getInstanceFromEnv().getProperty(KEY_IGNORE_UNKNOWN_FUNC,"false"),"false")) {
      context.addResult(ResultLevel.ERROR,"Unrecognized function: [" + func + "]");
    }
  }
}
