{
  BlockBuilder builder=new BlockBuilder();
  final Result leftResult=implementor.visitChild(this,0,(EnumerableRel)left,pref);
  Expression leftExpression=builder.append("left",leftResult.block);
  final Result rightResult=implementor.visitChild(this,1,(EnumerableRel)right,pref);
  Expression rightExpression=builder.append("right",rightResult.block);
  final PhysType physType=PhysTypeImpl.of(implementor.getTypeFactory(),getRowType(),pref.preferArray());
  final PhysType keyPhysType=leftResult.physType.project(leftKeys,JavaRowFormat.LIST);
  return implementor.result(physType,builder.append(Expressions.call(leftExpression,BuiltInMethod.JOIN.method,Expressions.list(rightExpression,leftResult.physType.generateAccessor(leftKeys),rightResult.physType.generateAccessor(rightKeys),EnumUtils.joinSelector(joinType,physType,ImmutableList.of(leftResult.physType,rightResult.physType))).append(Util.first(keyPhysType.comparer(),Expressions.constant(null))).append(Expressions.constant(joinType.generatesNullsOnLeft())).append(Expressions.constant(joinType.generatesNullsOnRight())))).toBlock());
}
