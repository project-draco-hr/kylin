{
  CubeInstance cubeInstance=CubeManager.getInstance(KylinConfig.getInstanceFromEnv()).reloadCubeLocal(cubeName);
  CubeDesc cubeDesc=cubeInstance.getDescriptor();
  CuboidScheduler cuboidScheduler=new CuboidScheduler(cubeDesc);
  List<Long> allCuboidIds=cuboidScheduler.getAllCuboidIds();
  final HashMap<Long,HyperLogLogPlusCounter> zeroValue=Maps.newHashMap();
  for (  Long id : allCuboidIds) {
    zeroValue.put(id,new HyperLogLogPlusCounter(14));
  }
  CubeJoinedFlatTableDesc flatTableDesc=new CubeJoinedFlatTableDesc(cubeDesc,null);
  final int[] rowKeyColumnIndexes=flatTableDesc.getRowKeyColumnIndexes();
  final int nRowKey=cubeDesc.getRowkey().getRowKeyColumns().length;
  final long baseCuboidId=Cuboid.getBaseCuboidId(cubeDesc);
  final Map<Long,Integer[]> allCuboidsBitSet=Maps.newHashMapWithExpectedSize(allCuboidIds.size());
  final ByteArray[] row_hashcodes=new ByteArray[nRowKey];
  for (  Long cuboidId : allCuboidIds) {
    Integer[] cuboidBitSet=new Integer[Long.bitCount(cuboidId)];
    long mask=Long.highestOneBit(baseCuboidId);
    int position=0;
    for (int i=0; i < nRowKey; i++) {
      if ((mask & cuboidId) > 0) {
        cuboidBitSet[position]=i;
        position++;
      }
      mask=mask >> 1;
    }
    allCuboidsBitSet.put(cuboidId,cuboidBitSet);
  }
  for (int i=0; i < nRowKey; ++i) {
    row_hashcodes[i]=new ByteArray();
  }
  final HashMap<Long,HyperLogLogPlusCounter> samplingResult=rowJavaRDD.aggregate(zeroValue,new Function2<HashMap<Long,HyperLogLogPlusCounter>,List<String>,HashMap<Long,HyperLogLogPlusCounter>>(){
    final HashFunction hashFunction=Hashing.murmur3_128();
    @Override public HashMap<Long,HyperLogLogPlusCounter> call(    HashMap<Long,HyperLogLogPlusCounter> v1,    List<String> v2) throws Exception {
      for (int i=0; i < nRowKey; i++) {
        Hasher hc=hashFunction.newHasher();
        String colValue=v2.get(rowKeyColumnIndexes[i]);
        if (colValue != null) {
          row_hashcodes[i].set(hc.putString(colValue).hash().asBytes());
        }
 else {
          row_hashcodes[i].set(hc.putInt(0).hash().asBytes());
        }
      }
      for (      Map.Entry<Long,Integer[]> entry : allCuboidsBitSet.entrySet()) {
        Hasher hc=hashFunction.newHasher();
        HyperLogLogPlusCounter counter=v1.get(entry.getKey());
        final Integer[] cuboidBitSet=entry.getValue();
        for (int position=0; position < cuboidBitSet.length; position++) {
          hc.putBytes(row_hashcodes[cuboidBitSet[position]].array());
        }
        counter.add(hc.hash().asBytes());
      }
      return v1;
    }
  }
,new Function2<HashMap<Long,HyperLogLogPlusCounter>,HashMap<Long,HyperLogLogPlusCounter>,HashMap<Long,HyperLogLogPlusCounter>>(){
    @Override public HashMap<Long,HyperLogLogPlusCounter> call(    HashMap<Long,HyperLogLogPlusCounter> v1,    HashMap<Long,HyperLogLogPlusCounter> v2) throws Exception {
      Preconditions.checkArgument(v1.size() == v2.size());
      Preconditions.checkArgument(v1.size() > 0);
      for (      Map.Entry<Long,HyperLogLogPlusCounter> entry : v1.entrySet()) {
        final HyperLogLogPlusCounter counter1=entry.getValue();
        final HyperLogLogPlusCounter counter2=v2.get(entry.getKey());
        counter1.merge(Preconditions.checkNotNull(counter2,"counter cannot be null"));
      }
      return v1;
    }
  }
);
  return samplingResult;
}
