{
  this.lookupTables=new HashMap<String,LookupBytesTable>();
  this.tableJoins=new LinkedList<TableJoin>();
  this.factTblColAsRowKey=new LinkedList<Pair<Integer,Integer>>();
  for (  DimensionDesc dim : cubeDesc.getDimensions()) {
    JoinDesc join=dim.getJoin();
    if (join != null) {
      String joinType=join.getType().toUpperCase();
      String lookupTableName=dim.getTable();
      if (!lookupTables.containsKey(lookupTableName)) {
        HiveTable htable=new HiveTable(metadataManager,lookupTableName);
        LookupBytesTable btable=new LookupBytesTable(metadataManager.getTableDesc(lookupTableName),join.getPrimaryKey(),htable);
        lookupTables.put(lookupTableName,btable);
      }
      LinkedList<Integer> fkIndice=new LinkedList<Integer>();
      for (      TblColRef colRef : join.getForeignKeyColumns()) {
        fkIndice.add(colRef.getColumn().getZeroBasedIndex());
      }
      this.tableJoins.add(new TableJoin(joinType,fkIndice,lookupTableName,this.findColumnRowKeyRelationships(dim)));
    }
 else {
      this.factTblColAsRowKey.addAll(this.findColumnRowKeyRelationships(dim));
    }
  }
  Collections.sort(tableJoins,new Comparator<TableJoin>(){
    @Override public int compare(    TableJoin o1,    TableJoin o2){
      return Integer.valueOf(o2.fkIndice.size()).compareTo(Integer.valueOf(o1.fkIndice.size()));
    }
  }
);
}
