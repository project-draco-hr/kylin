{
  return new Iterator<Tuple2<K,V>>(){
    Tuple2<K,V> current=input.hasNext() ? input.next() : null;
    @Override public boolean hasNext(){
      return current != null;
    }
    @Override public Tuple2<K,V> next(){
      if (!hasNext()) {
        throw new NoSuchElementException();
      }
      final LinkedList<V> values=Lists.newLinkedList();
      K currentKey=current._1();
      values.add(current._2());
      while (input.hasNext()) {
        Tuple2<K,V> next=input.next();
        if (comparator.compare(currentKey,next._1()) == 0) {
          values.add(next._2());
        }
 else {
          current=next;
          try {
            return new Tuple2<>(currentKey,converter.call(values));
          }
 catch (          Exception e) {
            throw new RuntimeException(e);
          }
        }
      }
      if (!input.hasNext()) {
        current=null;
      }
      try {
        return new Tuple2<>(currentKey,converter.call(values));
      }
 catch (      Exception e) {
        throw new RuntimeException(e);
      }
    }
    @Override public void remove(){
      throw new UnsupportedOperationException();
    }
  }
;
}
