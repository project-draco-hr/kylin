{
  int rowkeyColCount=cubeDesc.getRowkey().getRowKeyColumns().length;
  long baseCuboidId=Cuboid.getBaseCuboidId(cubeDesc);
  Cuboid baseCuboid=Cuboid.findById(cubeDesc,baseCuboidId);
  if (cubeSegment == null) {
    this.tableName="kylin_intermediate_" + cubeDesc.getName();
  }
 else {
    this.tableName="kylin_intermediate_" + cubeDesc.getName() + "_"+ cubeSegment.getName();
  }
  Map<String,Integer> dimensionIndexMap=new HashMap<String,Integer>();
  int columnIndex=0;
  for (  TblColRef col : cubeDesc.listDimensionColumnsExcludingDerived()) {
    dimensionIndexMap.put(col.getName(),columnIndex);
    columnList.add(new IntermediateColumnDesc(String.valueOf(columnIndex),col.getName(),col.getDatatype(),col.getTable()));
    columnIndex++;
  }
  List<TblColRef> cuboidColumns=baseCuboid.getColumns();
  rowKeyColumnIndexes=new int[rowkeyColCount];
  for (int i=0; i < rowkeyColCount; i++) {
    String colName=cuboidColumns.get(i).getName();
    Integer dimIdx=dimensionIndexMap.get(colName);
    if (dimIdx == null) {
      throw new RuntimeException("Can't find column " + colName);
    }
    rowKeyColumnIndexes[i]=dimIdx;
  }
  List<MeasureDesc> measures=cubeDesc.getMeasures();
  int measureSize=measures.size();
  measureColumnIndexes=new int[measureSize][];
  for (int i=0; i < measureSize; i++) {
    FunctionDesc func=measures.get(i).getFunction();
    List<TblColRef> colRefs=func.getParameter().getColRefs();
    if (colRefs == null) {
      measureColumnIndexes[i]=null;
    }
 else {
      measureColumnIndexes[i]=new int[colRefs.size()];
      for (int j=0; j < colRefs.size(); j++) {
        TblColRef c=colRefs.get(j);
        measureColumnIndexes[i][j]=contains(columnList,c);
        if (measureColumnIndexes[i][j] < 0) {
          measureColumnIndexes[i][j]=columnIndex;
          columnList.add(new IntermediateColumnDesc(String.valueOf(columnIndex),c.getName(),c.getDatatype(),c.getTable()));
          columnIndex++;
        }
      }
    }
  }
  this.columnCount=columnIndex;
}
