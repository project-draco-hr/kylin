{
  CoprocessorRowType type=null;
  CoprocessorProjector projector=null;
  EndpointAggregators aggregators=null;
  CoprocessorFilter filter=null;
  if (request.hasType()) {
    type=CoprocessorRowType.deserialize(request.getType().toByteArray());
  }
  if (request.hasProjector()) {
    projector=CoprocessorProjector.deserialize(request.getProjector().toByteArray());
  }
  if (request.hasAggregator()) {
    aggregators=EndpointAggregators.deserialize(request.getAggregator().toByteArray());
  }
  if (request.hasFilter()) {
    filter=CoprocessorFilter.deserialize(request.getFilter().toByteArray());
  }
  IIProtos.IIResponse response=null;
  RegionScanner innerScanner=null;
  HRegion region=null;
  try {
    ByteBuffer byteBuffer=request.getTableInfo().asReadOnlyByteBuffer();
    TableRecordInfoDigest tableInfo=TableRecordInfoDigest.deserialize(byteBuffer);
    region=env.getRegion();
    innerScanner=region.getScanner(buildScan());
    region.startRegionOperation();
synchronized (innerScanner) {
      IIProtos.IIResponse.Builder responseBuilder=IIProtos.IIResponse.newBuilder();
      EndpointAggregationCache aggCache=new EndpointAggregationCache(aggregators);
      IIKeyValueCodec codec=new IIKeyValueCodec(tableInfo);
      for (      Slice slice : codec.decodeKeyValue(new HbaseServerKVIterator(innerScanner))) {
        ConciseSet result=null;
        if (filter != null) {
          result=new BitMapFilterEvaluator(new SliceBitMapProvider(slice,type)).evaluate(filter.getFilter());
        }
        Iterator<TableRecordBytes> iterator=slice.iterateWithBitmap(result);
        while (iterator.hasNext()) {
          byte[] data=iterator.next().getBytes();
          CoprocessorProjector.AggrKey aggKey=projector.getAggrKey(data);
          MeasureAggregator[] bufs=aggCache.getBuffer(aggKey);
          aggregators.aggregate(bufs,data);
          aggCache.checkMemoryUsage();
        }
      }
      for (      Map.Entry<CoprocessorProjector.AggrKey,MeasureAggregator[]> entry : aggCache.getAllEntries()) {
        CoprocessorProjector.AggrKey aggrKey=entry.getKey();
        IIRow.Builder rowBuilder=IIRow.newBuilder().setColumns(ByteString.copyFrom(aggrKey.get(),aggrKey.offset(),aggrKey.length())).setMeasures(ByteString.copyFrom(aggregators.serializeMetricValues(entry.getValue())));
        responseBuilder.addRows(rowBuilder.build());
      }
      response=responseBuilder.build();
    }
  }
 catch (  IOException ioe) {
    ResponseConverter.setControllerException(controller,ioe);
  }
 finally {
    IOUtils.closeQuietly(innerScanner);
    if (region != null) {
      try {
        region.closeRegionOperation();
      }
 catch (      IOException e) {
        e.printStackTrace();
        throw new RuntimeException(e);
      }
    }
  }
  done.run(response);
}
