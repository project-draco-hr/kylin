{
  if (context.isCoprocessorEnabled() == false) {
    return table.getScanner(scan);
  }
  CoprocessorRowType type=CoprocessorRowType.fromCuboid(segment,cuboid);
  CoprocessorFilter filter=CoprocessorFilter.fromFilter(segment,tupleFiler);
  CoprocessorProjector projector=CoprocessorProjector.makeForObserver(segment,cuboid,groupBy);
  ObserverAggregators aggrs=ObserverAggregators.fromValueDecoders(rowValueDecoders);
  boolean localCoprocessor=KylinConfig.getInstanceFromEnv().getQueryRunLocalCoprocessor() || BackdoorToggles.getRunLocalCoprocessor();
  if (localCoprocessor) {
    RegionScanner innerScanner=new RegionScannerAdapter(table.getScanner(scan));
    AggregationScanner aggrScanner=new AggregationScanner(type,filter,projector,aggrs,innerScanner,ObserverBehavior.SCAN_FILTER_AGGR);
    return new ResultScannerAdapter(aggrScanner);
  }
 else {
    String toggle=BackdoorToggles.getObserverBehavior();
    if (toggle == null) {
      toggle=ObserverBehavior.SCAN_FILTER_AGGR.toString();
    }
 else {
      logger.info("The execution of this query will use " + toggle + " as observer's behavior");
    }
    scan.setAttribute(AggregateRegionObserver.COPROCESSOR_ENABLE,new byte[]{0x01});
    scan.setAttribute(AggregateRegionObserver.BEHAVIOR,toggle.getBytes());
    scan.setAttribute(AggregateRegionObserver.TYPE,CoprocessorRowType.serialize(type));
    scan.setAttribute(AggregateRegionObserver.PROJECTOR,CoprocessorProjector.serialize(projector));
    scan.setAttribute(AggregateRegionObserver.AGGREGATORS,ObserverAggregators.serialize(aggrs));
    scan.setAttribute(AggregateRegionObserver.FILTER,CoprocessorFilter.serialize(filter));
    return table.getScanner(scan);
  }
}
