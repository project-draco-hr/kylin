{
  Map<TblColRef,Dictionary<String>> result=Maps.newHashMap();
  CubeDesc desc=cube.getDescriptor();
  CubeJoinedFlatTableEnrich flatDesc=new CubeJoinedFlatTableEnrich(EngineFactory.getJoinedFlatTableDesc(desc),desc);
  int nColumns=flatDesc.getAllColumns().size();
  List<TblColRef> columns=Cuboid.getBaseCuboid(desc).getColumns();
  for (int c=0; c < columns.size(); c++) {
    TblColRef col=columns.get(c);
    if (desc.getRowkey().isUseDictionary(col)) {
      logger.info("Building dictionary for " + col);
      List<byte[]> valueList=readValueList(flatTable,nColumns,flatDesc.getRowKeyColumnIndexes()[c]);
      Dictionary<String> dict=DictionaryGenerator.buildDictionary(col.getType(),new IterableDictionaryValueEnumerator(valueList));
      result.put(col,dict);
    }
  }
  for (int measureIdx=0; measureIdx < cube.getDescriptor().getMeasures().size(); measureIdx++) {
    MeasureDesc measureDesc=cube.getDescriptor().getMeasures().get(measureIdx);
    FunctionDesc func=measureDesc.getFunction();
    List<TblColRef> dictCols=func.getMeasureType().getColumnsNeedDictionary(func);
    if (dictCols.isEmpty())     continue;
    int[] flatTableIdx=flatDesc.getMeasureColumnIndexes()[measureIdx];
    List<TblColRef> paramCols=func.getParameter().getColRefs();
    for (int i=0; i < paramCols.size(); i++) {
      TblColRef col=paramCols.get(i);
      if (dictCols.contains(col)) {
        int colIdxOnFlat=flatTableIdx[i];
        logger.info("Building dictionary for " + col);
        List<byte[]> valueList=readValueList(flatTable,nColumns,colIdxOnFlat);
        Dictionary<String> dict=DictionaryGenerator.buildDictionary(col.getType(),new IterableDictionaryValueEnumerator(valueList));
        result.put(col,dict);
      }
    }
  }
  return result;
}
