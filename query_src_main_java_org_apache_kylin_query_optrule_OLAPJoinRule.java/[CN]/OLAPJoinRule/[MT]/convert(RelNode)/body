{
  LogicalJoin join=(LogicalJoin)rel;
  RelNode left=join.getInput(0);
  RelNode right=join.getInput(1);
  RelTraitSet traitSet=join.getTraitSet().replace(OLAPRel.CONVENTION);
  left=convert(left,traitSet);
  right=convert(right,traitSet);
  final JoinInfo info=JoinInfo.of(left,right,join.getCondition());
  if (!info.isEqui() && join.getJoinType() != JoinRelType.INNER) {
    return null;
  }
  RelOptCluster cluster=join.getCluster();
  RelNode newRel;
  try {
    newRel=new OLAPJoinRel(cluster,traitSet,left,right,info.getEquiCondition(left,right,cluster.getRexBuilder()),info.leftKeys,info.rightKeys,join.getVariablesSet(),join.getJoinType());
  }
 catch (  InvalidRelException e) {
    throw new AssertionError(e);
  }
  if (!info.isEqui()) {
    newRel=new OLAPFilterRel(cluster,newRel.getTraitSet(),newRel,info.getRemaining(cluster.getRexBuilder()));
  }
  return newRel;
}
