{
  try {
    AbstractRestCache.setCacheUpdater(new RemoteCacheUpdater());
    Preconditions.checkArgument(args[0].equals("streaming"));
    Preconditions.checkArgument(args[1].equals("start"));
    int i=2;
    BootstrapConfig bootstrapConfig=new BootstrapConfig();
    while (i < args.length) {
      String argName=args[i];
switch (argName) {
case "-oneoff":
        bootstrapConfig.setOneOff(Boolean.parseBoolean(args[++i]));
      break;
case "-start":
    bootstrapConfig.setStart(Long.parseLong(args[++i]));
  break;
case "-end":
bootstrapConfig.setEnd(Long.parseLong(args[++i]));
break;
case "-streaming":
bootstrapConfig.setStreaming(args[++i]);
break;
case "-partition":
bootstrapConfig.setPartitionId(Integer.parseInt(args[++i]));
break;
case "-fillGap":
bootstrapConfig.setFillGap(Boolean.parseBoolean(args[++i]));
break;
default :
logger.warn("ignore this arg:" + argName);
}
i++;
}
final Runnable runnable=new OneOffStreamingBuilder(bootstrapConfig.getStreaming(),bootstrapConfig.getStart(),bootstrapConfig.getEnd()).build();
runnable.run();
logger.info("streaming process stop, exit with 0");
System.exit(0);
}
 catch (Exception e) {
printArgsError(args);
logger.error("error start streaming",e);
System.exit(-1);
}
}
