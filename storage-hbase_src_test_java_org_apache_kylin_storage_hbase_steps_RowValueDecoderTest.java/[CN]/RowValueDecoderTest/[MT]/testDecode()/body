{
  CubeDesc cubeDesc=CubeManager.getInstance(getTestConfig()).getCube("test_kylin_cube_with_slr_ready").getDescriptor();
  HBaseColumnDesc hbaseCol=cubeDesc.getHbaseMapping().getColumnFamily()[0].getColumns()[0];
  MeasureCodec codec=new MeasureCodec(hbaseCol.getMeasures());
  BigDecimal sum=new BigDecimal("333.1234567");
  BigDecimal min=new BigDecimal("333.1111111");
  BigDecimal max=new BigDecimal("333.1999999");
  LongMutable count=new LongMutable(2);
  LongMutable item_count=new LongMutable(100);
  ByteBuffer buf=ByteBuffer.allocate(RowConstants.ROWVALUE_BUFFER_SIZE);
  codec.encode(new Object[]{sum,min,max,count,item_count},buf);
  buf.flip();
  byte[] valueBytes=new byte[buf.limit()];
  System.arraycopy(buf.array(),0,valueBytes,0,buf.limit());
  RowValueDecoder rowValueDecoder=new RowValueDecoder(hbaseCol);
  for (  MeasureDesc measure : cubeDesc.getMeasures()) {
    FunctionDesc aggrFunc=measure.getFunction();
    int index=hbaseCol.findMeasure(aggrFunc);
    rowValueDecoder.setProjectIndex(index);
  }
  rowValueDecoder.decodeAndConvertJavaObj(valueBytes);
  Object[] measureValues=rowValueDecoder.getValues();
  assertEquals("[333.1235, 333.1111, 333.2000, 2, 100]",Arrays.toString(measureValues));
}
