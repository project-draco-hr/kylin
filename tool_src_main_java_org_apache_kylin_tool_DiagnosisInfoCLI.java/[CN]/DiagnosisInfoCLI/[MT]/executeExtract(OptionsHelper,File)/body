{
  final String projectInput=optionsHelper.getOptionValue(options.getOption("project"));
  final boolean includeConf=optionsHelper.hasOption(OPTION_INCLUDE_CONF) ? Boolean.valueOf(optionsHelper.getOptionValue(OPTION_INCLUDE_CONF)) : true;
  final boolean includeHBase=optionsHelper.hasOption(OPTION_INCLUDE_HBASE) ? Boolean.valueOf(optionsHelper.getOptionValue(OPTION_INCLUDE_HBASE)) : true;
  final boolean includeClient=optionsHelper.hasOption(OPTION_INCLUDE_CLIENT) ? Boolean.valueOf(optionsHelper.getOptionValue(OPTION_INCLUDE_CLIENT)) : true;
  final boolean includeJob=optionsHelper.hasOption(OPTION_INCLUDE_JOB) ? Boolean.valueOf(optionsHelper.getOptionValue(OPTION_INCLUDE_JOB)) : true;
  final int threadsNum=optionsHelper.hasOption(OPTION_THREADS) ? Integer.valueOf(optionsHelper.getOptionValue(OPTION_THREADS)) : DEFAULT_PARALLEL_SIZE;
  final String projectNames=StringUtils.join(getProjects(projectInput),",");
  logger.info("Start diagnosis info extraction in {} threads.",threadsNum);
  executorService=Executors.newFixedThreadPool(threadsNum);
  executorService.execute(new Runnable(){
    @Override public void run(){
      String[] cubeMetaArgs={"-destDir",new File(exportDir,"metadata").getAbsolutePath(),"-project",projectNames,"-compress","false","-includeJobs","false","-submodule","true"};
      CubeMetaExtractor cubeMetaExtractor=new CubeMetaExtractor();
      logger.info("CubeMetaExtractor args: " + Arrays.toString(cubeMetaArgs));
      cubeMetaExtractor.execute(cubeMetaArgs);
    }
  }
);
  if (includeJob) {
    executorService.execute(new Runnable(){
      @Override public void run(){
        String[] jobArgs={"-destDir",new File(exportDir,"jobs").getAbsolutePath(),"-compress","false","-submodule","true"};
        JobInstanceExtractor jobInstanceExtractor=new JobInstanceExtractor();
        jobInstanceExtractor.execute(jobArgs);
      }
    }
);
  }
  if (includeHBase) {
    executorService.execute(new Runnable(){
      @Override public void run(){
        String[] hbaseArgs={"-destDir",new File(exportDir,"hbase").getAbsolutePath(),"-project",projectNames,"-compress","false","-submodule","true"};
        HBaseUsageExtractor hBaseUsageExtractor=new HBaseUsageExtractor();
        logger.info("HBaseUsageExtractor args: " + Arrays.toString(hbaseArgs));
        hBaseUsageExtractor.execute(hbaseArgs);
      }
    }
);
  }
  if (includeConf) {
    executorService.execute(new Runnable(){
      @Override public void run(){
        logger.info("Start to extract kylin conf files.");
        try {
          FileUtils.copyDirectoryToDirectory(new File(ToolUtil.getConfFolder()),exportDir);
        }
 catch (        Exception e) {
          logger.warn("Error in export conf.",e);
        }
      }
    }
);
  }
  if (includeClient) {
    executorService.execute(new Runnable(){
      @Override public void run(){
        try {
          String[] clientArgs={"-destDir",new File(exportDir,"client").getAbsolutePath(),"-compress","false","-submodule","true"};
          ClientEnvExtractor clientEnvExtractor=new ClientEnvExtractor();
          logger.info("ClientEnvExtractor args: " + Arrays.toString(clientArgs));
          clientEnvExtractor.execute(clientArgs);
        }
 catch (        IOException e) {
          logger.warn("Error in export client info.",e);
        }
      }
    }
);
  }
  executorService.execute(new Runnable(){
    @Override public void run(){
      String[] logsArgs={"-destDir",new File(exportDir,"logs").getAbsolutePath(),"-compress","false","-submodule","true"};
      KylinLogExtractor logExtractor=new KylinLogExtractor();
      logger.info("KylinLogExtractor args: " + Arrays.toString(logsArgs));
      logExtractor.execute(logsArgs);
    }
  }
);
  executorService.shutdown();
  try {
    executorService.awaitTermination(Long.MAX_VALUE,TimeUnit.MINUTES);
  }
 catch (  InterruptedException e) {
    throw new RuntimeException("Diagnosis info dump interrupted.",e);
  }
}
