{
  final String projectInput=optionsHelper.getOptionValue(options.getOption("project"));
  boolean includeConf=optionsHelper.hasOption(OPTION_INCLUDE_CONF) ? Boolean.valueOf(optionsHelper.getOptionValue(OPTION_INCLUDE_CONF)) : true;
  boolean includeHBase=optionsHelper.hasOption(OPTION_INCLUDE_HBASE) ? Boolean.valueOf(optionsHelper.getOptionValue(OPTION_INCLUDE_HBASE)) : true;
  boolean includeClient=optionsHelper.hasOption(OPTION_INCLUDE_CLIENT) ? Boolean.valueOf(optionsHelper.getOptionValue(OPTION_INCLUDE_CLIENT)) : true;
  boolean includeJob=optionsHelper.hasOption(OPTION_INCLUDE_JOB) ? Boolean.valueOf(optionsHelper.getOptionValue(OPTION_INCLUDE_JOB)) : true;
  String projectNames=StringUtils.join(getProjects(projectInput),",");
  String[] cubeMetaArgs={"-destDir",new File(exportDir,"metadata").getAbsolutePath(),"-project",projectNames,"-compress","false","-includeJobs",Boolean.toString(includeJob),"-submodule","true"};
  CubeMetaExtractor cubeMetaExtractor=new CubeMetaExtractor();
  logger.info("CubeMetaExtractor args: " + Arrays.toString(cubeMetaArgs));
  cubeMetaExtractor.execute(cubeMetaArgs);
  if (includeHBase) {
    String[] hbaseArgs={"-destDir",new File(exportDir,"hbase").getAbsolutePath(),"-project",projectNames,"-compress","false","-submodule","true"};
    HBaseUsageExtractor hBaseUsageExtractor=new HBaseUsageExtractor();
    logger.info("HBaseUsageExtractor args: " + Arrays.toString(hbaseArgs));
    hBaseUsageExtractor.execute(hbaseArgs);
  }
  if (includeConf) {
    logger.info("Start to extract kylin conf files.");
    try {
      FileUtils.copyDirectoryToDirectory(new File(ToolUtil.getConfFolder()),exportDir);
    }
 catch (    Exception e) {
      logger.warn("Error in export conf.",e);
    }
  }
  if (includeClient) {
    String[] clientArgs={"-destDir",new File(exportDir,"client").getAbsolutePath(),"-compress","false","-submodule","true"};
    ClientEnvExtractor clientEnvExtractor=new ClientEnvExtractor();
    logger.info("ClientEnvExtractor args: " + Arrays.toString(clientArgs));
    clientEnvExtractor.execute(clientArgs);
  }
  String[] logsArgs={"-destDir",new File(exportDir,"logs").getAbsolutePath(),"-compress","false","-submodule","true"};
  KylinLogExtractor logExtractor=new KylinLogExtractor();
  logger.info("KylinLogExtractor args: " + Arrays.toString(logsArgs));
  logExtractor.execute(logsArgs);
}
