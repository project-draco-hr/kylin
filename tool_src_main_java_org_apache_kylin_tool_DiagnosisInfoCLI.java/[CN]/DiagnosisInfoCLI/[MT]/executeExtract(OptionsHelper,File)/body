{
  final String project=optionsHelper.getOptionValue(options.getOption("project"));
  boolean includeConf=optionsHelper.hasOption(OPTION_INCLUDE_CONF) ? Boolean.valueOf(optionsHelper.getOptionValue(OPTION_INCLUDE_CONF)) : true;
  boolean includeHBase=optionsHelper.hasOption(OPTION_INCLUDE_HBASE) ? Boolean.valueOf(optionsHelper.getOptionValue(OPTION_INCLUDE_HBASE)) : true;
  boolean includeClient=optionsHelper.hasOption(OPTION_INCLUDE_CLIENT) ? Boolean.valueOf(optionsHelper.getOptionValue(OPTION_INCLUDE_CLIENT)) : true;
  String[] cubeMetaArgs={"-destDir",new File(exportDir,"metadata").getAbsolutePath(),"-project",project,"-compress","false","-quiet","false"};
  CubeMetaExtractor cubeMetaExtractor=new CubeMetaExtractor();
  cubeMetaExtractor.execute(cubeMetaArgs);
  if (includeHBase) {
    String[] hbaseArgs={"-destDir",new File(exportDir,"hbase").getAbsolutePath(),"-project",project,"-compress","false","-quiet","false"};
    HBaseUsageExtractor hBaseUsageExtractor=new HBaseUsageExtractor();
    hBaseUsageExtractor.execute(hbaseArgs);
  }
  if (includeConf) {
    logger.info("Start to extract kylin conf files.");
    try {
      FileUtils.copyDirectoryToDirectory(new File(ToolUtil.getConfFolder()),exportDir);
    }
 catch (    Exception e) {
      logger.warn("Error in export conf.",e);
    }
  }
  if (includeClient) {
    String[] clientArgs={"-destDir",new File(exportDir,"client").getAbsolutePath(),"-compress","false","-quiet","false"};
    ClientEnvExtractor clientEnvExtractor=new ClientEnvExtractor();
    clientEnvExtractor.execute(clientArgs);
  }
  try {
    FileUtils.copyFileToDirectory(new File(KylinConfig.getKylinHome(),"commit_SHA1"),exportDir);
  }
 catch (  Exception e) {
    logger.warn("Error in export commit id.",e);
  }
  try {
    File basicDir=new File(exportDir,"basic");
    FileUtils.forceMkdir(basicDir);
    String output=KylinVersion.getKylinClientInformation();
    FileUtils.writeStringToFile(new File(basicDir,"client"),output + "\n");
    output=ToolUtil.getHBaseMetaStoreId();
    FileUtils.writeStringToFile(new File(basicDir,"client"),output,true);
  }
 catch (  Exception e) {
    logger.warn("Error in export process info.",e);
  }
  String[] logsArgs={"-destDir",new File(exportDir,"logs").getAbsolutePath(),"-compress","false","-quiet","false"};
  KylinLogExtractor logExtractor=new KylinLogExtractor();
  logExtractor.execute(logsArgs);
}
