{
  final String project=optionsHelper.getOptionValue(options.getOption("project"));
  exportDest=optionsHelper.getOptionValue(options.getOption("destDir"));
  if (StringUtils.isEmpty(exportDest)) {
    throw new RuntimeException("destDir is not set, exit directly without extracting");
  }
  if (!exportDest.endsWith("/")) {
    exportDest=exportDest + "/";
  }
  String packageName="diagnosis_" + new SimpleDateFormat("YYYY_MM_dd_HH_mm_ss").format(new Date());
  if (new File(exportDest).exists()) {
    exportDest=exportDest + packageName + "/";
  }
  File exportDir=new File(exportDest);
  String[] cubeMetaArgs={"-destDir",exportDest + "metadata","-project",project};
  cubeMetaExtractor.execute(cubeMetaArgs);
  int logPeriod=optionsHelper.hasOption(OPTION_LOG_PERIOD) ? Integer.valueOf(optionsHelper.getOptionValue(OPTION_LOG_PERIOD)) : DEFAULT_LOG_PERIOD;
  boolean compress=optionsHelper.hasOption(OPTION_COMPRESS) ? Boolean.valueOf(optionsHelper.getOptionValue(OPTION_COMPRESS)) : true;
  boolean includeConf=optionsHelper.hasOption(OPTION_INCLUDE_CONF) ? Boolean.valueOf(optionsHelper.getOptionValue(OPTION_INCLUDE_CONF)) : true;
  boolean includeHBase=optionsHelper.hasOption(OPTION_INCLUDE_HBASE) ? Boolean.valueOf(optionsHelper.getOptionValue(OPTION_INCLUDE_HBASE)) : true;
  if (includeHBase) {
    String[] hbaseArgs={"-destDir",exportDest + "hbase","-project",project};
    hBaseUsageExtractor.execute(hbaseArgs);
  }
  if (logPeriod > 0) {
    logger.info("Start to extract kylin logs in {} days",logPeriod);
    final String logFolder=KylinConfig.getKylinHome() + "/logs/";
    final String defaultLogFilename="kylin.log";
    final File logsDir=new File(exportDir,"logs");
    final SimpleDateFormat format=new SimpleDateFormat("yyyy-MM-dd");
    FileUtils.forceMkdir(logsDir);
    final ArrayList<String> logFileNames=Lists.newArrayListWithCapacity(logPeriod);
    logFileNames.add(defaultLogFilename);
    for (int i=1; i < logPeriod; i++) {
      Calendar todayCal=Calendar.getInstance();
      todayCal.add(Calendar.DAY_OF_MONTH,0 - i);
      logFileNames.add(defaultLogFilename + "." + format.format(todayCal.getTime()));
    }
    for (    String logFilename : logFileNames) {
      File logFile=new File(logFolder + logFilename);
      if (logFile.exists()) {
        FileUtils.copyFileToDirectory(logFile,logsDir);
      }
    }
  }
  if (includeConf) {
    logger.info("Start to extract kylin conf files.");
    try {
      FileUtils.copyDirectoryToDirectory(new File(getConfFolder()),exportDir);
    }
 catch (    Exception e) {
      logger.warn("Error in export conf.",e);
    }
  }
  try {
    FileUtils.copyFileToDirectory(new File(KylinConfig.getKylinHome(),"commit_SHA1"),exportDir);
  }
 catch (  Exception e) {
    logger.warn("Error in export commit id.",e);
  }
  if (compress) {
    File tempZipFile=File.createTempFile("diagnosis_",".zip");
    ZipFileUtils.compressZipFile(exportDir.getAbsolutePath(),tempZipFile.getAbsolutePath());
    FileUtils.cleanDirectory(exportDir);
    File zipFile=new File(exportDir,packageName + ".zip");
    FileUtils.moveFile(tempZipFile,zipFile);
    exportDest=zipFile.getAbsolutePath();
    exportDir=new File(exportDest);
  }
  StringBuffer output=new StringBuffer();
  output.append("\n========================================");
  output.append("\nDiagnosis package locates at: \n" + exportDir.getAbsolutePath());
  output.append("\n========================================");
  logger.info(output.toString());
}
