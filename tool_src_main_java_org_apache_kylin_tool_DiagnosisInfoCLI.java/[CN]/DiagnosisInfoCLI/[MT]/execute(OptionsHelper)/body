{
  final String project=optionsHelper.getOptionValue(options.getOption("project"));
  exportDest=optionsHelper.getOptionValue(options.getOption("destDir"));
  if (StringUtils.isEmpty(exportDest)) {
    throw new RuntimeException("destDir is not set, exit directly without extracting");
  }
  if (!exportDest.endsWith("/")) {
    exportDest=exportDest + "/";
  }
  String packageName="diagnosis_" + new SimpleDateFormat("YYYY_MM_dd_HH_mm_ss").format(new Date());
  if (new File(exportDest).exists()) {
    exportDest=exportDest + packageName + "/";
  }
  File exportDir=new File(exportDest);
  String[] cubeMetaArgs={"-destDir",exportDest + "metadata","-project",project};
  cubeMetaExtractor.execute(cubeMetaArgs);
  int logPeriod=optionsHelper.hasOption(OPTION_LOG_PERIOD) ? Integer.valueOf(optionsHelper.getOptionValue(OPTION_LOG_PERIOD)) : DEFAULT_LOG_PERIOD;
  boolean compress=optionsHelper.hasOption(OPTION_COMPRESS) ? Boolean.valueOf(optionsHelper.getOptionValue(OPTION_COMPRESS)) : true;
  boolean includeConf=optionsHelper.hasOption(OPTION_INCLUDE_CONF) ? Boolean.valueOf(optionsHelper.getOptionValue(OPTION_INCLUDE_CONF)) : true;
  boolean includeHBase=optionsHelper.hasOption(OPTION_INCLUDE_HBASE) ? Boolean.valueOf(optionsHelper.getOptionValue(OPTION_INCLUDE_HBASE)) : true;
  boolean includeLinux=optionsHelper.hasOption(OPTION_INCLUDE_LINUX) ? Boolean.valueOf(optionsHelper.getOptionValue(OPTION_INCLUDE_LINUX)) : true;
  if (includeHBase) {
    String[] hbaseArgs={"-destDir",exportDest + "hbase","-project",project};
    hBaseUsageExtractor.execute(hbaseArgs);
  }
  if (includeConf) {
    logger.info("Start to extract kylin conf files.");
    try {
      FileUtils.copyDirectoryToDirectory(new File(getConfFolder()),exportDir);
    }
 catch (    Exception e) {
      logger.warn("Error in export conf.",e);
    }
  }
  if (includeLinux) {
    File linuxDir=new File(exportDir,"linux");
    FileUtils.forceMkdir(linuxDir);
    File transparentHugepageCompactionDir=new File(linuxDir,"transparent_hugepage");
    FileUtils.forceMkdir(transparentHugepageCompactionDir);
    File vmSwappinessDir=new File(linuxDir,"vm.swappiness");
    FileUtils.forceMkdir(vmSwappinessDir);
    try {
      String transparentHugepageCompactionPath="/sys/kernel/mm/transparent_hugepage/defrag";
      Files.copy(new File(transparentHugepageCompactionPath),new File(transparentHugepageCompactionDir,"defrag"));
    }
 catch (    Exception e) {
      logger.warn("Error in export transparent hugepage compaction status.",e);
    }
    try {
      String vmSwapinessPath="/proc/sys/vm/swappiness";
      Files.copy(new File(vmSwapinessPath),new File(vmSwappinessDir,"swappiness"));
    }
 catch (    Exception e) {
      logger.warn("Error in export vm swapiness.",e);
    }
  }
  try {
    FileUtils.copyFileToDirectory(new File(KylinConfig.getKylinHome(),"commit_SHA1"),exportDir);
  }
 catch (  Exception e) {
    logger.warn("Error in export commit id.",e);
  }
  try {
    File basicDir=new File(exportDir,"basic");
    FileUtils.forceMkdir(basicDir);
    String output=kylinConfig.getCliCommandExecutor().execute("ps -ef|grep kylin").getSecond();
    FileUtils.writeStringToFile(new File(basicDir,"process"),output);
    output=kylinConfig.getCliCommandExecutor().execute("lsb_release -a").getSecond();
    FileUtils.writeStringToFile(new File(basicDir,"lsb_release"),output);
    output=KylinVersion.getKylinClientInformation();
    FileUtils.writeStringToFile(new File(basicDir,"client"),output);
    output=getHBaseMetaStoreId();
    FileUtils.writeStringToFile(new File(basicDir,"client"),output,true);
  }
 catch (  Exception e) {
    logger.warn("Error in export process info.",e);
  }
  if (logPeriod > 0) {
    logger.info("Start to extract kylin logs in {} days",logPeriod);
    final File kylinLogDir=new File(KylinConfig.getKylinHome(),"logs");
    final File exportLogsDir=new File(exportDir,"logs");
    final ArrayList<File> logFiles=Lists.newArrayList();
    final long logThresholdTime=System.currentTimeMillis() - logPeriod * 24 * 3600* 1000;
    FileUtils.forceMkdir(exportLogsDir);
    for (    File logFile : kylinLogDir.listFiles()) {
      if (logFile.lastModified() > logThresholdTime) {
        logFiles.add(logFile);
      }
    }
    for (    File logFile : logFiles) {
      logger.info("Log file:" + logFile.getAbsolutePath());
      if (logFile.exists()) {
        FileUtils.copyFileToDirectory(logFile,exportLogsDir);
      }
    }
  }
  if (compress) {
    File tempZipFile=File.createTempFile("diagnosis_",".zip");
    ZipFileUtils.compressZipFile(exportDir.getAbsolutePath(),tempZipFile.getAbsolutePath());
    FileUtils.cleanDirectory(exportDir);
    File zipFile=new File(exportDir,packageName + ".zip");
    FileUtils.moveFile(tempZipFile,zipFile);
    exportDest=zipFile.getAbsolutePath();
    exportDir=new File(exportDest);
  }
  StringBuffer output=new StringBuffer();
  output.append("\n========================================");
  output.append("\nDiagnosis package locates at: \n" + exportDir.getAbsolutePath());
  output.append("\n========================================");
  logger.info(output.toString());
}
