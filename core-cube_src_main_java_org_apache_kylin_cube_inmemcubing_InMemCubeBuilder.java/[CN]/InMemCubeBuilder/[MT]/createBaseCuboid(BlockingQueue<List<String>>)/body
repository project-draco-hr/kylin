{
  long startTime=System.currentTimeMillis();
  logger.info("Calculating base cuboid " + baseCuboidId);
  GridTable baseCuboid=newGridTableByCuboidID(baseCuboidId);
  GTBuilder baseBuilder=baseCuboid.rebuild();
  IGTScanner baseInput=new InputConverter(baseCuboid.getInfo(),input);
  Pair<ImmutableBitSet,ImmutableBitSet> dimensionMetricsBitSet=InMemCubeBuilderUtils.getDimensionAndMetricColumnBitSet(baseCuboidId,measureCount);
  GTScanRequest req=new GTScanRequest(baseCuboid.getInfo(),null,dimensionMetricsBitSet.getFirst(),dimensionMetricsBitSet.getSecond(),metricsAggrFuncs,null);
  GTAggregateScanner aggregationScanner=new GTAggregateScanner(baseInput,req);
  aggregationScanner.trackMemoryLevel(baseCuboidMemTracker);
  int count=0;
  for (  GTRecord r : aggregationScanner) {
    if (count == 0) {
      baseCuboidMemTracker.markHigh();
    }
    baseBuilder.write(r);
    count++;
  }
  aggregationScanner.close();
  baseBuilder.close();
  long timeSpent=System.currentTimeMillis() - startTime;
  logger.info("Cuboid " + baseCuboidId + " has "+ count+ " rows, build takes "+ timeSpent+ "ms");
  int mbEstimateBaseAggrCache=(int)(aggregationScanner.getEstimateSizeOfAggrCache() / MemoryBudgetController.ONE_MB);
  logger.info("Wild esitmate of base aggr cache is " + mbEstimateBaseAggrCache + " MB");
  return updateCuboidResult(baseCuboidId,baseCuboid,count,timeSpent,0);
}
