{
  GridTable baseCuboid=newGridTableByCuboidID(baseCuboidId);
  GTBuilder baseBuilder=baseCuboid.rebuild();
  IGTScanner baseInput=new InputConverter(baseCuboid.getInfo(),input);
  int mbBefore=getSystemAvailMB();
  int mbAfter=0;
  Pair<ImmutableBitSet,ImmutableBitSet> dimensionMetricsBitSet=getDimensionAndMetricColumnBitSet(baseCuboidId);
  GTScanRequest req=new GTScanRequest(baseCuboid.getInfo(),null,dimensionMetricsBitSet.getFirst(),dimensionMetricsBitSet.getSecond(),metricsAggrFuncs,null);
  GTAggregateScanner aggregationScanner=new GTAggregateScanner(baseInput,req);
  long startTime=System.currentTimeMillis();
  logger.info("Calculating cuboid " + baseCuboidId);
  int count=0;
  for (  GTRecord r : aggregationScanner) {
    if (mbAfter == 0) {
      mbAfter=getSystemAvailMB();
    }
    baseBuilder.write(r);
    count++;
  }
  aggregationScanner.close();
  baseBuilder.close();
  long timeSpent=System.currentTimeMillis() - startTime;
  logger.info("Cuboid " + baseCuboidId + " has "+ count+ " rows, build takes "+ timeSpent+ "ms");
  int mbBaseAggrCacheOnHeap=mbAfter == 0 ? 0 : mbBefore - mbAfter;
  int mbEstimateBaseAggrCache=(int)(aggregationScanner.getEstimateSizeOfAggrCache() / MemoryBudgetController.ONE_MB);
  int mbBaseAggrCache=Math.max((int)(mbBaseAggrCacheOnHeap * 1.1),mbEstimateBaseAggrCache);
  mbBaseAggrCache=Math.max(mbBaseAggrCache,10);
  mbBaseAggrCache=Math.min(mbBaseAggrCache,mbBaseAggrCacheOnHeap * 2);
  logger.info("Base aggr cache is " + mbBaseAggrCache + " MB (heap "+ mbBaseAggrCacheOnHeap+ " MB, estimate "+ mbEstimateBaseAggrCache+ " MB)");
  return updateCuboidResult(baseCuboidId,baseCuboid,count,timeSpent,mbBaseAggrCache);
}
