{
  return new Iterator<GTRecord>(){
    Iterator<Entry<GTRecord,MeasureAggregator[]>> it=aggBufMap.entrySet().iterator();
    ByteBuffer metricsBuf=ByteBuffer.allocate(info.maxRecordLength);
    GTRecord oneRecord=new GTRecord(info);
    @Override public boolean hasNext(){
      return it.hasNext();
    }
    @Override public GTRecord next(){
      Entry<GTRecord,MeasureAggregator[]> entry=it.next();
      GTRecord dims=entry.getKey();
      for (int i=dimensions.nextSetBit(0); i >= 0; i=dimensions.nextSetBit(i + 1)) {
        oneRecord.cols[i].set(dims.cols[i]);
      }
      metricsBuf.clear();
      MeasureAggregator[] aggrs=entry.getValue();
      for (int i=0, col=-1; i < aggrs.length; i++) {
        col=metrics.nextSetBit(col + 1);
        int pos=metricsBuf.position();
        info.codeSystem.encodeColumnValue(col,aggrs[i].getState(),metricsBuf);
        oneRecord.cols[col].set(metricsBuf.array(),pos,metricsBuf.position() - pos);
      }
      return oneRecord;
    }
    @Override public void remove(){
      throw new UnsupportedOperationException();
    }
  }
;
}
