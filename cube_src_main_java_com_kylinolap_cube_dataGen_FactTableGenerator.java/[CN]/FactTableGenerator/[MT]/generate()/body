{
  HashMap<String,String> factTableCol2LookupCol=new HashMap<String,String>();
  HashSet<String> usedCols=new HashSet<String>();
  HashMap<String,String> lookupCol2factTableCol=new HashMap<String,String>();
  List<DimensionDesc> dimensions=getSortedDimentsionDescs();
  for (  DimensionDesc dim : dimensions) {
    JoinDesc jDesc=dim.getJoin();
    if (jDesc != null) {
      String[] fks=jDesc.getForeignKey();
      String[] pks=jDesc.getPrimaryKey();
      int num=fks.length;
      for (int i=0; i < num; ++i) {
        String value=dim.getTable() + "/" + pks[i];
        lookupCol2factTableCol.put(value,fks[i]);
        if (factTableCol2LookupCol.containsKey(fks[i])) {
          if (!factTableCol2LookupCol.get(fks[i]).equals(value)) {
            System.out.println("Warning: Disambiguation on the mapping of column " + fks[i] + ", "+ factTableCol2LookupCol.get(fks[i])+ "(chosen) or "+ value);
            continue;
          }
        }
        factTableCol2LookupCol.put(fks[i],value);
      }
    }
  }
  for (  DimensionDesc dim : dimensions) {
    JoinDesc jDesc=dim.getJoin();
    if (jDesc == null) {
      for (      String aColumn : dim.getColumn()) {
        if (!factTableCol2LookupCol.containsKey(aColumn))         usedCols.add(aColumn);
      }
    }
  }
  for (  MeasureDesc mDesc : desc.getMeasures()) {
    List<TblColRef> pcols=mDesc.getFunction().getParameter().getColRefs();
    if (pcols != null) {
      for (      TblColRef col : pcols) {
        if (!factTableCol2LookupCol.containsKey(col.getName()))         usedCols.add(col.getName());
      }
    }
  }
  return createTable(this.rowCount,factTableCol2LookupCol,lookupCol2factTableCol,usedCols);
}
