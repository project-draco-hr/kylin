{
  implementor.visitChild(this,getChild());
  this.rewriting=true;
  if (!RewriteImplementor.needRewrite(this.context) || (this.hasJoin && !this.afterJoin) || this.afterAggregate) {
    this.columnRowType=this.buildColumnRowType();
    return;
  }
  int paramIndex=this.rowType.getFieldList().size();
  List<RelDataTypeField> newFieldList=new LinkedList<RelDataTypeField>();
  List<RexNode> newExpList=new LinkedList<RexNode>();
  ColumnRowType inputColumnRowType=((OLAPRel)getChild()).getColumnRowType();
  for (  Map.Entry<String,RelDataType> rewriteField : this.context.rewriteFields.entrySet()) {
    String rewriteFieldName=rewriteField.getKey();
    int rowIndex=this.columnRowType.getIndexByName(rewriteFieldName);
    if (rowIndex < 0) {
      int inputIndex=inputColumnRowType.getIndexByName(rewriteFieldName);
      if (inputIndex >= 0) {
        RelDataType fieldType=rewriteField.getValue();
        RelDataTypeField newField=new RelDataTypeFieldImpl(rewriteFieldName,paramIndex++,fieldType);
        newFieldList.add(newField);
        RelDataTypeField inputField=getChild().getRowType().getFieldList().get(inputIndex);
        RexInputRef newFieldRef=new RexInputRef(inputField.getIndex(),inputField.getType());
        newExpList.add(newFieldRef);
      }
    }
  }
  if (!newFieldList.isEmpty()) {
    List<RexNode> newProjects=new ArrayList<RexNode>(this.rewriteProjects);
    newProjects.addAll(newExpList);
    this.rewriteProjects=newProjects;
    ClassUtil.updateFinalField(ProjectRelBase.class,"exps",this,ImmutableList.copyOf(this.rewriteProjects));
    FieldInfoBuilder fieldInfo=getCluster().getTypeFactory().builder();
    fieldInfo.addAll(this.rowType.getFieldList());
    fieldInfo.addAll(newFieldList);
    this.rowType=getCluster().getTypeFactory().createStructType(fieldInfo);
  }
  this.columnRowType=this.buildColumnRowType();
  this.rewriting=false;
}
