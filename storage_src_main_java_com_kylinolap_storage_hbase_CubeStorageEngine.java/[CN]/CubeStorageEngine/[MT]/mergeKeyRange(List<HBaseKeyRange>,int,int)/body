{
  HBaseKeyRange keyRange=keyRanges.get(from);
  int mergeSize=to - from + 1;
  if (mergeSize > 1) {
    CubeSegment cubeSegment=keyRange.getCubeSegment();
    Cuboid cuboid=keyRange.getCuboid();
    byte[] startKey=keyRange.getStartKey();
    byte[] stopKey=keyRange.getStopKey();
    long partitionColumnStartDate=Long.MAX_VALUE;
    long partitionColumnEndDate=0;
    List<Pair<byte[],byte[]>> newFuzzyKeys=new ArrayList<Pair<byte[],byte[]>>(mergeSize);
    List<Collection<ColumnValueRange>> newFlatOrAndFilter=Lists.newLinkedList();
    for (int k=from; k <= to; k++) {
      HBaseKeyRange nextRange=keyRanges.get(k);
      newFuzzyKeys.addAll(nextRange.getFuzzyKeys());
      newFlatOrAndFilter.addAll(nextRange.getFlatOrAndFilter());
      if (Bytes.compareTo(stopKey,nextRange.getStopKey()) < 0) {
        stopKey=nextRange.getStopKey();
      }
      if (nextRange.getPartitionColumnStartDate() > 0 && nextRange.getPartitionColumnStartDate() < partitionColumnStartDate) {
        partitionColumnStartDate=nextRange.getPartitionColumnStartDate();
      }
      if (nextRange.getPartitionColumnEndDate() < Long.MAX_VALUE && nextRange.getPartitionColumnEndDate() > partitionColumnEndDate) {
        partitionColumnEndDate=nextRange.getPartitionColumnEndDate();
      }
    }
    partitionColumnStartDate=(partitionColumnStartDate == Long.MAX_VALUE) ? 0 : partitionColumnStartDate;
    partitionColumnEndDate=(partitionColumnEndDate == 0) ? Long.MAX_VALUE : partitionColumnEndDate;
    keyRange=new HBaseKeyRange(cubeSegment,cuboid,startKey,stopKey,newFuzzyKeys,newFlatOrAndFilter,partitionColumnStartDate,partitionColumnEndDate);
  }
  return keyRange;
}
