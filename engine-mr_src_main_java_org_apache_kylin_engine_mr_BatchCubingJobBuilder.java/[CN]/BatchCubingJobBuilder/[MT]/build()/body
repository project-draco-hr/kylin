{
  logger.info("MR_V1 new job to BUILD segment " + seg);
  final CubingJob result=CubingJob.createBuildJob((CubeSegment)seg,submitter,config);
  final String jobId=result.getId();
  final String cuboidRootPath=getCuboidRootPath(jobId);
  inputSide.addStepPhase1_CreateFlatTable(result);
  result.addTask(createFactDistinctColumnsStep(jobId));
  result.addTask(createBuildDictionaryStep(jobId));
  RowKeyDesc rowKeyDesc=((CubeSegment)seg).getCubeDesc().getRowkey();
  final int groupRowkeyColumnsCount=((CubeSegment)seg).getCubeDesc().getBuildLevel();
  final int totalRowkeyColumnsCount=rowKeyDesc.getRowKeyColumns().length;
  final String[] cuboidOutputTempPath=getCuboidOutputPaths(cuboidRootPath,totalRowkeyColumnsCount,groupRowkeyColumnsCount);
  result.addTask(createBaseCuboidStep(cuboidOutputTempPath,jobId));
  for (int i=1; i <= groupRowkeyColumnsCount; i++) {
    int dimNum=totalRowkeyColumnsCount - i;
    result.addTask(createNDimensionCuboidStep(cuboidOutputTempPath,dimNum,totalRowkeyColumnsCount));
  }
  outputSide.addStepPhase3_BuildCube(result,cuboidRootPath);
  result.addTask(createUpdateCubeInfoAfterBuildStep(jobId));
  inputSide.addStepPhase4_Cleanup(result);
  outputSide.addStepPhase4_Cleanup(result);
  return result;
}
