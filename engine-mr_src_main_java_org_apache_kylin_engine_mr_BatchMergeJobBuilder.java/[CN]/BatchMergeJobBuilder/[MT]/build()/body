{
  final CubingJob result=CubingJob.createMergeJob(seg,submitter,config);
  final String jobId=result.getId();
  final String cuboidRootPath=getCuboidRootPath(jobId);
  final List<CubeSegment> mergingSegments=seg.getCubeInstance().getMergingSegments(seg);
  Preconditions.checkState(mergingSegments.size() > 1,"there should be more than 2 segments to merge");
  final List<String> mergingSegmentIds=Lists.newArrayList();
  final List<String> mergingCuboidPaths=Lists.newArrayList();
  for (  CubeSegment merging : mergingSegments) {
    mergingSegmentIds.add(merging.getUuid());
    mergingCuboidPaths.add(getCuboidRootPath(merging) + "*");
  }
  result.addTask(createMergeDictionaryStep(mergingSegmentIds));
  String formattedPath=StringUtil.join(mergingCuboidPaths,",");
  result.addTask(createMergeCuboidDataStep(seg,formattedPath,cuboidRootPath));
  outputSide.addStepPhase2_BuildCube(result,cuboidRootPath);
  result.addTask(createUpdateCubeInfoAfterMergeStep(mergingSegmentIds,jobId));
  outputSide.addStepPhase3_Cleanup(result);
  return result;
}
