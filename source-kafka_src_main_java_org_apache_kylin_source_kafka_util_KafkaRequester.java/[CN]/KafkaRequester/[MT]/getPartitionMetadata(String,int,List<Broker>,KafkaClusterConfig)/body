{
  logger.debug("Brokers: " + brokers.toString());
  SimpleConsumer consumer;
  for (  Broker broker : brokers) {
    consumer=getSimpleConsumer(broker,kafkaClusterConfig.getTimeout(),kafkaClusterConfig.getBufferSize(),"topic_meta_lookup");
    List<String> topics=Collections.singletonList(topic);
    TopicMetadataRequest req=new TopicMetadataRequest(topics);
    TopicMetadataResponse resp;
    try {
      resp=consumer.send(req);
    }
 catch (    Exception e) {
      logger.warn("cannot send TopicMetadataRequest successfully: " + e);
      continue;
    }
    final List<TopicMetadata> topicMetadatas=resp.topicsMetadata();
    if (topicMetadatas.size() != 1) {
      logger.warn("invalid topicMetadata size:" + topicMetadatas.size());
      break;
    }
    final TopicMetadata topicMetadata=topicMetadatas.get(0);
    if (topicMetadata.errorCode() != 0) {
      logger.warn("fetching topicMetadata with errorCode:" + topicMetadata.errorCode());
      break;
    }
    for (    PartitionMetadata partitionMetadata : topicMetadata.partitionsMetadata()) {
      StringBuffer logText=new StringBuffer();
      logText.append("PartitionMetadata debug errorCode: " + partitionMetadata.errorCode());
      logText.append("PartitionMetadata debug partitionId: " + partitionMetadata.partitionId());
      logText.append("PartitionMetadata debug leader: " + partitionMetadata.leader());
      logText.append("PartitionMetadata debug ISR: " + partitionMetadata.isr());
      logText.append("PartitionMetadata debug replica: " + partitionMetadata.replicas());
      logger.info(logText.toString());
      if (partitionMetadata.partitionId() == partitionId) {
        return partitionMetadata;
      }
    }
  }
  logger.debug("cannot find PartitionMetadata, topic:" + topic + " partitionId:"+ partitionId);
  return null;
}
