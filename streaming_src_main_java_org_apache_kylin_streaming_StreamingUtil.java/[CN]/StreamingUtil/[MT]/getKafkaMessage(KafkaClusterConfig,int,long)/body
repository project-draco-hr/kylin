{
  final String topic=kafkaClusterConfig.getTopic();
  int retry=0;
  while (retry++ < 4) {
    final Broker leadBroker=getLeadBroker(kafkaClusterConfig,partitionId);
    if (leadBroker == null) {
      logger.warn("unable to find leadBroker with config:" + kafkaClusterConfig + " partitionId:"+ partitionId);
      continue;
    }
    final FetchResponse response=KafkaRequester.fetchResponse(topic,partitionId,offset,leadBroker,kafkaClusterConfig);
    if (response.errorCode(topic,partitionId) != 0) {
      logger.warn("errorCode of FetchResponse is:" + response.errorCode(topic,partitionId));
      continue;
    }
    final Iterator<MessageAndOffset> iterator=response.messageSet(topic,partitionId).iterator();
    if (iterator.hasNext()) {
      return iterator.next();
    }
 else {
      try {
        Thread.sleep((long)(Math.pow(2,retry) * 1000));
      }
 catch (      InterruptedException e) {
        throw new RuntimeException(e);
      }
      continue;
    }
  }
  throw new IllegalStateException(String.format("try to get timestamp of topic: %s, partitionId: %d, offset: %d, failed to get StreamMessage from kafka",topic,partitionId,offset));
}
