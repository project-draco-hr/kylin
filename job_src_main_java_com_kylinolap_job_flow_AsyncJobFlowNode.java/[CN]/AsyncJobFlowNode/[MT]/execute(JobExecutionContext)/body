{
  this.currentJobDetail=context.getJobDetail();
  JobDataMap data=this.currentJobDetail.getJobDataMap();
  JobFlow jobFlow=(JobFlow)data.get(JobConstants.PROP_JOB_FLOW);
  JobEngineConfig engineConfig=jobFlow.getJobengineConfig();
  KylinConfig config=engineConfig.getConfig();
  String jobInstanceID=data.getString(JobConstants.PROP_JOBINSTANCE_UUID);
  int jobStepID=data.getInt(JobConstants.PROP_JOBSTEP_SEQ_ID);
  ICommandOutput output=(ICommandOutput)data.get(JobConstants.PROP_JOB_CMD_OUTPUT);
  try {
    if (data.getBoolean(JobConstants.PROP_JOB_KILLED)) {
      log.info(this.currentJobDetail.getKey() + " is killed");
      return;
    }
    if (output == null) {
      JobInstance jobInstance=updateJobStep(jobInstanceID,jobStepID,config,JobStepStatusEnum.RUNNING,System.currentTimeMillis(),null,null);
      String command=data.getString(JobConstants.PROP_COMMAND);
      jobCmd=JobCommandFactory.getJobCommand(command,jobInstance,jobStepID,engineConfig);
      output=jobCmd.execute();
      data.put(JobConstants.PROP_JOB_CMD_OUTPUT,output);
      data.put(JobConstants.PROP_JOB_CMD_EXECUTOR,jobCmd);
      context.getScheduler().addJob(this.currentJobDetail,true,true);
      JobStepStatusEnum stepStatus=output.getStatus();
      updateJobStep(jobInstanceID,jobStepID,config,stepStatus,null,stepStatus.isComplete() ? System.currentTimeMillis() : null,output.getOutput());
      context.setResult(output.getExitCode());
      scheduleStatusChecker(context);
      log.debug("Start async job " + currentJobDetail.getKey());
    }
 else {
      JobInstance jobInstance=JobDAO.getInstance(engineConfig.getConfig()).getJob(jobInstanceID);
      JobStep jobStep=jobInstance.getSteps().get(jobStepID);
      log.debug("Start to check hadoop job status of " + currentJobDetail.getKey());
      JobStepStatusEnum stepStatus=output.getStatus();
      if ((System.currentTimeMillis() - jobStep.getExecStartTime()) / 1000 >= engineConfig.getJobStepTimeout()) {
        throw new JobException("Job step " + jobStep.getName() + " timeout.");
      }
      updateJobStep(jobInstance.getUuid(),jobStepID,config,stepStatus,null,stepStatus.isComplete() ? System.currentTimeMillis() : null,output.getOutput());
      if (!stepStatus.isComplete()) {
        scheduleStatusChecker(context);
      }
      context.setResult(0);
      log.debug("Status of async job " + currentJobDetail.getKey() + ":"+ stepStatus);
    }
  }
 catch (  Throwable t) {
    handleException(jobInstanceID,jobStepID,config,t);
  }
}
