{
  Configuration conf=context.getConfiguration();
  String brokers=conf.get(KafkaFlatTableJob.CONFIG_KAFKA_BROKERS);
  String inputTopic=conf.get(KafkaFlatTableJob.CONFIG_KAFKA_TOPIC);
  String consumerGroup=conf.get(KafkaFlatTableJob.CONFIG_KAFKA_CONSUMER_GROUP);
  Integer partitionMin=Integer.valueOf(conf.get(KafkaFlatTableJob.CONFIG_KAFKA_PARITION_MIN));
  Integer partitionMax=Integer.valueOf(conf.get(KafkaFlatTableJob.CONFIG_KAFKA_PARITION_MAX));
  Map<Integer,Long> startOffsetMap=Maps.newHashMap();
  Map<Integer,Long> endOffsetMap=Maps.newHashMap();
  for (int i=partitionMin; i <= partitionMax; i++) {
    String start=conf.get(KafkaFlatTableJob.CONFIG_KAFKA_PARITION_START + i);
    String end=conf.get(KafkaFlatTableJob.CONFIG_KAFKA_PARITION_END + i);
    if (start != null && end != null) {
      startOffsetMap.put(i,Long.valueOf(start));
      endOffsetMap.put(i,Long.valueOf(end));
    }
  }
  List<InputSplit> splits=new ArrayList<InputSplit>();
  try (KafkaConsumer<String,String> consumer=KafkaClient.getKafkaConsumer(brokers,consumerGroup,null)){
    List<PartitionInfo> partitionInfos=consumer.partitionsFor(inputTopic);
    Preconditions.checkArgument(partitionInfos.size() == startOffsetMap.size(),"partition number mismatch with server side");
    for (int i=0; i < partitionInfos.size(); i++) {
      PartitionInfo partition=partitionInfos.get(i);
      int partitionId=partition.partition();
      if (startOffsetMap.containsKey(partitionId) == false) {
        throw new IllegalStateException("Partition '" + partitionId + "' not exists.");
      }
      if (endOffsetMap.get(partitionId) > startOffsetMap.get(partitionId)) {
        InputSplit split=new KafkaInputSplit(brokers,inputTopic,partitionId,startOffsetMap.get(partitionId),endOffsetMap.get(partitionId));
        splits.add(split);
      }
    }
  }
   return splits;
}
