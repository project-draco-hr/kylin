{
  ResourceStore store=getStore();
  List<String> paths=store.collectResourceRecursively(ResourceStore.PROJECT_RESOURCE_ROOT,".json");
  logger.debug("Loading Project from folder " + store.getReadableResourcePath(ResourceStore.PROJECT_RESOURCE_ROOT));
  for (  String path : paths) {
    path=ProjectInstance.concatResourcePath(path);
    try {
      store.getResource(path,ProjectInstance.class,ProjectManager.PROJECT_SERIALIZER);
    }
 catch (    IOException e) {
      logger.debug("Get exception when load Project on " + path + ", going to do Project upgrade...");
      com.kylinolap.cube.model.v1.ProjectInstance oldPrj=store.getResource(path,com.kylinolap.cube.model.v1.ProjectInstance.class,new JsonSerializer<com.kylinolap.cube.model.v1.ProjectInstance>(com.kylinolap.cube.model.v1.ProjectInstance.class));
      ProjectInstance newPrj=new ProjectInstance();
      newPrj.setUuid(oldPrj.getUuid());
      newPrj.setName(oldPrj.getName());
      newPrj.setOwner(oldPrj.getOwner());
      newPrj.setDescription(oldPrj.getDescription());
      newPrj.setLastModified(oldPrj.getLastModified());
      newPrj.setLastUpdateTime(oldPrj.getLastUpdateTime());
      newPrj.setCreateTime(oldPrj.getCreateTime());
      newPrj.setStatus(oldPrj.getStatus());
      List<RealizationEntry> realizationEntries=Lists.newArrayList();
      for (      String cube : oldPrj.getCubes()) {
        RealizationEntry entry=new RealizationEntry();
        entry.setType(RealizationType.CUBE);
        entry.setRealization(cube);
        realizationEntries.add(entry);
      }
      newPrj.setRealizationEntries(realizationEntries);
      Set<String> tables=Sets.newHashSet();
      for (      String table : oldPrj.getTables()) {
        tables.add(this.appendDBName(table));
      }
      newPrj.setTables(tables);
      store.putResource(newPrj.getResourcePath(),newPrj,ProjectManager.PROJECT_SERIALIZER);
    }
  }
}
