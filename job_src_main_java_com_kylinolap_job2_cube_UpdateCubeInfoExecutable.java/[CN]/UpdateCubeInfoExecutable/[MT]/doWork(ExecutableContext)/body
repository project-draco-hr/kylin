{
  final CubeInstance cube=cubeManager.getCube(getCubeName());
  final CubeSegment segment=cube.getSegmentById(getSegmentId());
  String sourceRecordsSize=jobService.getJobInfo(getCreateFlatTableStepId()).get(ExecutableConstants.SOURCE_RECORDS_SIZE);
  Preconditions.checkState(sourceRecordsSize != null && sourceRecordsSize.equals(""),"Can't get cube source record size.");
  long sourceSize=Long.parseLong(sourceRecordsSize);
  String sourceRecordsCount=jobService.getJobInfo(getBaseCuboidStepId()).get(ExecutableConstants.SOURCE_RECORDS_COUNT);
  Preconditions.checkState(sourceRecordsCount != null && sourceRecordsCount.equals(""),"Can't get cube source record count.");
  long sourceCount=Long.parseLong(sourceRecordsCount);
  String cubeSizeString=jobService.getJobInfo(getConvertToHfileStepId()).get(ExecutableConstants.HDFS_BYTES_WRITTEN);
  Preconditions.checkState(cubeSizeString != null && cubeSizeString.equals(""),"Can't get cube segment size.");
  long size=Long.parseLong(cubeSizeString) / 1024;
  segment.setLastBuildJobID(getId());
  segment.setLastBuildTime(System.currentTimeMillis());
  segment.setSizeKB(size);
  segment.setSourceRecords(sourceCount);
  segment.setSourceRecordsSize(sourceSize);
  segment.setStatus(SegmentStatusEnum.READY);
  cube.setStatus(RealizationStatusEnum.READY);
  try {
    cubeManager.updateCube(cube);
    return new ExecuteResult(ExecuteResult.State.SUCCEED,"succeed");
  }
 catch (  IOException e) {
    return new ExecuteResult(ExecuteResult.State.ERROR,e.getLocalizedMessage());
  }
}
