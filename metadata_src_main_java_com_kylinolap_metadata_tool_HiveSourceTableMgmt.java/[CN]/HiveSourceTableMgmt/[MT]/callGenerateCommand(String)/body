{
  String tempDir=System.getProperty("java.io.tmpdir");
  logger.info("OS current temporary directory is " + tempDir);
  if (StringUtils.isEmpty(tempDir)) {
    tempDir="/tmp";
  }
  String[] cmd=new String[2];
  String osName=System.getProperty("os.name");
  if (osName.startsWith("Windows")) {
    cmd[0]="cmd.exe";
    cmd[1]="/C";
  }
 else {
    cmd[0]="/bin/bash";
    cmd[1]="-c";
  }
  String hiveOutputPath=File.createTempFile("HiveOutput",null).getAbsolutePath();
  File dir=File.createTempFile("meta",null);
  dir.delete();
  dir.mkdir();
  String tableMetaOutcomeDir=dir.getAbsolutePath();
  ProcessBuilder pb=null;
  if (osName.startsWith("Windows")) {
    SSHClient client=new SSHClient("sandbox","root","hadoop",null);
    SSHClientOutput output=null;
    try {
      output=client.execCommand("hive -e \"" + hiveCommd + "\"");
    }
 catch (    Exception e) {
      logger.error("Failed to execute hive cmd",e);
      e.printStackTrace();
    }
    FileWriter fw=null;
    try {
      fw=new FileWriter(hiveOutputPath);
      fw.write(output.getText());
    }
 catch (    Exception ex) {
      ex.printStackTrace();
    }
 finally {
      if (fw != null) {
        fw.close();
        fw=null;
      }
    }
  }
 else {
    pb=new ProcessBuilder(cmd[0],cmd[1],"hive -e \"" + hiveCommd + "\" > "+ hiveOutputPath);
    pb.directory(new File(tempDir));
    pb.redirectErrorStream(true);
    Process p=pb.start();
    InputStream is=p.getInputStream();
    InputStreamReader isr=new InputStreamReader(is);
    BufferedReader br=null;
    try {
      br=new BufferedReader(isr);
      String line=null;
      logger.info("Execute : " + pb.command().get(0));
      while ((line=br.readLine()) != null) {
        logger.info(line);
      }
    }
  finally {
      if (null != br) {
        br.close();
      }
    }
  }
  logger.info("Hive execution completed!");
  HiveSourceTableMgmt rssMgmt=new HiveSourceTableMgmt();
  rssMgmt.extractTableDescFromFile(hiveOutputPath,tableMetaOutcomeDir);
  return tableMetaOutcomeDir;
}
