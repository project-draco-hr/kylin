{
  CubeJoinedFlatTableDesc flatTableDesc=new CubeJoinedFlatTableDesc(cube.getDescriptor(),null);
  int nColumns=flatTableDesc.getColumnList().size();
  @SuppressWarnings("unchecked") Set<String>[] distinctSets=new Set[nColumns];
  for (int i=0; i < nColumns; i++)   distinctSets[i]=new TreeSet<String>();
  FileTableReader reader=new FileTableReader(flatTable,nColumns);
  while (count > 0 && reader.next()) {
    String[] row=reader.getRow();
    for (int i=0; i < nColumns; i++)     distinctSets[i].add(row[i]);
  }
  reader.close();
  List<String[]> distincts=new ArrayList<String[]>();
  for (int i=0; i < nColumns; i++) {
    distincts.add((String[])distinctSets[i].toArray(new String[distinctSets[i].size()]));
  }
  Random rand=new Random();
  for (; count > 0; count--) {
    ArrayList<String> row=new ArrayList<String>(nColumns);
    for (int i=0; i < nColumns; i++) {
      String[] candidates=distincts.get(i);
      row.add(candidates[rand.nextInt(candidates.length)]);
    }
    queue.put(row);
  }
  queue.put(new ArrayList<String>(0));
}
