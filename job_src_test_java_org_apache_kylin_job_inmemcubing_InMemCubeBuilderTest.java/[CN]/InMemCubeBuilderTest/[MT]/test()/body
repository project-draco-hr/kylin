{
  InMemCubeBuilder cubeBuilder=new InMemCubeBuilder(cube.getDescriptor(),dictionaryMap);
  cubeBuilder.setOutputOrder(true);
  cubeBuilder.setConcurrentThreads(THREADS);
  ArrayBlockingQueue<List<String>> queue=new ArrayBlockingQueue<List<String>>(1000);
  ExecutorService executorService=Executors.newSingleThreadExecutor();
  try {
{
      Future<?> future=executorService.submit(cubeBuilder.buildAsRunnable(queue,new ConsoleGTRecordWriter()));
      feedData(cube,flatTable,queue,INPUT_ROWS);
      future.get();
    }
{
      Future<?> future=executorService.submit(cubeBuilder.buildAsRunnable(queue,new ConsoleGTRecordWriter()));
      feedData(cube,flatTable,queue,0);
      future.get();
    }
{
      Future<?> future=executorService.submit(cubeBuilder.buildAsRunnable(queue,new ConsoleGTRecordWriter()));
      feedData(cube,flatTable,queue,INPUT_ROWS);
      future.get();
    }
  }
 catch (  Exception e) {
    logger.error("stream build failed",e);
    throw new IOException("Failed to build cube ",e);
  }
}
