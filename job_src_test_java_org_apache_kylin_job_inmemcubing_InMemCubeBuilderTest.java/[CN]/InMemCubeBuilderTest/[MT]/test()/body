{
  final int inputRows=70000;
  final int threads=4;
  System.out.println("Hit enter to start");
  System.in.read();
  final CubeInstance cube=cubeManager.getCube("test_kylin_cube_without_slr_left_join_empty");
  final String flatTable="../examples/test_case_data/localmeta/data/flatten_data_for_without_slr_left_join.csv";
  Map<TblColRef,Dictionary<?>> dictionaryMap=getDictionaryMap(cube,flatTable);
  ArrayBlockingQueue<List<String>> queue=new ArrayBlockingQueue<List<String>>(1000);
  InMemCubeBuilder cubeBuilder=new InMemCubeBuilder(queue,cube.getDescriptor(),dictionaryMap,new ConsoleGTRecordWriter());
  cubeBuilder.setConcurrentThreads(threads);
  ExecutorService executorService=Executors.newSingleThreadExecutor();
  Future<?> future=executorService.submit(cubeBuilder);
  feedData(cube,flatTable,queue,inputRows);
  try {
    future.get();
  }
 catch (  Exception e) {
    logger.error("stream build failed",e);
    throw new IOException("Failed to build cube ",e);
  }
}
