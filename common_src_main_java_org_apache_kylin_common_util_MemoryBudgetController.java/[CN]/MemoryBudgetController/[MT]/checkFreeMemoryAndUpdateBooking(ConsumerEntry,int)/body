{
  while (true) {
    while (delta > totalBudgetMB - totalReservedMB.get()) {
      int freeUpToGo=delta;
      for (      ConsumerEntry entry : booking.values()) {
        int mb=entry.consumer.freeUp(freeUpToGo);
        updateBooking(entry,-mb);
        freeUpToGo-=mb;
        if (freeUpToGo <= 0)         break;
      }
      if (freeUpToGo > 0)       throw new NotEnoughBudgetException();
    }
    if (checkSystemAvailMB(delta))     break;
    try {
synchronized (this) {
        logger.debug("Remaining budget is " + getRemainingBudgetMB() + " MB free, but system only has "+ getSystemAvailMB()+ " MB free. If this persists, some memory calculation must be wrong.");
        this.wait(200);
      }
    }
 catch (    InterruptedException e) {
      logger.error("Interrupted while wait free memory",e);
    }
  }
  updateBooking(consumer,delta);
}
