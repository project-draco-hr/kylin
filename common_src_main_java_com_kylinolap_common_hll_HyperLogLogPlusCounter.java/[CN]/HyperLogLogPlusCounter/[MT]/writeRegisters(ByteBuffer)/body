{
  int startPos=out.position();
  final int indexLen=getRegisterIndexSize();
  int size=size();
  byte scheme;
  if ((indexLen + 1) * size < m)   scheme=0;
 else   scheme=1;
  out.put(scheme);
  if (scheme == 0) {
    BytesUtil.writeVInt(size,out);
    for (int i=0; i < m; i++) {
      if (registers[i] > 0) {
        BytesUtil.writeUnsigned(i,indexLen,out);
        out.put(registers[i]);
      }
    }
  }
 else {
    for (int i=0; i < m; i++) {
      out.put(registers[i]);
    }
  }
  int len=out.position() - startPos;
  if (len < COMPRESSION_THRESHOLD)   return;
  scheme|=COMPRESSION_FLAG;
  byte[] compressed=DEFAULT_COMPRESSOR.compress(out,startPos + 1,len - 1);
  out.position(startPos);
  out.put(scheme);
  BytesUtil.writeVInt(compressed.length,out);
  out.put(compressed);
}
