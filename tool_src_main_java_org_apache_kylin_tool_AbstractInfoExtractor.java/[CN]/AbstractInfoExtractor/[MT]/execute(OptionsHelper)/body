{
  String exportDest=optionsHelper.getOptionValue(options.getOption("destDir"));
  boolean shouldCompress=optionsHelper.hasOption(OPTION_COMPRESS) ? Boolean.valueOf(optionsHelper.getOptionValue(OPTION_COMPRESS)) : true;
  boolean isSubmodule=optionsHelper.hasOption(OPTION_SUBMODULE) ? Boolean.valueOf(optionsHelper.getOptionValue(OPTION_SUBMODULE)) : false;
  if (StringUtils.isEmpty(exportDest)) {
    throw new RuntimeException("destDir is not set, exit directly without extracting");
  }
  if (!exportDest.endsWith("/")) {
    exportDest=exportDest + "/";
  }
  String packageName=packageType.toLowerCase() + "_" + new SimpleDateFormat("YYYY_MM_dd_HH_mm_ss").format(new Date());
  if (!isSubmodule && new File(exportDest).exists()) {
    exportDest=exportDest + packageName + "/";
  }
  exportDir=new File(exportDest);
  if (!isSubmodule) {
    dumpBasicDiagInfo();
  }
  executeExtract(optionsHelper,exportDir);
  if (shouldCompress) {
    File tempZipFile=File.createTempFile(packageType + "_",".zip");
    ZipFileUtils.compressZipFile(exportDir.getAbsolutePath(),tempZipFile.getAbsolutePath());
    FileUtils.cleanDirectory(exportDir);
    File zipFile=new File(exportDir,packageName + ".zip");
    FileUtils.moveFile(tempZipFile,zipFile);
    exportDest=zipFile.getAbsolutePath();
    exportDir=new File(exportDest);
  }
  if (!isSubmodule) {
    StringBuffer output=new StringBuffer();
    output.append("\n========================================");
    output.append("\nDump " + packageType + " package locates at: \n"+ exportDir.getAbsolutePath());
    output.append("\n========================================");
    logger.info(output.toString());
  }
}
