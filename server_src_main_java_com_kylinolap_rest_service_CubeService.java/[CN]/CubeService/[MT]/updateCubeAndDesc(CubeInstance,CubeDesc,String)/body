{
  List<JobInstance> jobInstances=this.getJobManager().listJobs(cube.getName(),null);
  for (  JobInstance jobInstance : jobInstances) {
    if (jobInstance.getStatus() == JobStatusEnum.PENDING || jobInstance.getStatus() == JobStatusEnum.RUNNING) {
      throw new JobException("Cube schema shouldn't be changed with running job.");
    }
  }
  if (!cube.getDescriptor().calculateSignature().equals(cube.getDescriptor().getSignature())) {
    this.releaseAllSegments(cube);
  }
  CubeDesc updatedCubeDesc=getMetadataManager().updateCubeDesc(desc);
  if (updatedCubeDesc.getError().size() > 0)   return updatedCubeDesc;
  int cuboidCount=CuboidCLI.simulateCuboidGeneration(updatedCubeDesc);
  logger.info("Updated cube " + cube.getName() + " has "+ cuboidCount+ " cuboids");
  if (!getProjectManager().isCubeInProject(newProjectName,cube)) {
    String owner=SecurityContextHolder.getContext().getAuthentication().getName();
    ProjectInstance newProject=getProjectManager().updateCubeToProject(cube.getName(),newProjectName,owner);
    accessService.inherit(cube,newProject);
  }
  return updatedCubeDesc;
}
