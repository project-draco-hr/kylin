{
  final Properties properties=new Properties();
  properties.load(ClassLoader.getSystemResourceAsStream("kafka_streaming_test/kafka.properties"));
  final KafkaConfig kafkaConfig=StreamManager.getInstance(KylinConfig.getInstanceFromEnv()).getKafkaConfig("kafka_test");
  Properties props=new Properties();
  props.put("metadata.broker.list",StringUtils.join(Iterators.transform(kafkaConfig.getBrokers().iterator(),new Function<Broker,String>(){
    @Nullable @Override public String apply(    @Nullable Broker broker){
      return broker.getConnectionString();
    }
  }
),","));
  props.put("serializer.class","kafka.serializer.StringEncoder");
  props.put("request.required.acks","1");
  ProducerConfig config=new ProducerConfig(props);
  final Producer<String,String> producer=new Producer<String,String>(config);
  final Thread thread=new Thread(new Runnable(){
    @Override public void run(){
      int count=0;
      while (!stopped && count < sendCount) {
        final KeyedMessage<String,String> message=new KeyedMessage<String,String>(kafkaConfig.getTopic(),"current time is:" + System.currentTimeMillis());
        producer.send(message);
        count++;
        try {
          Thread.sleep(100);
        }
 catch (        InterruptedException e) {
          e.printStackTrace();
        }
      }
      logger.debug("totally " + count + " messages have been sent");
      stopped=true;
    }
  }
);
  thread.setDaemon(false);
  thread.start();
}
