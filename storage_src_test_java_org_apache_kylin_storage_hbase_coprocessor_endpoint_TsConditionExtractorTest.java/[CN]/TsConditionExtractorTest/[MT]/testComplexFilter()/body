{
  CompareTupleFilter aFilter=new CompareTupleFilter(TupleFilter.FilterOperatorEnum.GT);
  aFilter.addChild(new ColumnTupleFilter(calDt));
  aFilter.addChild(new ConstantTupleFilter("2000-01-01"));
  CompareTupleFilter bFilter=new CompareTupleFilter(TupleFilter.FilterOperatorEnum.LTE);
  bFilter.addChild(new ColumnTupleFilter(calDt));
  bFilter.addChild(new ConstantTupleFilter("2000-01-03"));
  CompareTupleFilter cFilter=new CompareTupleFilter(TupleFilter.FilterOperatorEnum.LTE);
  cFilter.addChild(new ColumnTupleFilter(calDt));
  cFilter.addChild(new ConstantTupleFilter("2000-01-02"));
  CompareTupleFilter dFilter=new CompareTupleFilter(TupleFilter.FilterOperatorEnum.EQ);
  dFilter.addChild(new ColumnTupleFilter(siteId));
  dFilter.addChild(new ConstantTupleFilter("0"));
  LogicalTupleFilter rootFilter=new LogicalTupleFilter(TupleFilter.FilterOperatorEnum.AND);
  rootFilter.addChildren(Lists.newArrayList(aFilter,bFilter,cFilter,dFilter));
  Range<Long> range=TsConditionExtractor.extractTsCondition(ii.getAllColumns().get(tableRecordInfo.getTimestampColumn()),rootFilter);
  Assert.assertEquals(946684800000L,range.lowerEndpoint().longValue());
  Assert.assertEquals(946771200000L,range.upperEndpoint().longValue());
  Assert.assertEquals(BoundType.OPEN,range.lowerBoundType());
  Assert.assertEquals(BoundType.CLOSED,range.upperBoundType());
}
