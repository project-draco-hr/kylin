{
  String jobId=optionsHelper.getOptionValue(OPTION_JOB_ID);
  String dest=optionsHelper.getOptionValue(OPTION_DEST);
  boolean includeCube=optionsHelper.hasOption(OPTION_INCLUDE_CUBE) ? Boolean.valueOf(optionsHelper.getOptionValue(OPTION_INCLUDE_CUBE)) : true;
  boolean includeYarnLogs=optionsHelper.hasOption(OPTION_INCLUDE_YARN_LOGS) ? Boolean.valueOf(optionsHelper.getOptionValue(OPTION_INCLUDE_YARN_LOGS)) : true;
  if (StringUtils.isEmpty(dest)) {
    throw new RuntimeException("destDir is not set, exit directly without extracting");
  }
  if (!dest.endsWith("/")) {
    dest=dest + "/";
  }
  ExecutablePO executablePO=executableDao.getJob(jobId);
  addRequired(ExecutableDao.pathOfJob(jobId));
  addRequired(ExecutableDao.pathOfJobOutput(jobId));
  for (  ExecutablePO task : executablePO.getTasks()) {
    addRequired(ExecutableDao.pathOfJob(task.getUuid()));
    addRequired(ExecutableDao.pathOfJobOutput(task.getUuid()));
    if (includeYarnLogs) {
      yarnLogsResources.add(task.getUuid());
    }
  }
  executeExtraction(dest);
  if (includeCube) {
    String cubeName=CubingExecutableUtil.getCubeName(executablePO.getParams());
    String[] cubeMetaArgs={"-cube",cubeName,"-destDir",dest + "cube_" + cubeName+ "/","-includeJobs","false"};
    logger.info("Start to extract related cube: " + StringUtils.join(cubeMetaArgs));
    cubeMetaExtractor.execute(cubeMetaArgs);
  }
  if (includeYarnLogs) {
    logger.info("Start to related yarn job logs: " + jobId);
    for (    String taskId : yarnLogsResources) {
      extractYarnLog(taskId,dest + "yarn_" + jobId+ "/");
    }
  }
  logger.info("Extracted kylin jobs located at: " + new File(dest).getAbsolutePath());
}
