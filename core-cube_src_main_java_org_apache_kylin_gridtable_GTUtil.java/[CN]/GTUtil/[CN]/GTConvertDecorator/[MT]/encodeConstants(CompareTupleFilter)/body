{
  TblColRef externalCol=oldCompareFilter.getColumn();
  if (externalCol == null) {
    return oldCompareFilter;
  }
  Collection constValues=oldCompareFilter.getValues();
  if (constValues == null || constValues.isEmpty()) {
    return oldCompareFilter;
  }
  CompareTupleFilter newCompareFilter=new CompareTupleFilter(oldCompareFilter.getOperator());
  newCompareFilter.addChild(new ColumnTupleFilter(externalCol));
  Object firstValue=constValues.iterator().next();
  int col=colMapping == null ? externalCol.getColumnDesc().getZeroBasedIndex() : colMapping.indexOf(externalCol);
  TupleFilter result;
  ByteArray code;
switch (newCompareFilter.getOperator()) {
case EQ:
case IN:
    Set newValues=Sets.newHashSet();
  for (  Object value : constValues) {
    code=translate(col,value,0);
    if (code != null)     newValues.add(code);
  }
if (newValues.isEmpty()) {
  result=ConstantTupleFilter.FALSE;
}
 else {
  newCompareFilter.addChild(new ConstantTupleFilter(newValues));
  result=newCompareFilter;
}
break;
case NEQ:
code=translate(col,firstValue,0);
if (code == null) {
result=ConstantTupleFilter.TRUE;
}
 else {
newCompareFilter.addChild(new ConstantTupleFilter(code));
result=newCompareFilter;
}
break;
case LT:
code=translate(col,firstValue,1);
if (code == null) {
result=ConstantTupleFilter.TRUE;
}
 else {
newCompareFilter.addChild(new ConstantTupleFilter(code));
result=newCompareFilter;
}
break;
case LTE:
code=translate(col,firstValue,-1);
if (code == null) {
result=ConstantTupleFilter.FALSE;
}
 else {
newCompareFilter.addChild(new ConstantTupleFilter(code));
result=newCompareFilter;
}
break;
case GT:
code=translate(col,firstValue,-1);
if (code == null) {
result=ConstantTupleFilter.TRUE;
}
 else {
newCompareFilter.addChild(new ConstantTupleFilter(code));
result=newCompareFilter;
}
break;
case GTE:
code=translate(col,firstValue,1);
if (code == null) {
result=ConstantTupleFilter.FALSE;
}
 else {
newCompareFilter.addChild(new ConstantTupleFilter(code));
result=newCompareFilter;
}
break;
default :
throw new IllegalStateException("Cannot handle operator " + newCompareFilter.getOperator());
}
return result;
}
