{
  String timeZone=jobService.getConfig().getTimeZone();
  TimeZone tzone=TimeZone.getTimeZone(timeZone);
  TimeZone.setDefault(tzone);
  final KylinConfig kylinConfig=KylinConfig.getInstanceFromEnv();
  final Scheduler<AbstractExecutable> scheduler=(Scheduler<AbstractExecutable>)SchedulerFactory.scheduler(kylinConfig.getSchedulerType());
  jobLock=(JobLock)ClassUtil.newInstance(kylinConfig.getJobControllerLock());
  new Thread(new Runnable(){
    @Override public void run(){
      try {
        scheduler.init(new JobEngineConfig(kylinConfig),jobLock);
        if (!scheduler.hasStarted()) {
          logger.info("Job engine doesn't start in this node.");
        }
      }
 catch (      Exception e) {
        throw new RuntimeException(e);
      }
    }
  }
).start();
  Runtime.getRuntime().addShutdownHook(new Thread(new Runnable(){
    @Override public void run(){
      try {
        scheduler.shutdown();
      }
 catch (      SchedulerException e) {
        logger.error("error occurred to shutdown scheduler",e);
      }
    }
  }
));
}
