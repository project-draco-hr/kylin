{
  if (null == mrJobID) {
    this.output.append("Skip status check with empty job id..\n");
    return JobStepStatusEnum.WAITING;
  }
  String applicationId=mrJobID.replace("job","application");
  String url=yarnUrl.replace("${job_id}",applicationId);
  JobStepStatusEnum status=null;
  String checkResponse=null;
  try {
    checkResponse=getHttpResponse(url);
    JsonNode root=new ObjectMapper().readTree(checkResponse);
    RMAppState state=RMAppState.valueOf(root.findValue("state").getTextValue());
    FinalApplicationStatus finalStatus=FinalApplicationStatus.valueOf(root.findValue("finalStatus").getTextValue());
    log.debug("State of Hadoop job: " + mrJobID + ":"+ state+ "-"+ finalStatus);
    output.append(new SimpleDateFormat("yyyy-MM-dd HH:mm:ss.S").format(new Date()) + " - State of Hadoop job: " + mrJobID+ ":"+ state+ " - "+ finalStatus+ "\n");
switch (finalStatus) {
case SUCCEEDED:
      status=JobStepStatusEnum.FINISHED;
    break;
case FAILED:
  status=JobStepStatusEnum.ERROR;
break;
case KILLED:
status=JobStepStatusEnum.ERROR;
break;
case UNDEFINED:
switch (state) {
case NEW:
case NEW_SAVING:
case SUBMITTED:
case ACCEPTED:
status=JobStepStatusEnum.WAITING;
break;
case RUNNING:
status=JobStepStatusEnum.RUNNING;
break;
case FINAL_SAVING:
case FINISHING:
case FINISHED:
case FAILED:
case KILLING:
case KILLED:
}
break;
}
}
 catch (Exception e) {
output.append("Failed to get status from response with url + " + url + "\n");
output.append("Exception: " + e.getLocalizedMessage() + "\n");
log.error("Failed to get status from response with url + " + url + "!\n"+ checkResponse,e);
status=JobStepStatusEnum.ERROR;
}
return status;
}
