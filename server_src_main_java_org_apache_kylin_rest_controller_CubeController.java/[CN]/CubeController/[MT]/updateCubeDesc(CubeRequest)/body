{
  CubeDesc desc=deserializeCubeDesc(cubeRequest);
  if (desc == null) {
    return cubeRequest;
  }
  final String cubeName=desc.getName();
  if (StringUtils.isEmpty(cubeName)) {
    return errorRequest(cubeRequest,"Missing cubeName");
  }
  MetadataManager metadataManager=MetadataManager.getInstance(KylinConfig.getInstanceFromEnv());
  if (StringUtils.isNotEmpty(cubeRequest.getModelDescData())) {
    DataModelDesc modelDesc=deserializeDataModelDesc(cubeRequest);
    if (modelDesc == null) {
      return cubeRequest;
    }
    final String modeName=modelDesc.getName();
    if (!StringUtils.equals(desc.getModelName(),modeName)) {
      return errorRequest(cubeRequest,"CubeDesc.model_name " + desc.getModelName() + " not consistent with model "+ modeName);
    }
    DataModelDesc oldModelDesc=metadataManager.getDataModelDesc(modeName);
    if (oldModelDesc == null) {
      return errorRequest(cubeRequest,"Data model " + modeName + " not found");
    }
    if (!modelDesc.compatibleWith(oldModelDesc)) {
      return errorRequest(cubeRequest,"Update data model is not allowed! Please create a new cube if needed");
    }
  }
  if (!cubeService.isCubeDescEditable(desc)) {
    String error="Cube desc " + desc.getName().toUpperCase() + " is not editable.";
    return errorRequest(cubeRequest,error);
  }
  try {
    CubeInstance cube=cubeService.getCubeManager().getCube(cubeName);
    cube.setRetentionRange(desc.getRetentionRange());
    String projectName=(null == cubeRequest.getProject()) ? ProjectInstance.DEFAULT_PROJECT_NAME : cubeRequest.getProject();
    desc=cubeService.updateCubeAndDesc(cube,desc,projectName);
  }
 catch (  AccessDeniedException accessDeniedException) {
    throw new ForbiddenException("You don't have right to update this cube.");
  }
catch (  Exception e) {
    logger.error("Failed to deal with the request:" + e.getLocalizedMessage(),e);
    throw new InternalErrorException("Failed to deal with the request: " + e.getLocalizedMessage());
  }
  if (desc.getError().isEmpty()) {
    cubeRequest.setSuccessful(true);
  }
 else {
    logger.warn("Cube " + desc.getName() + " fail to create because "+ desc.getError());
    errorRequest(cubeRequest,omitMessage(desc.getError()));
  }
  String descData=JsonUtil.writeValueAsIndentString(desc);
  cubeRequest.setCubeDescData(descData);
  return cubeRequest;
}
