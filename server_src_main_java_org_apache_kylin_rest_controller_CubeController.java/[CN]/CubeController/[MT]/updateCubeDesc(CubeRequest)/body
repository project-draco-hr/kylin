{
  CubeDesc desc=deserializeCubeDesc(cubeRequest);
  CubeDesc oldCubeDesc=null;
  if (desc == null) {
    return cubeRequest;
  }
  if (!cubeService.isCubeDescEditable(desc)) {
    String error="Purge the related cube before editing its desc. Desc name: " + desc.getName();
    updateRequest(cubeRequest,false,error);
    return cubeRequest;
  }
  if (!cubeRequest.getCubeName().equalsIgnoreCase(CubeService.getCubeNameFromDesc(desc.getName()))) {
    deleteCube(cubeRequest.getCubeName());
    saveCubeDesc(cubeRequest);
  }
  String projectName=(null == cubeRequest.getProject()) ? ProjectInstance.DEFAULT_PROJECT_NAME : cubeRequest.getProject();
  try {
    CubeInstance cube=cubeService.getCubeManager().getCube(cubeRequest.getCubeName());
    oldCubeDesc=cube.getDescriptor();
    desc=cubeService.updateCubeAndDesc(cube,desc,projectName);
  }
 catch (  AccessDeniedException accessDeniedException) {
    throw new ForbiddenException("You don't have right to update this cube.");
  }
catch (  Exception e) {
    logger.error("Failed to deal with the request:" + e.getLocalizedMessage(),e);
    throw new InternalErrorException("Failed to deal with the request: " + e.getLocalizedMessage());
  }
  if (!desc.getError().isEmpty()) {
    logger.warn("Cube " + desc.getName() + " fail to update because "+ desc.getError());
    updateRequest(cubeRequest,false,omitMessage(desc.getError()));
    return cubeRequest;
  }
  boolean updateStreamingConfigSuccess=false, updateKafkaConfigSuccess=false;
  boolean isStreamingCube=cubeRequest.getStreamingCube() != null && cubeRequest.getStreamingCube().equals("true");
  StreamingConfig streamingConfig=null, oldStreamingConfig=null;
  KafkaConfig kafkaConfig=null, oldKafkaConfig=null;
  if (isStreamingCube) {
    streamingConfig=deserializeStreamingDesc(cubeRequest);
    kafkaConfig=deserializeKafkaDesc(cubeRequest);
    try {
      oldKafkaConfig=kafkaConfigService.getKafkaConfig(kafkaConfig.getName());
    }
 catch (    IOException e) {
      e.printStackTrace();
    }
    oldStreamingConfig=streamingService.getStreamingManager().getStreamingConfig(streamingConfig.getName());
  }
  try {
    if (isStreamingCube) {
      if (streamingConfig == null) {
        cubeRequest.setMessage("No StreamingConfig info to update.");
        return cubeRequest;
      }
      if (kafkaConfig == null) {
        cubeRequest.setMessage("No KafkaConfig info to update.");
        return cubeRequest;
      }
      if (oldStreamingConfig == null) {
        streamingConfig.setUuid(UUID.randomUUID().toString());
        try {
          streamingService.createStreamingConfig(streamingConfig);
          updateStreamingConfigSuccess=true;
        }
 catch (        IOException e) {
          logger.error("Failed to add StreamingConfig:" + e.getLocalizedMessage(),e);
          throw new InternalErrorException("Failed to add StreamingConfig: " + e.getLocalizedMessage());
        }
      }
 else {
        try {
          streamingConfig=streamingService.updateStreamingConfig(streamingConfig);
          updateStreamingConfigSuccess=true;
        }
 catch (        IOException e) {
          logger.error("Failed to update StreamingConfig:" + e.getLocalizedMessage(),e);
          throw new InternalErrorException("Failed to update StreamingConfig: " + e.getLocalizedMessage());
        }
      }
      if (oldKafkaConfig == null) {
        kafkaConfig.setUuid(UUID.randomUUID().toString());
        try {
          kafkaConfigService.createKafkaConfig(kafkaConfig);
          updateKafkaConfigSuccess=true;
        }
 catch (        IOException e) {
          logger.error("Failed to add KafkaConfig:" + e.getLocalizedMessage(),e);
          throw new InternalErrorException("Failed to add KafkaConfig: " + e.getLocalizedMessage());
        }
      }
 else {
        try {
          kafkaConfig=kafkaConfigService.updateKafkaConfig(kafkaConfig);
          updateKafkaConfigSuccess=true;
        }
 catch (        IOException e) {
          logger.error("Failed to update KafkaConfig:" + e.getLocalizedMessage(),e);
          throw new InternalErrorException("Failed to update KafkaConfig: " + e.getLocalizedMessage());
        }
      }
    }
  }
  finally {
    if (isStreamingCube) {
      if (updateStreamingConfigSuccess == false || updateKafkaConfigSuccess == false) {
        oldCubeDesc.setLastModified(desc.getLastModified());
        CubeInstance cube=cubeService.getCubeManager().getCube(cubeRequest.getCubeName());
        try {
          desc=cubeService.updateCubeAndDesc(cube,oldCubeDesc,projectName);
        }
 catch (        Exception e) {
          logger.error("Failed to recover CubeDesc:" + e.getLocalizedMessage(),e);
          throw new InternalErrorException("Failed to recover CubeDesc: " + e.getLocalizedMessage());
        }
        if (updateStreamingConfigSuccess == true) {
          if (oldStreamingConfig != null) {
            oldStreamingConfig.setLastModified(streamingConfig.getLastModified());
            try {
              streamingService.updateStreamingConfig(oldStreamingConfig);
            }
 catch (            IOException e) {
              logger.error("Failed to recover StreamingConfig:" + e.getLocalizedMessage(),e);
              throw new InternalErrorException("Failed to recover StreamingConfig: " + e.getLocalizedMessage());
            }
          }
 else {
            try {
              streamingService.dropStreamingConfig(streamingConfig);
            }
 catch (            IOException e) {
              logger.error("Failed to remove added StreamingConfig:" + e.getLocalizedMessage(),e);
              throw new InternalErrorException("Failed to remove added StreamingConfig: " + e.getLocalizedMessage());
            }
          }
        }
        if (updateKafkaConfigSuccess == true) {
          if (oldKafkaConfig != null) {
            oldKafkaConfig.setLastModified(kafkaConfig.getLastModified());
            try {
              kafkaConfigService.updateKafkaConfig(oldKafkaConfig);
            }
 catch (            IOException e) {
              logger.error("Failed to recover KafkaConfig:" + e.getLocalizedMessage(),e);
              throw new InternalErrorException("Failed to recover KafkaConfig: " + e.getLocalizedMessage());
            }
          }
 else {
            try {
              kafkaConfigService.dropKafkaConfig(kafkaConfig);
            }
 catch (            IOException e) {
              logger.error("Failed to remove added KafkaConfig:" + e.getLocalizedMessage(),e);
              throw new InternalErrorException("Failed to remove added KafkaConfig: " + e.getLocalizedMessage());
            }
          }
        }
      }
    }
  }
  String descData=JsonUtil.writeValueAsIndentString(desc);
  cubeRequest.setCubeDescData(descData);
  cubeRequest.setSuccessful(true);
  return cubeRequest;
}
