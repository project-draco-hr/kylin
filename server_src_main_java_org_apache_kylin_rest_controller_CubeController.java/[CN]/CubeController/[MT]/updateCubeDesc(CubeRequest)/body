{
  CubeDesc desc=deserializeCubeDesc(cubeRequest);
  if (desc == null) {
    return cubeRequest;
  }
  if (!cubeService.isCubeDescEditable(desc)) {
    String error="Purge the related cube before editing its desc. Desc name: " + desc.getName();
    updateRequest(cubeRequest,false,error);
    return cubeRequest;
  }
  if (!cubeRequest.getCubeName().equalsIgnoreCase(CubeService.getCubeNameFromDesc(desc.getName()))) {
    deleteCube(cubeRequest.getCubeName());
    saveCubeDesc(cubeRequest);
  }
  try {
    CubeInstance cube=cubeService.getCubeManager().getCube(cubeRequest.getCubeName());
    String projectName=(null == cubeRequest.getProject()) ? ProjectInstance.DEFAULT_PROJECT_NAME : cubeRequest.getProject();
    desc=cubeService.updateCubeAndDesc(cube,desc,projectName);
  }
 catch (  AccessDeniedException accessDeniedException) {
    throw new ForbiddenException("You don't have right to update this cube.");
  }
catch (  Exception e) {
    logger.error("Failed to deal with the request:" + e.getLocalizedMessage(),e);
    throw new InternalErrorException("Failed to deal with the request: " + e.getLocalizedMessage());
  }
  if (desc.getError().isEmpty()) {
    cubeRequest.setSuccessful(true);
  }
 else {
    logger.warn("Cube " + desc.getName() + " fail to update because "+ desc.getError());
    updateRequest(cubeRequest,false,omitMessage(desc.getError()));
  }
  String descData=JsonUtil.writeValueAsIndentString(desc);
  cubeRequest.setCubeDescData(descData);
  cubeRequest.setSuccessful(true);
  return cubeRequest;
}
