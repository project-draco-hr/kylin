{
  MetadataManager metaManager=MetadataManager.getInstance(cubeService.getConfig());
  DataModelDesc modelDesc=deserializeDataModelDesc(cubeRequest);
  if (modelDesc == null) {
    return errorRequest(cubeRequest,"Missing ModelDesc data in the request.");
  }
  if (StringUtils.isEmpty(modelDesc.getName())) {
    return errorRequest(cubeRequest,"Missing modelName.");
  }
  try {
    DataModelDesc existingModel=metaManager.getDataModelDesc(modelDesc.getName());
    if (existingModel == null) {
      metaManager.createDataModelDesc(modelDesc);
    }
 else {
      modelDesc.setLastModified(existingModel.getLastModified());
      metaManager.updateDataModelDesc(modelDesc);
    }
  }
 catch (  IOException e) {
    logger.error("Failed to deal with the request:" + e.getLocalizedMessage(),e);
    throw new InternalErrorException("Failed to deal with the request: " + e.getLocalizedMessage());
  }
  CubeDesc desc=deserializeCubeDesc(cubeRequest);
  if (desc == null) {
    return cubeRequest;
  }
  if (StringUtils.isEmpty(desc.getName())) {
    logger.info("Cube name should not be empty.");
    return errorRequest(cubeRequest,"Missing cubeDescName");
  }
  try {
    desc.setUuid(UUID.randomUUID().toString());
    String projectName=(null == cubeRequest.getProject()) ? ProjectInstance.DEFAULT_PROJECT_NAME : cubeRequest.getProject();
    CubeInstance createdCube=cubeService.createCubeAndDesc(desc.getName(),projectName,desc);
    accessService.init(createdCube,AclPermission.ADMINISTRATION);
    ProjectInstance project=cubeService.getProjectManager().getProject(projectName);
    accessService.inherit(createdCube,project);
  }
 catch (  Exception e) {
    logger.error("Failed to deal with the request.",e);
    throw new InternalErrorException(e.getLocalizedMessage(),e);
  }
  cubeRequest.setUuid(desc.getUuid());
  cubeRequest.setSuccessful(true);
  return cubeRequest;
}
