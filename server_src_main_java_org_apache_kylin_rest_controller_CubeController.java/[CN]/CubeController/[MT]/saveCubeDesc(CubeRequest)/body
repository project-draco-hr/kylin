{
  CubeDesc desc=deserializeCubeDesc(cubeRequest);
  if (desc == null) {
    cubeRequest.setMessage("CubeDesc is null.");
    return cubeRequest;
  }
  String name=CubeService.getCubeNameFromDesc(desc.getName());
  if (StringUtils.isEmpty(name)) {
    logger.info("Cube name should not be empty.");
    throw new BadRequestException("Cube name should not be empty.");
  }
  CubeInstance cubeInstance;
  try {
    desc.setUuid(UUID.randomUUID().toString());
    String projectName=(null == cubeRequest.getProject()) ? ProjectInstance.DEFAULT_PROJECT_NAME : cubeRequest.getProject();
    cubeInstance=cubeService.createCubeAndDesc(name,projectName,desc);
  }
 catch (  Exception e) {
    logger.error("Failed to deal with the request.",e);
    throw new InternalErrorException(e.getLocalizedMessage(),e);
  }
  boolean createStreamingConfigSuccess=false, createKafkaConfigSuccess=false;
  StreamingConfig streamingConfig=null;
  KafkaConfig kafkaConfig=null;
  boolean isStreamingCube=cubeRequest.getStreamingCube() != null && cubeRequest.getStreamingCube().equals("true");
  try {
    if (isStreamingCube) {
      streamingConfig=deserializeStreamingDesc(cubeRequest);
      kafkaConfig=deserializeKafkaDesc(cubeRequest);
      if (kafkaConfig == null) {
        cubeRequest.setMessage("No KafkaConfig info defined.");
        return cubeRequest;
      }
      if (streamingConfig == null) {
        cubeRequest.setMessage("No StreamingConfig info defined.");
        return cubeRequest;
      }
      try {
        streamingConfig.setUuid(UUID.randomUUID().toString());
        streamingService.createStreamingConfig(streamingConfig);
        createStreamingConfigSuccess=true;
      }
 catch (      IOException e) {
        logger.error("Failed to save StreamingConfig:" + e.getLocalizedMessage(),e);
        throw new InternalErrorException("Failed to save StreamingConfig: " + e.getLocalizedMessage());
      }
      try {
        kafkaConfig.setUuid(UUID.randomUUID().toString());
        kafkaConfigService.createKafkaConfig(kafkaConfig);
        createKafkaConfigSuccess=true;
      }
 catch (      IOException e) {
        logger.error("Failed to save KafkaConfig:" + e.getLocalizedMessage(),e);
        throw new InternalErrorException("Failed to save KafkaConfig: " + e.getLocalizedMessage());
      }
    }
  }
  finally {
    if (isStreamingCube) {
      if (createStreamingConfigSuccess == false || createKafkaConfigSuccess == false) {
        try {
          cubeService.deleteCube(cubeInstance);
        }
 catch (        Exception ex) {
          throw new InternalErrorException("Failed to rollback on delete cube. " + " Caused by: " + ex.getMessage(),ex);
        }
        if (createStreamingConfigSuccess == true) {
          try {
            streamingService.dropStreamingConfig(streamingConfig);
          }
 catch (          IOException e) {
            throw new InternalErrorException("Failed to create cube, and StreamingConfig created and failed to delete: " + e.getLocalizedMessage());
          }
        }
        if (createKafkaConfigSuccess == true) {
          try {
            kafkaConfigService.dropKafkaConfig(kafkaConfig);
          }
 catch (          IOException e) {
            throw new InternalErrorException("Failed to create cube, and KafkaConfig created and failed to delete: " + e.getLocalizedMessage());
          }
        }
      }
    }
  }
  cubeRequest.setUuid(desc.getUuid());
  cubeRequest.setSuccessful(true);
  return cubeRequest;
}
