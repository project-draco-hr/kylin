{
  CubeDesc desc=deserializeCubeDesc(cubeRequest);
  if (desc == null) {
    cubeRequest.setMessage("CubeDesc is null.");
    return cubeRequest;
  }
  String name=CubeService.getCubeNameFromDesc(desc.getName());
  if (StringUtils.isEmpty(name)) {
    logger.info("Cube name should not be empty.");
    throw new BadRequestException("Cube name should not be empty.");
  }
  CubeInstance cubeInstance;
  try {
    desc.setUuid(UUID.randomUUID().toString());
    String projectName=(null == cubeRequest.getProject()) ? ProjectInstance.DEFAULT_PROJECT_NAME : cubeRequest.getProject();
    cubeInstance=cubeService.createCubeAndDesc(name,projectName,desc);
  }
 catch (  Exception e) {
    logger.error("Failed to deal with the request.",e);
    throw new InternalErrorException(e.getLocalizedMessage(),e);
  }
  if (cubeRequest.getStreamingCube() != null && cubeRequest.getStreamingCube().equals("true")) {
    StreamingConfig streamingConfig=deserializeStreamingDesc(cubeRequest);
    KafkaConfig kafkaConfig=deserializeKafkaDesc(cubeRequest);
    if (streamingConfig == null) {
      cubeRequest.setMessage("No StreamingConfig info defined.");
      return cubeRequest;
    }
    if (kafkaConfig == null) {
      cubeRequest.setMessage("No KafkaConfig info defined.");
      return cubeRequest;
    }
    if (StringUtils.isEmpty(streamingConfig.getName())) {
      logger.info("StreamingConfig Name should not be empty.");
      throw new BadRequestException("StremingConfig name should not be empty.");
    }
    if (StringUtils.isEmpty(kafkaConfig.getName())) {
      logger.info("KafkaConfig Name should not be empty.");
      throw new BadRequestException("KafkaConfig name should not be empty.");
    }
    try {
      streamingConfig.setUuid(UUID.randomUUID().toString());
      streamingService.createStreamingConfig(streamingConfig);
    }
 catch (    IOException e) {
      try {
        cubeService.deleteCube(cubeInstance);
      }
 catch (      Exception ex) {
        throw new InternalErrorException("Failed to rollback on delete cube. " + " Caused by: " + e.getMessage(),ex);
      }
      logger.error("Failed to save StreamingConfig:" + e.getLocalizedMessage(),e);
      throw new InternalErrorException("Failed to save StreamingConfig: " + e.getLocalizedMessage());
    }
    try {
      kafkaConfig.setUuid(UUID.randomUUID().toString());
      kafkaConfigService.createKafkaConfig(kafkaConfig);
    }
 catch (    IOException e) {
      try {
        streamingService.dropStreamingConfig(streamingConfig);
      }
 catch (      IOException e1) {
        throw new InternalErrorException("StreamingConfig is created, but failed to create KafkaConfig: " + e.getLocalizedMessage());
      }
      try {
        cubeService.deleteCube(cubeInstance);
      }
 catch (      Exception ex) {
        throw new InternalErrorException("Failed to rollback on delete cube. " + " Caused by: " + e.getMessage(),ex);
      }
      logger.error("Failed to save KafkaConfig:" + e.getLocalizedMessage(),e);
      throw new InternalErrorException("Failed to save KafkaConfig: " + e.getLocalizedMessage());
    }
  }
  cubeRequest.setUuid(desc.getUuid());
  cubeRequest.setSuccessful(true);
  return cubeRequest;
}
