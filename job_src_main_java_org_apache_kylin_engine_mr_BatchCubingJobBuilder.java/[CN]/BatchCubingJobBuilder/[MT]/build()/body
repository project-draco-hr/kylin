{
  final CubingJob result=CubingJob.createBuildJob(seg,submitter,config);
  final String jobId=result.getId();
  final String cuboidRootPath=getCuboidRootPath(jobId);
  final CubeJoinedFlatTableDesc flatHiveTableDesc=new CubeJoinedFlatTableDesc(seg.getCubeDesc(),seg);
  inputSide.addStepPhase1_CreateFlatTable(result);
  result.addTask(createFactDistinctColumnsStep(flatHiveTableDesc,jobId));
  result.addTask(createBuildDictionaryStep(jobId));
  if (config.isInMemCubing()) {
    result.addTask(createSaveStatisticsStep(jobId));
    result.addTask(createCreateHTableStep(jobId));
    result.addTask(createInMemCubingStep(flatHiveTableDesc,result.getId()));
    result.addTask(createBulkLoadStep(jobId));
  }
 else {
    final int groupRowkeyColumnsCount=seg.getCubeDesc().getRowkey().getNCuboidBuildLevels();
    final int totalRowkeyColumnsCount=seg.getCubeDesc().getRowkey().getRowKeyColumns().length;
    final String[] cuboidOutputTempPath=getCuboidOutputPaths(cuboidRootPath,totalRowkeyColumnsCount,groupRowkeyColumnsCount);
    result.addTask(createBaseCuboidStep(flatHiveTableDesc,cuboidOutputTempPath,jobId));
    for (int i=1; i <= groupRowkeyColumnsCount; i++) {
      int dimNum=totalRowkeyColumnsCount - i;
      result.addTask(createNDimensionCuboidStep(cuboidOutputTempPath,dimNum,totalRowkeyColumnsCount));
    }
    result.addTask(createRangeRowkeyDistributionStep(cuboidRootPath + "*",jobId));
    result.addTask(createCreateHTableStep(jobId));
    result.addTask(createConvertCuboidToHfileStep(cuboidRootPath + "*",jobId));
    result.addTask(createBulkLoadStep(jobId));
  }
  result.addTask(createUpdateCubeInfoAfterBuildStep(jobId));
  inputSide.addStepPhase4_UpdateMetadataAndCleanup(result);
  return result;
}
