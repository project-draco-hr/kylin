{
  project=ProjectInstance.getNormalizedProjectName(project);
  Set<TableDesc> tables=ProjectManager.getInstance(config).listExposedTables(project);
  HashMap<String,Integer> schemaCounts=DatabaseDesc.extractDatabaseOccurenceCounts(tables);
  String majoritySchemaName="";
  int majoritySchemaCount=0;
  for (  Map.Entry<String,Integer> e : schemaCounts.entrySet()) {
    if (e.getKey().equalsIgnoreCase("default")) {
      majoritySchemaCount=Integer.MAX_VALUE;
      majoritySchemaName=e.getKey();
    }
    if (e.getValue() >= majoritySchemaCount) {
      majoritySchemaCount=e.getValue();
      majoritySchemaName=e.getKey();
    }
  }
  try {
    File tmp=File.createTempFile("olap_model_",".json");
    FileWriter out=new FileWriter(tmp);
    out.write("{\n");
    out.write("    \"version\": \"1.0\",\n");
    out.write("    \"defaultSchema\": \"" + majoritySchemaName + "\",\n");
    out.write("    \"schemas\": [\n");
    int counter=0;
    for (    String schemaName : schemaCounts.keySet()) {
      out.write("        {\n");
      out.write("            \"type\": \"custom\",\n");
      out.write("            \"name\": \"" + schemaName + "\",\n");
      out.write("            \"factory\": \"org.apache.kylin.query.schema.OLAPSchemaFactory\",\n");
      out.write("            \"operand\": {\n");
      out.write("                \"" + SCHEMA_PROJECT + "\": \""+ project+ "\"\n");
      out.write("            },\n");
      createOLAPSchemaFunctions(out);
      out.write("        }\n");
      if (++counter != schemaCounts.size()) {
        out.write(",\n");
      }
    }
    out.write("    ]\n");
    out.write("}\n");
    out.close();
    tmp.deleteOnExit();
    logger.info("Schema json:" + StringUtils.join(FileUtils.readLines(tmp,Charset.defaultCharset()),"\n"));
    return tmp;
  }
 catch (  IOException e) {
    throw new RuntimeException(e);
  }
}
