{
  if (jobInstance.getStatus().equals(JobStatusEnum.FINISHED)) {
    validate(jobInstance);
    log.info("Updating cube segment " + jobInstance.getRelatedSegment() + " for cube "+ jobInstance.getRelatedCube());
    long cubeSize=0;
    JobStep convertToHFileStep=jobInstance.findStep(JobConstants.STEP_NAME_CONVERT_CUBOID_TO_HFILE);
    if (null != convertToHFileStep) {
      String cubeSizeString=convertToHFileStep.getInfo(JobInstance.HDFS_BYTES_WRITTEN);
      if (cubeSizeString == null || cubeSizeString.equals("")) {
        throw new RuntimeException("Can't get cube segment size.");
      }
      cubeSize=Long.parseLong(cubeSizeString) / 1024;
    }
 else {
      log.info("No step with name '" + JobConstants.STEP_NAME_CONVERT_CUBOID_TO_HFILE + "' is found");
    }
    CubeManager cubeMgr=CubeManager.getInstance(engineConfig.getConfig());
    CubeInstance cubeInstance=cubeMgr.getCube(jobInstance.getRelatedCube());
    long sourceCount=0;
    long sourceSize=0;
switch (jobInstance.getType()) {
case BUILD:
      JobStep baseCuboidStep=jobInstance.findStep(JobConstants.STEP_NAME_BUILD_BASE_CUBOID);
    if (null != baseCuboidStep) {
      String sourceRecordsCount=baseCuboidStep.getInfo(JobInstance.SOURCE_RECORDS_COUNT);
      if (sourceRecordsCount == null || sourceRecordsCount.equals("")) {
        throw new RuntimeException("Can't get cube source record count.");
      }
      sourceCount=Long.parseLong(sourceRecordsCount);
    }
 else {
      log.info("No step with name '" + JobConstants.STEP_NAME_BUILD_BASE_CUBOID + "' is found");
    }
  JobStep createFlatTableStep=jobInstance.findStep(JobConstants.STEP_NAME_CREATE_FLAT_HIVE_TABLE);
if (null != createFlatTableStep) {
  String sourceRecordsSize=createFlatTableStep.getInfo(JobInstance.SOURCE_RECORDS_SIZE);
  if (sourceRecordsSize == null || sourceRecordsSize.equals("")) {
    throw new RuntimeException("Can't get cube source record size.");
  }
  sourceSize=Long.parseLong(sourceRecordsSize);
}
 else {
  log.info("No step with name '" + JobConstants.STEP_NAME_CREATE_FLAT_HIVE_TABLE + "' is found");
}
if (cubeInstance.incrementalBuildOnHll()) {
for (CubeSegment seg : cubeInstance.getMergingSegments()) {
  sourceCount+=seg.getSourceRecords();
  sourceSize+=seg.getSourceRecordsSize();
}
}
break;
case MERGE:
for (CubeSegment seg : cubeInstance.getMergingSegments()) {
sourceCount+=seg.getSourceRecords();
sourceSize+=seg.getSourceRecordsSize();
}
break;
}
cubeMgr.updateSegmentOnJobSucceed(cubeInstance,jobInstance.getType(),jobInstance.getRelatedSegment(),jobInstance.getUuid(),jobInstance.getExecEndTime(),cubeSize,sourceCount,sourceSize);
}
}
