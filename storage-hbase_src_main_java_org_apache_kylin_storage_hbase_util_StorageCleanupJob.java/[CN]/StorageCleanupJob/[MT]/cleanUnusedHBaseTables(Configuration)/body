{
  CubeManager cubeMgr=CubeManager.getInstance(KylinConfig.getInstanceFromEnv());
  long TIME_THREADSHOLD=KylinConfig.getInstanceFromEnv().getStorageCleanupTimeThreshold();
  HBaseAdmin hbaseAdmin=new HBaseAdmin(conf);
  String tableNamePrefix=IRealizationConstants.SharedHbaseStorageLocationPrefix;
  HTableDescriptor[] tableDescriptors=hbaseAdmin.listTables(tableNamePrefix + ".*");
  List<String> allTablesNeedToBeDropped=new ArrayList<String>();
  for (  HTableDescriptor desc : tableDescriptors) {
    String host=desc.getValue(IRealizationConstants.HTableTag);
    String creationTime=desc.getValue(IRealizationConstants.HTableCreationTime);
    if (KylinConfig.getInstanceFromEnv().getMetadataUrlPrefix().equalsIgnoreCase(host)) {
      if (StringUtils.isEmpty(creationTime) || (System.currentTimeMillis() - Long.valueOf(creationTime) > TIME_THREADSHOLD)) {
        allTablesNeedToBeDropped.add(desc.getTableName().getNameAsString());
      }
 else {
        logger.info("Exclude table " + desc.getTableName().getNameAsString() + " from drop list, as it is newly created");
      }
    }
  }
  for (  CubeInstance cube : cubeMgr.listAllCubes()) {
    for (    CubeSegment seg : cube.getSegments()) {
      String tablename=seg.getStorageLocationIdentifier();
      if (allTablesNeedToBeDropped.contains(tablename)) {
        allTablesNeedToBeDropped.remove(tablename);
        logger.info("Exclude table " + tablename + " from drop list, as the table belongs to cube "+ cube.getName()+ " with status "+ cube.getStatus());
      }
    }
  }
  if (delete == true) {
    ExecutorService executorService=Executors.newSingleThreadExecutor();
    for (    String htableName : allTablesNeedToBeDropped) {
      FutureTask futureTask=new FutureTask(new DeleteHTableRunnable(hbaseAdmin,htableName));
      executorService.execute(futureTask);
      try {
        futureTask.get(TIME_THRESHOLD_DELETE_HTABLE,TimeUnit.MINUTES);
      }
 catch (      TimeoutException e) {
        logger.warn("It fails to delete htable " + htableName + ", for it cost more than "+ TIME_THRESHOLD_DELETE_HTABLE+ " minutes!");
        futureTask.cancel(true);
      }
catch (      Exception e) {
        e.printStackTrace();
        futureTask.cancel(true);
      }
    }
    executorService.shutdown();
  }
 else {
    System.out.println("--------------- Tables To Be Dropped ---------------");
    for (    String htableName : allTablesNeedToBeDropped) {
      System.out.println(htableName);
    }
    System.out.println("----------------------------------------------------");
  }
  hbaseAdmin.close();
}
