{
  IGTScanner inputScanner=new IGTScanner(){
    @Override public GTInfo getInfo(){
      return INFO;
    }
    @Override public long getScannedRowCount(){
      throw new UnsupportedOperationException();
    }
    @Override public void close() throws IOException {
    }
    @Override public Iterator<GTRecord> iterator(){
      return TEST_DATA.iterator();
    }
  }
;
  GTScanRequest scanRequest=new GTScanRequestBuilder().setInfo(INFO).setRanges(null).setDimensions(new ImmutableBitSet(0,3)).setAggrGroupBy(new ImmutableBitSet(1,3)).setAggrMetrics(new ImmutableBitSet(3,6)).setAggrMetricsFuncs(new String[]{"SUM","SUM","COUNT_DISTINCT"}).setFilterPushDown(null).setAggCacheMemThreshold(0.5).createGTScanRequest();
  GTAggregateScanner scanner=new GTAggregateScanner(inputScanner,scanRequest,Long.MAX_VALUE);
  int count=0;
  for (  GTRecord record : scanner) {
    assertNotNull(record);
    Object[] returnRecord=record.getValues();
    assertEquals(80000,((LongMutable)returnRecord[3]).get());
    assertEquals(84000,((BigDecimal)returnRecord[4]).longValue());
    count++;
  }
  assertEquals(10,count);
  scanner.close();
}
