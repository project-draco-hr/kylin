{
  Options options=new Options();
  try {
    options.addOption(OPTION_JOB_NAME);
    options.addOption(OPTION_CUBE_NAME);
    options.addOption(OPTION_SEGMENT_ID);
    options.addOption(OPTION_INPUT_PATH);
    options.addOption(OPTION_OUTPUT_PATH);
    parseOptions(options,args);
    String cubeName=getOptionValue(OPTION_CUBE_NAME).toUpperCase();
    String segmentID=getOptionValue(OPTION_SEGMENT_ID);
    CubeManager cubeMgr=CubeManager.getInstance(KylinConfig.getInstanceFromEnv());
    CubeInstance cube=cubeMgr.getCube(cubeName);
    String jobName=getOptionValue(OPTION_JOB_NAME);
    logger.info("Starting: " + jobName);
    job=Job.getInstance(getConf(),jobName);
    setJobClasspath(job,cube.getConfig());
    addInputDirs(getOptionValue(OPTION_INPUT_PATH),job);
    Path output=new Path(getOptionValue(OPTION_OUTPUT_PATH));
    FileOutputFormat.setOutputPath(job,output);
    job.setInputFormatClass(SequenceFileInputFormat.class);
    job.setMapperClass(MergeCuboidMapper.class);
    job.setMapOutputKeyClass(Text.class);
    job.setMapOutputValueClass(Text.class);
    job.setReducerClass(CuboidReducer.class);
    job.setOutputFormatClass(SequenceFileOutputFormat.class);
    job.setOutputKeyClass(Text.class);
    job.setOutputValueClass(Text.class);
    job.getConfiguration().set(BatchConstants.CFG_CUBE_NAME,cubeName);
    job.getConfiguration().set(BatchConstants.CFG_CUBE_SEGMENT_ID,segmentID);
    attachKylinPropsAndMetadata(cube,job.getConfiguration());
    setReduceTaskNum(job,cube.getDescriptor(),0);
    this.deletePath(job.getConfiguration(),output);
    return waitForCompletion(job);
  }
  finally {
    if (job != null)     cleanupTempConfFile(job.getConfiguration());
  }
}
