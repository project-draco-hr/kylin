{
  boolean queryCacheGloballyEnabled=KylinConfig.getInstanceFromEnv().isQueryCacheEnabled();
  boolean queryCacheQueryLevelEnabled=!BackdoorToggles.getDisableCache();
  if (realization.getType() == RealizationType.INVERTED_INDEX) {
    ICachableStorageQuery ret;
    try {
      ret=(ICachableStorageQuery)Class.forName(defaultIIStorageQuery).getConstructor(IIInstance.class).newInstance((IIInstance)realization);
    }
 catch (    Exception e) {
      throw new RuntimeException("Failed to initialize storage query for " + defaultIIStorageQuery,e);
    }
    if (queryCacheGloballyEnabled && queryCacheQueryLevelEnabled) {
      return wrapWithCache(ret,realization);
    }
 else {
      return ret;
    }
  }
 else   if (realization.getType() == RealizationType.CUBE) {
    String cubeStorageQuery;
    if (overwriteStorageQuery != null) {
      cubeStorageQuery=overwriteStorageQuery;
    }
 else     if ("v1".equalsIgnoreCase(BackdoorToggles.getHbaseCubeQueryVersion())) {
      cubeStorageQuery=v1CubeStorageQuery;
    }
 else {
      cubeStorageQuery=v2CubeStorageQuery;
    }
    ICachableStorageQuery ret;
    try {
      ret=(ICachableStorageQuery)Class.forName(cubeStorageQuery).getConstructor(CubeInstance.class).newInstance((CubeInstance)realization);
    }
 catch (    Exception e) {
      throw new RuntimeException("Failed to initialize storage query for " + cubeStorageQuery,e);
    }
    if (queryCacheGloballyEnabled && queryCacheQueryLevelEnabled) {
      return wrapWithCache(ret,realization);
    }
 else {
      return ret;
    }
  }
 else {
    throw new IllegalArgumentException("Unknown realization type " + realization.getType());
  }
}
