{
  int bytesLength=cubeSegment.getRowKeyPreambleSize();
  KylinConfig kylinConf=cubeSegment.getConfig();
  long mask=Long.highestOneBit(baseCuboidId);
  long parentCuboidIdActualLength=Long.SIZE - Long.numberOfLeadingZeros(baseCuboidId);
  for (int i=0; i < parentCuboidIdActualLength; i++) {
    if ((mask & cuboidId) > 0) {
      bytesLength+=rowKeyColumnLength.get(i);
    }
    mask=mask >> 1;
  }
  int space=0;
  boolean isMemoryHungry=false;
  for (  MeasureDesc measureDesc : cubeSegment.getCubeDesc().getMeasures()) {
    if (measureDesc.getFunction().getMeasureType().isMemoryHungry()) {
      isMemoryHungry=true;
    }
    DataType returnType=measureDesc.getFunction().getReturnDataType();
    space+=returnType.getStorageBytesEstimate();
  }
  bytesLength+=space;
  double ret=1.0 * bytesLength * rowCount / (1024L * 1024L);
  if (isMemoryHungry) {
    double cuboidSizeMemHungryRatio=kylinConf.getJobCuboidSizeMemHungryRatio();
    logger.info("Cube is memory hungry, storage size estimation multiply " + cuboidSizeMemHungryRatio);
    ret*=cuboidSizeMemHungryRatio;
  }
 else {
    double cuboidSizeRatio=kylinConf.getJobCuboidSizeRatio();
    logger.info("Cube is not memory hungry, storage size estimation multiply " + cuboidSizeRatio);
    ret*=cuboidSizeRatio;
  }
  logger.info("Cuboid " + cuboidId + " has "+ rowCount+ " rows, each row size is "+ bytesLength+ " bytes."+ " Total size is "+ ret+ "M.");
  return ret;
}
