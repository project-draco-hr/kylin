{
  if (noPrecaculatedFieldsAvailable() && func.needRewriteField()) {
    logger.info(func + "skip rewriteAggregateCall because no pre-aggregated field available");
    return aggCall;
  }
  List<Integer> newArgList=Lists.newArrayList(aggCall.getArgList());
  if (func.needRewriteField()) {
    RelDataTypeField field=getInput().getRowType().getField(func.getRewriteFieldName(),true,false);
    if (newArgList.isEmpty()) {
      newArgList.add(field.getIndex());
    }
 else {
      newArgList.set(0,field.getIndex());
    }
  }
  String callName=getSqlFuncName(aggCall);
  RelDataType fieldType=aggCall.getType();
  SqlAggFunction newAgg=aggCall.getAggregation();
  Map<String,Class<?>> udafMap=func.getMeasureType().getRewriteCalciteAggrFunctions();
  if (func.isCount()) {
    newAgg=SqlStdOperatorTable.SUM0;
  }
 else   if (udafMap != null && udafMap.containsKey(callName)) {
    newAgg=createCustomAggFunction(callName,fieldType,udafMap.get(callName));
  }
  @SuppressWarnings("deprecation") AggregateCall newAggCall=new AggregateCall(newAgg,false,newArgList,fieldType,callName);
  return newAggCall;
}
